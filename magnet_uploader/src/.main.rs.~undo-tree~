(undo-tree-save-format-version . 1)
"120957a317723ea3be7b7f08cf9c5899d1191594"
[nil nil nil nil (25962 62594 965941 699000) 0 nil]
([nil nil ((4 . 7) (t 25962 62517 32363 675000)) nil (25962 62594 965940 784000) 0 nil])
([nil nil ((17 . 21) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 17) (17 . 21) (16 . 18) (5 . 17)) nil (25962 62594 965939 493000) 0 nil])
([nil nil ((24 . 26) (21 . 24)) nil (25962 62594 965938 128000) 0 nil])
([nil nil ((43 . 48) (42 . 43) (#(" " 0 1 (fontified t)) . -42) (undo-tree-id669 . -1) 43 (40 . 43) (39 . 40) (#("H" 0 1 (fontified t face font-lock-type-face)) . -39) (undo-tree-id670 . -1) 40 (39 . 40) (34 . 39) (30 . 34) (25 . 30) (24 . 25)) nil (25962 62594 965935 989000) 0 nil])
([nil nil ((48 . 51)) nil (25962 62594 965932 333000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 52) (undo-tree-id668 . -1)) nil (25962 62594 965931 603000) 0 nil])
([nil nil ((54 . 57)) nil (25962 62594 965930 156000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -56) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -57) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#(" " 0 1 (fontified t)) . -58) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -59) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -60) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -61) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("p" 0 1 (fontified t face font-lock-function-name-face)) . -62) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("w" 0 1 (fontified t face font-lock-function-name-face)) . -63) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (#(" " 0 1 (fontified t)) . -64) (undo-tree-id655 . -1) 65 (64 . 65) (59 . 64) (#("p" 0 1 (fontified t face font-lock-function-name-face)) . -59) (undo-tree-id656 . -1) (#("w" 0 1 (fontified t face font-lock-function-name-face)) . -60) (undo-tree-id657 . -1) 61 (56 . 61) (#("a" 0 1 (fontified t)) . -56) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("l" 0 1 (fontified t)) . -57) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("l" 0 1 (fontified t)) . -58) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("o" 0 1 (fontified t)) . -59) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("c" 0 1 (fontified t)) . -60) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 61 (56 . 61) (#("alloc" 0 5 (fontified nil)) . -56) (56 . 61)) nil (25962 62594 965907 80000) 0 nil])
([nil nil ((#("    println!(\"Hello, world!\");
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 28 (fontified t face font-lock-string-face) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 31 (fontified t)) . 72) (undo-tree-id0 . -30) (undo-tree-id1 . -31)) nil (25962 62594 965216 937000) 0 nil])
([nil nil ((58 . 60) (t 25962 62595 1052 173000)) nil (25962 62669 54347 41000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -76) (undo-tree-id1046 . -4) (undo-tree-id1047 . -4) (undo-tree-id1048 . -4) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) 80 (76 . 80) (#("    " 0 4 (fontified nil)) . 75) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -4) (undo-tree-id1074 . -4) (undo-tree-id1075 . -4) (undo-tree-id1076 . -4) (undo-tree-id1077 . -4) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -4) (undo-tree-id1084 . -4) (undo-tree-id1085 . -4) (undo-tree-id1086 . -4) (undo-tree-id1087 . -4) (undo-tree-id1088 . -4) (undo-tree-id1089 . -4) (undo-tree-id1090 . -4) (undo-tree-id1091 . -4) (75 . 80) (#("    " 0 4 (fontified nil)) . 74) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) (undo-tree-id1094 . -4) (undo-tree-id1095 . -4) (undo-tree-id1096 . -4) (undo-tree-id1097 . -4) (undo-tree-id1098 . -4) (undo-tree-id1099 . -4) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) (undo-tree-id1105 . -4) (undo-tree-id1106 . -4) (undo-tree-id1107 . -4) (undo-tree-id1108 . -4) (undo-tree-id1109 . -4) (undo-tree-id1110 . -4) (undo-tree-id1111 . -4) (undo-tree-id1112 . -4) (undo-tree-id1113 . -4) (undo-tree-id1114 . -4) (73 . 79)) nil (25962 62669 54343 842000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -100) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) 101 (91 . 101) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -91) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 92 (79 . 92) (75 . 79)) nil (25962 62669 54262 633000) 0 nil])
([nil nil ((107 . 108) (103 . 107) (#("    " 0 4 (fontified nil)) . 102) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) (102 . 107) (#("    " 0 4 (fontified nil)) . 101) (undo-tree-id1021 . -4) (100 . 106)) nil (25962 62669 54247 969000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . 107) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1)) nil (25962 62669 54239 538000) 0 nil])
([nil nil ((101 . 105)) nil (25962 62669 54227 65000) 0 nil])
([nil nil ((104 . 108) (#("    " 0 4 (fontified nil)) . 103) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (103 . 108) (#("    " 0 4 (fontified nil)) . 102) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (102 . 107) (#("    " 0 4 (fontified nil)) . 101) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -3) (undo-tree-id928 . -3) (undo-tree-id929 . -3) (undo-tree-id930 . -3) (undo-tree-id931 . -3) (undo-tree-id932 . -3) (undo-tree-id933 . -3) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . -3) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -3) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -3) (undo-tree-id952 . -3) (undo-tree-id953 . -3) (undo-tree-id954 . -3) (undo-tree-id955 . -3) (undo-tree-id956 . -3) (undo-tree-id957 . -3) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -3) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) (undo-tree-id969 . -3) (undo-tree-id970 . -3) (undo-tree-id971 . -3) (undo-tree-id972 . -3) (undo-tree-id973 . -3) (undo-tree-id974 . -3) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -3) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -4) (105 . 106)) nil (25962 62669 54222 42000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -119) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#("c" 0 1 (fontified t)) . -120) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (#("p" 0 1 (fontified t)) . -121) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 122 (110 . 122) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -110) (undo-tree-id851 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -111) (undo-tree-id852 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -112) (undo-tree-id853 . -1) 113 (106 . 113) (102 . 106)) nil (25962 62669 54140 380000) 0 nil])
([nil nil ((#("    let socket = 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-variable-name-face) 14 17 (fontified t) 17 18 (fontified t)) . 102) (undo-tree-id722 . 1) (undo-tree-id723 . -17) (undo-tree-id724 . -17) (undo-tree-id725 . -17) (undo-tree-id726 . -16) (undo-tree-id727 . -18) (undo-tree-id728 . -18) (undo-tree-id729 . -18) (undo-tree-id730 . -18) (undo-tree-id731 . -18) (undo-tree-id732 . -18) (undo-tree-id733 . -18) (undo-tree-id734 . -18) (undo-tree-id735 . -18) (undo-tree-id736 . -18) (undo-tree-id737 . -18) (undo-tree-id738 . -18) (undo-tree-id739 . -18) (undo-tree-id740 . -18) (undo-tree-id741 . -18) (undo-tree-id742 . -18) (undo-tree-id743 . -18) (undo-tree-id744 . -18) (undo-tree-id745 . -18) (undo-tree-id746 . -18) (undo-tree-id747 . -18) (undo-tree-id748 . 1) (undo-tree-id749 . -16) (undo-tree-id750 . -17) (undo-tree-id751 . -16) (undo-tree-id752 . -17) (undo-tree-id753 . -17) (undo-tree-id754 . -17) (undo-tree-id755 . -17) (undo-tree-id756 . -17) (undo-tree-id757 . -17) (undo-tree-id758 . -17) (undo-tree-id759 . -17) (undo-tree-id760 . -17) (undo-tree-id761 . -17) (undo-tree-id762 . -17) (undo-tree-id763 . -17) (undo-tree-id764 . -17) (undo-tree-id765 . -17) (undo-tree-id766 . -17) (undo-tree-id767 . -17) (undo-tree-id768 . -17) (undo-tree-id769 . -17) (undo-tree-id770 . -17) (undo-tree-id771 . -17) (undo-tree-id772 . -17) (undo-tree-id773 . -17) (undo-tree-id774 . -17) (undo-tree-id775 . -17) (undo-tree-id776 . -17) (undo-tree-id777 . -17) (undo-tree-id778 . -17) (undo-tree-id779 . -17) (undo-tree-id780 . -17) (undo-tree-id781 . -17) (undo-tree-id782 . -17) (undo-tree-id783 . -17) (undo-tree-id784 . -17) (undo-tree-id785 . -17) (undo-tree-id786 . -17) (undo-tree-id787 . -17) (undo-tree-id788 . -17) (undo-tree-id789 . -17) (undo-tree-id790 . -17) (undo-tree-id791 . -17) (undo-tree-id792 . -17) (undo-tree-id793 . -17) (undo-tree-id794 . -17) (undo-tree-id795 . -17) (undo-tree-id796 . -17) (undo-tree-id797 . -16) (undo-tree-id798 . -16) (undo-tree-id799 . -16) (undo-tree-id800 . -16) (undo-tree-id801 . -16) (undo-tree-id802 . -16) (undo-tree-id803 . -16) (undo-tree-id804 . -16) (undo-tree-id805 . -16) (undo-tree-id806 . -16) (undo-tree-id807 . -16) (undo-tree-id808 . -16) (undo-tree-id809 . -16) (undo-tree-id810 . -16) (undo-tree-id811 . -16) (undo-tree-id812 . -16) (undo-tree-id813 . -16) (undo-tree-id814 . -16) (undo-tree-id815 . -16) (undo-tree-id816 . -16) (undo-tree-id817 . -16) (undo-tree-id818 . -16) (undo-tree-id819 . -16) (undo-tree-id820 . -16) (undo-tree-id821 . -16) (undo-tree-id822 . -16) (undo-tree-id823 . -16) (undo-tree-id824 . -16) (undo-tree-id825 . -16) (undo-tree-id826 . -16) (undo-tree-id827 . -16) (undo-tree-id828 . -16) (undo-tree-id829 . -16) (undo-tree-id830 . -16) (undo-tree-id831 . -16) (undo-tree-id832 . -16) (undo-tree-id833 . -16) (undo-tree-id834 . -16) (undo-tree-id835 . -16) (undo-tree-id836 . -16) (undo-tree-id837 . -16) (undo-tree-id838 . -16) (undo-tree-id839 . -16) (undo-tree-id840 . -16) (undo-tree-id841 . -16) (undo-tree-id842 . -18) 118) nil (25962 62669 54130 15000) 0 nil])
([nil nil ((1 . 3)) nil (25962 62669 53917 758000) 0 nil])
([nil nil ((27 . 28) (16 . 27) (#("Tcp" 0 3 (fontified nil)) . 16) (16 . 19) (#("TcpListener" 0 11 (fontified nil)) . -16) (16 . 27) (#("Tcp" 0 3 (fontified t face font-lock-type-face)) . -16) (undo-tree-id671 . -2) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . -3) (undo-tree-id716 . -3) 19 (18 . 19) (17 . 18) (14 . 17) (#(";" 0 1 (fontified t)) . -14) (undo-tree-id717 . -1) (#(":" 0 1 (fontified t)) . -15) (undo-tree-id718 . -1) 16 (15 . 16) (#(";" 0 1 (fontified t)) . -15) (undo-tree-id719 . -1) 16 (14 . 16) (11 . 14) (#("ne" 0 2 (fontified nil)) . 11) (11 . 13) (#("net" 0 3 (fontified nil)) . -11) (11 . 14) (#("ne" 0 2 (fontified t)) . -11) (undo-tree-id720 . -2) (undo-tree-id721 . -2) 13 (3 . 13) (2 . 3)) nil (25962 62669 53911 54000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -135) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) 136 (135 . 136) (t 25962 62669 64807 709000)) nil (25962 62716 56317 941000) 0 nil])
([nil nil ((139 . 146) (135 . 139) (#("A" 0 1 (fontified t face font-lock-type-face)) . -135) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -136) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("M" 0 1 (fontified t face font-lock-type-face)) . -137) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -138) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -139) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) 140 (135 . 140) (#("AsMut" 0 5 (fontified nil)) . -135) (135 . 140)) nil (25962 62716 56279 974000) 0 nil])
([nil nil ((#("socket " 0 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t)) . 139) (undo-tree-id1408 . -6) (undo-tree-id1409 . -4) (undo-tree-id1410 . -7) (undo-tree-id1411 . -6) (undo-tree-id1412 . -7) (undo-tree-id1413 . -7) (undo-tree-id1414 . -7) (undo-tree-id1415 . -7) (undo-tree-id1416 . -7) (undo-tree-id1417 . -7) (undo-tree-id1418 . -7) (undo-tree-id1419 . -7) (undo-tree-id1420 . -7) (undo-tree-id1421 . -7) (undo-tree-id1422 . -7) (undo-tree-id1423 . -7) (undo-tree-id1424 . -7) (undo-tree-id1425 . -7) (undo-tree-id1426 . -7) (undo-tree-id1427 . -7) (undo-tree-id1428 . -7) (undo-tree-id1429 . -7) (undo-tree-id1430 . -7) (undo-tree-id1431 . -7) (undo-tree-id1432 . -7) (undo-tree-id1433 . -7) (undo-tree-id1434 . -7) (undo-tree-id1435 . -7) (undo-tree-id1436 . -7) (undo-tree-id1437 . -7) (undo-tree-id1438 . -7) (undo-tree-id1439 . -7) (undo-tree-id1440 . -7) (undo-tree-id1441 . -7) (undo-tree-id1442 . -7) (undo-tree-id1443 . -7) (undo-tree-id1444 . -7) (undo-tree-id1445 . -7) (undo-tree-id1446 . -7) (undo-tree-id1447 . -7) (undo-tree-id1448 . -7) (undo-tree-id1449 . -7) (undo-tree-id1450 . -7) (undo-tree-id1451 . -7) (undo-tree-id1452 . -7) (undo-tree-id1453 . -7) (undo-tree-id1454 . -7) (undo-tree-id1455 . -7) (undo-tree-id1456 . -7) (undo-tree-id1457 . -7) (undo-tree-id1458 . -7) (undo-tree-id1459 . -7) (undo-tree-id1460 . -7) (undo-tree-id1461 . -7) (undo-tree-id1462 . -7) (undo-tree-id1463 . -7) (undo-tree-id1464 . -7) (undo-tree-id1465 . -7) (undo-tree-id1466 . -7) (undo-tree-id1467 . -7) (undo-tree-id1468 . -7) (undo-tree-id1469 . -7) (undo-tree-id1470 . -7) (undo-tree-id1471 . -7) (undo-tree-id1472 . -7) (undo-tree-id1473 . -7) (undo-tree-id1474 . -7) (undo-tree-id1475 . -7) (undo-tree-id1476 . -7) (undo-tree-id1477 . -7) (undo-tree-id1478 . -7) (undo-tree-id1479 . -7) (undo-tree-id1480 . -7) (undo-tree-id1481 . -7) (undo-tree-id1482 . -7) (undo-tree-id1483 . -7) (undo-tree-id1484 . -7) (undo-tree-id1485 . -7) (undo-tree-id1486 . -7) (undo-tree-id1487 . -7) (undo-tree-id1488 . -7) (undo-tree-id1489 . -7) (undo-tree-id1490 . -7) (undo-tree-id1491 . -7) (undo-tree-id1492 . -7) (undo-tree-id1493 . -7) (undo-tree-id1494 . -7) (undo-tree-id1495 . -7) (undo-tree-id1496 . -7) (undo-tree-id1497 . -7) (undo-tree-id1498 . -7) (undo-tree-id1499 . -7) (undo-tree-id1500 . -6) (undo-tree-id1501 . -6) (undo-tree-id1502 . -6) (undo-tree-id1503 . -6) (undo-tree-id1504 . -6) (undo-tree-id1505 . -6) (undo-tree-id1506 . -6) (undo-tree-id1507 . -6) (undo-tree-id1508 . -6) (undo-tree-id1509 . -6) (undo-tree-id1510 . -6) (undo-tree-id1511 . -7)) nil (25962 62716 56270 621000) 0 nil])
([nil nil ((161 . 167) (#(":" 0 1 (fontified t)) . -161) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#(":" 0 1 (fontified t)) . -162) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("b" 0 1 (fontified t)) . -163) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) 164 (#("i" 0 1 (fontified t)) . -164) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 165 (163 . 165) (#("n" 0 1 (fontified t)) . -163) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("e" 0 1 (fontified t)) . -164) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) 165 (161 . 165) (150 . 161) (#("Tcp" 0 3 (fontified nil)) . 150) (150 . 153) (#("TcpListener" 0 11 (fontified nil)) . -150) (150 . 161) (#("Tcp" 0 3 (fontified t face font-lock-type-face)) . -150) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) 153 (138 . 153) (#("l" 0 1 (fontified t)) . -138) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("i" 0 1 (fontified t)) . -139) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) 140 (138 . 140)) nil (25962 62716 56212 175000) 0 nil])
([nil nil ((#("    let listener = TcpListener::bind 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 30 (fontified t face font-lock-type-face) 30 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 131) (undo-tree-id1115 . 2) (undo-tree-id1116 . -37) (undo-tree-id1117 . -10) (undo-tree-id1118 . -36) (undo-tree-id1119 . -35) (undo-tree-id1120 . -4) (undo-tree-id1121 . -4) (undo-tree-id1122 . -4) (undo-tree-id1123 . -4) (undo-tree-id1124 . -4) (undo-tree-id1125 . -4) (undo-tree-id1126 . -4) (undo-tree-id1127 . -4) (undo-tree-id1128 . -4) (undo-tree-id1129 . -4) (undo-tree-id1130 . -4) (undo-tree-id1131 . -4) (undo-tree-id1132 . -4) (undo-tree-id1133 . -4) (undo-tree-id1134 . -4) (undo-tree-id1135 . -4) (undo-tree-id1136 . -4) (undo-tree-id1137 . -4) (undo-tree-id1138 . -4) (undo-tree-id1139 . -4) (undo-tree-id1140 . -4) (undo-tree-id1141 . -4) (undo-tree-id1142 . -4) (undo-tree-id1143 . -4) (undo-tree-id1144 . -4) (undo-tree-id1145 . -4) (undo-tree-id1146 . -4) (undo-tree-id1147 . -4) (undo-tree-id1148 . -4) (undo-tree-id1149 . -4) (undo-tree-id1150 . -4) (undo-tree-id1151 . -4) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4) (undo-tree-id1154 . -4) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) (undo-tree-id1157 . -4) (undo-tree-id1158 . -4) (undo-tree-id1159 . -4) (undo-tree-id1160 . -4) (undo-tree-id1161 . -4) (undo-tree-id1162 . -4) (undo-tree-id1163 . -4) (undo-tree-id1164 . -4) (undo-tree-id1165 . -4) (undo-tree-id1166 . -4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -4) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -4) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) (undo-tree-id1188 . -4) (undo-tree-id1189 . -37) (undo-tree-id1190 . -37) (undo-tree-id1191 . -37) (undo-tree-id1192 . -37) (undo-tree-id1193 . -37) (undo-tree-id1194 . -37) (undo-tree-id1195 . -37) (undo-tree-id1196 . -37) (undo-tree-id1197 . -37) (undo-tree-id1198 . -37) (undo-tree-id1199 . -37) (undo-tree-id1200 . -37) (undo-tree-id1201 . -37) (undo-tree-id1202 . -37) (undo-tree-id1203 . -37) (undo-tree-id1204 . -37) (undo-tree-id1205 . -37) (undo-tree-id1206 . -37) (undo-tree-id1207 . -37) (undo-tree-id1208 . -37) (undo-tree-id1209 . -37) (undo-tree-id1210 . -37) (undo-tree-id1211 . -37) (undo-tree-id1212 . -37) (undo-tree-id1213 . -37) (undo-tree-id1214 . -37) (undo-tree-id1215 . -37) (undo-tree-id1216 . -37) (undo-tree-id1217 . -37) (undo-tree-id1218 . -37) (undo-tree-id1219 . -37) (undo-tree-id1220 . -37) (undo-tree-id1221 . -37) (undo-tree-id1222 . -37) (undo-tree-id1223 . -37) (undo-tree-id1224 . -37) (undo-tree-id1225 . -37) (undo-tree-id1226 . -37) (undo-tree-id1227 . -37) (undo-tree-id1228 . -37) (undo-tree-id1229 . -37) (undo-tree-id1230 . -37) (undo-tree-id1231 . -37) (undo-tree-id1232 . -37) (undo-tree-id1233 . -37) (undo-tree-id1234 . -37) (undo-tree-id1235 . -37) (undo-tree-id1236 . -37) (undo-tree-id1237 . -37) (undo-tree-id1238 . -37) (undo-tree-id1239 . -37) (undo-tree-id1240 . -37) (undo-tree-id1241 . -37) (undo-tree-id1242 . -37) (undo-tree-id1243 . -37) (undo-tree-id1244 . -37) (undo-tree-id1245 . -37) (undo-tree-id1246 . -37) (undo-tree-id1247 . -37) (undo-tree-id1248 . -37) (undo-tree-id1249 . -37) (undo-tree-id1250 . -37) (undo-tree-id1251 . -37) (undo-tree-id1252 . -37) (undo-tree-id1253 . -37) (undo-tree-id1254 . -37) (undo-tree-id1255 . -37) (undo-tree-id1256 . -37) (undo-tree-id1257 . -37) (undo-tree-id1258 . -37) (undo-tree-id1259 . -37) (undo-tree-id1260 . -37) (undo-tree-id1261 . -37) (undo-tree-id1262 . -37) (undo-tree-id1263 . -37) (undo-tree-id1264 . -37) (undo-tree-id1265 . -37) (undo-tree-id1266 . -37) (undo-tree-id1267 . -37) (undo-tree-id1268 . -37) (undo-tree-id1269 . -37) (undo-tree-id1270 . -37) (undo-tree-id1271 . -37) (undo-tree-id1272 . -37) (undo-tree-id1273 . -37) (undo-tree-id1274 . -37) (undo-tree-id1275 . -37) (undo-tree-id1276 . -37) (undo-tree-id1277 . -37) (undo-tree-id1278 . -37) (undo-tree-id1279 . -37) (undo-tree-id1280 . -37) (undo-tree-id1281 . -37) (undo-tree-id1282 . -37) (undo-tree-id1283 . -37) (undo-tree-id1284 . -37) (undo-tree-id1285 . -37) (undo-tree-id1286 . -37) (undo-tree-id1287 . 2) (undo-tree-id1288 . -36) (undo-tree-id1289 . -36) (undo-tree-id1290 . -36) (undo-tree-id1291 . -36) (undo-tree-id1292 . -36) (undo-tree-id1293 . -36) (undo-tree-id1294 . -36) (undo-tree-id1295 . -36) (undo-tree-id1296 . -36) (undo-tree-id1297 . -36) (undo-tree-id1298 . -36) (undo-tree-id1299 . -36) (undo-tree-id1300 . -36) (undo-tree-id1301 . -36) (undo-tree-id1302 . -36) (undo-tree-id1303 . -36) (undo-tree-id1304 . -36) (undo-tree-id1305 . -36) (undo-tree-id1306 . -36) (undo-tree-id1307 . -36) (undo-tree-id1308 . -36) (undo-tree-id1309 . -36) (undo-tree-id1310 . -36) (undo-tree-id1311 . -36) (undo-tree-id1312 . -36) (undo-tree-id1313 . -36) (undo-tree-id1314 . -36) (undo-tree-id1315 . -36) (undo-tree-id1316 . -36) (undo-tree-id1317 . -36) (undo-tree-id1318 . -36) (undo-tree-id1319 . -36) (undo-tree-id1320 . -36) (undo-tree-id1321 . -36) (undo-tree-id1322 . -37) (undo-tree-id1323 . -36) (undo-tree-id1324 . -36) (undo-tree-id1325 . -36) (undo-tree-id1326 . -36) (undo-tree-id1327 . -36) (undo-tree-id1328 . -36) (undo-tree-id1329 . -36) (undo-tree-id1330 . -36) (undo-tree-id1331 . -36) (undo-tree-id1332 . -36) (undo-tree-id1333 . -36) (undo-tree-id1334 . -36) (undo-tree-id1335 . -36) (undo-tree-id1336 . -36) (undo-tree-id1337 . -36) (undo-tree-id1338 . -36) (undo-tree-id1339 . -36) (undo-tree-id1340 . -36) (undo-tree-id1341 . -36) (undo-tree-id1342 . -36) (undo-tree-id1343 . -36) (undo-tree-id1344 . -36) (undo-tree-id1345 . -36) (undo-tree-id1346 . -36) (undo-tree-id1347 . -36) (undo-tree-id1348 . -36) (undo-tree-id1349 . -36) (undo-tree-id1350 . -36) (undo-tree-id1351 . -36) (undo-tree-id1352 . -36) (undo-tree-id1353 . -36) (undo-tree-id1354 . -36) (undo-tree-id1355 . -36) (undo-tree-id1356 . -36) (undo-tree-id1357 . -36) (undo-tree-id1358 . -36) (undo-tree-id1359 . -36) (undo-tree-id1360 . -36) (undo-tree-id1361 . -36) (undo-tree-id1362 . -36) (undo-tree-id1363 . -36) (undo-tree-id1364 . -36) (undo-tree-id1365 . -36) (undo-tree-id1366 . -35) (undo-tree-id1367 . -35) (undo-tree-id1368 . -35) (undo-tree-id1369 . -35) (undo-tree-id1370 . -35) (undo-tree-id1371 . -35) (undo-tree-id1372 . -35) (undo-tree-id1373 . -35) (undo-tree-id1374 . -35) (undo-tree-id1375 . -35) (undo-tree-id1376 . -35) (undo-tree-id1377 . -35) (undo-tree-id1378 . -35) (undo-tree-id1379 . -35) (undo-tree-id1380 . -35) (undo-tree-id1381 . -35) (undo-tree-id1382 . -35) (undo-tree-id1383 . -35) (undo-tree-id1384 . -35) (undo-tree-id1385 . -35) (undo-tree-id1386 . -35) (undo-tree-id1387 . -35) (undo-tree-id1388 . -35) (undo-tree-id1389 . -38) 166) nil (25962 62716 56190 235000) 0 nil])
([nil nil ((176 . 181) (169 . 176) (168 . 170) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -168) (#("addr" 0 4 (fontified nil)) . 169) (168 . 169) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 168 182 nil nil nil t #s(yas--exit 183 nil))) #s(yas--exit 183 nil) 7 nil #s(yas--field 1 168 182 nil nil nil t #s(yas--exit 183 nil)) nil nil)) (163 . 173) (#("bind(${1:addr})$0" 0 17 (fontified nil)) . 163) (163 . 180) (#("bind(…)" 0 7 (fontified nil)) . -163) (163 . 170) (161 . 163) (150 . 161) (#("T" 0 1 (fontified nil)) . 150) (150 . 151) (#("TcpListener" 0 11 (fontified nil)) . -150) (150 . 161) (#("T" 0 1 (fontified t face font-lock-type-face)) . -150) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) 151 (135 . 151) (131 . 135) (t 25962 62716 55387 567000)) nil (25962 62871 458941 770000) 0 nil])
([nil nil ((183 . 184) (apply yas--snippet-revive 163 183 #s(yas--snippet nil (#s(yas--field 1 168 182 nil nil nil t #s(yas--exit 183 nil))) #s(yas--exit 183 nil) 7 nil #s(yas--field 1 168 182 nil nil nil t #s(yas--exit 183 nil)) nil nil))) nil (25962 62871 458937 431000) 0 nil])
([nil nil ((187 . 191) (#("    " 0 4 (fontified nil)) . 186) (undo-tree-id1719 . -4) (186 . 191) (#("    " 0 4 (fontified nil)) . 185) (undo-tree-id1720 . -4) (189 . 190)) nil (25962 62871 458936 350000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-keyword-face)) . -214) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("c" 0 1 (fontified t)) . -215) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("o" 0 1 (fontified t)) . -216) (undo-tree-id1665 . -1) 217 (213 . 217) (212 . 213) (204 . 212) (#("lis" 0 3 (fontified nil)) . 204) (204 . 207) (#("listener" 0 8 (fontified nil)) . -204) (204 . 212) (#("lis" 0 3 (fontified t)) . -204) (undo-tree-id1666 . -2) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) 207 (204 . 207) (#("l" 0 1 (fontified t)) . -204) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (#("i" 0 1 (fontified t)) . -205) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("s" 0 1 (fontified t)) . -206) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (#("t" 0 1 (fontified t)) . -207) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("e" 0 1 (fontified t)) . -208) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (#("n" 0 1 (fontified t)) . -209) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("e" 0 1 (fontified t)) . -210) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (#("r" 0 1 (fontified t)) . -211) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (#("." 0 1 (fontified t)) . -212) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (#("i" 0 1 (fontified t)) . -213) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -214) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (#("c" 0 1 (fontified t)) . -215) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (#("o" 0 1 (fontified t)) . -216) (undo-tree-id1704 . -1) 217 (216 . 217) (215 . 216) (213 . 215) (#("a" 0 1 (fontified t)) . -213) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#("n" 0 1 (fontified t)) . -214) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("d" 0 1 (fontified t)) . -215) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 216 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -216) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 217) (#("res" 0 3 (fontified t)) . 217) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 204 214 nil nil nil t #s(yas--exit 214 nil))) #s(yas--exit 214 nil) 8 nil #s(yas--field 1 204 214 nil nil nil t #s(yas--exit 214 nil)) nil nil)) (213 . 221) (#("and(${1:res})$0" 0 15 (fontified nil)) . 213) (213 . 228) (#("and(…)" 0 6 (fontified nil)) . -213) (213 . 219) (212 . 213) (#(" " 0 1 (fontified t)) . -212) (undo-tree-id1716 . -1) 213 (212 . 213) (204 . 212) (#("lis" 0 3 (fontified nil)) . 204) (204 . 207) (#("listener" 0 8 (fontified nil)) . -204) (204 . 212) (#("lis" 0 3 (fontified t)) . -204) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) 207 (195 . 207) (190 . 195) (186 . 190)) nil (25962 62871 458926 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 204 214 #s(yas--snippet nil (#s(yas--field 1 204 214 nil nil nil t #s(yas--exit 214 nil))) #s(yas--exit 214 nil) 8 nil #s(yas--field 1 204 214 nil nil nil t #s(yas--exit 214 nil)) nil nil))) nil (25962 62871 458888 841000) 0 nil])
([nil nil ((222 . 230) (#("r" 0 1 (fontified t face font-lock-string-face)) . -222) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -223) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -224) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -225) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) 226 (212 . 226) (#("i" 0 1 (fontified t face font-lock-string-face)) . -212) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -213) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -214) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -215) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) 216 (211 . 216) (210 . 211) (#(" " 0 1 (fontified t face font-lock-string-face)) . -210) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -211) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -212) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("n" 0 1 (fontified nil face font-lock-string-face)) . -213) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -214) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -215) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -216) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -217) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -218) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -219) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) 220 (212 . 220) (192 . 212) (191 . 193) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -191) (#("msg" 0 3 (fontified nil)) . 192) (191 . 192) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 191 231 nil nil nil t #s(yas--exit 232 nil))) #s(yas--exit 232 nil) 9 nil #s(yas--field 1 191 231 nil nil nil t #s(yas--exit 232 nil)) nil nil)) (184 . 195) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 184) (184 . 202) (#("ex" 0 2 (fontified nil)) . 184) (184 . 186) (#("expect(…)" 0 9 (fontified nil)) . -184) (184 . 193) (#("ex" 0 2 (fontified t)) . -184) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) 186 (184 . 186) (183 . 184)) nil (25962 62871 458882 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 184 232 #s(yas--snippet nil (#s(yas--field 1 191 231 nil nil nil t #s(yas--exit 232 nil))) #s(yas--exit 232 nil) 9 nil #s(yas--field 1 191 231 nil nil nil t #s(yas--exit 232 nil)) nil nil))) nil (25962 62871 458854 892000) 0 nil])
([nil nil ((183 . 185)) nil (25962 62871 458854 144000) 0 nil])
([nil nil ((277 . 278) (278 . 282) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 277) (277 . 278) (276 . 278) (274 . 277) (apply yas--snippet-revive 264 274 #s(yas--snippet nil nil #s(yas--exit 274 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 274 nil) 10 nil nil nil nil)) (264 . 274) (#("incoming()$0" 0 12 (fontified nil)) . 264) (264 . 276) (#("in" 0 2 (fontified nil)) . 264) (264 . 266) (#("incoming()" 0 10 (fontified nil)) . -264) (264 . 274) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -264) (undo-tree-id1616 . -1) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) 266 (265 . 266) (264 . 265) (263 . 264) (#("." 0 1 (fontified t)) . -263) (undo-tree-id1619 . -1) (#("i" 0 1 (fontified t)) . -264) (undo-tree-id1620 . -1) 265) nil (25962 62871 458851 293000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -297) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (#("u" 0 1 (fontified t)) . -298) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) 299 (#("n" 0 1 (fontified t)) . -299) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) 300 (297 . 300) (291 . 297) (#("st" 0 2 (fontified nil)) . 291) (291 . 293) (#("stream" 0 6 (fontified nil)) . -291) (291 . 297) (#("st" 0 2 (fontified t)) . -291) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) 293 (286 . 293) (284 . 286) (278 . 284)) nil (25962 62871 458843 545000) 0 nil])
([nil nil ((291 . 297)) nil (25962 62871 458834 711000) 0 nil])
([nil nil ((306 . 311) (307 . 308) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 306) (306 . 311) (305 . 307) (303 . 306)) nil (25962 62871 458833 498000) 0 nil])
([nil nil ((314 . 315) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 314 315 nil nil nil t #s(yas--exit 316 nil))) #s(yas--exit 316 nil) 11 nil #s(yas--field 1 314 315 nil nil nil t #s(yas--exit 316 nil)) nil nil)) (311 . 315) (#("Ok($1)$0" 0 8 (fontified nil)) . 311) (311 . 319) (#("O" 0 1 (fontified nil)) . 311) (311 . 312) (#("Ok(…)" 0 5 (fontified nil)) . -311) (311 . 316) (#("O" 0 1 (fontified t face font-lock-type-face)) . -311) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) 312 (311 . 312) (#("O" 0 1 (fontified t face font-lock-type-face)) . -311) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) 312 (311 . 312)) nil (25962 62871 458831 222000) 0 nil])
([nil nil ((332 . 333) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 332 333 nil nil nil t #s(yas--exit 334 nil))) #s(yas--exit 334 nil) 12 nil #s(yas--field 1 332 333 nil nil nil t #s(yas--exit 334 nil)) nil nil)) (328 . 333) (#("Err($1)$0" 0 9 (fontified nil)) . 328) (328 . 337) (#("Er" 0 2 (fontified nil)) . 328) (328 . 330) (#("Err(…)" 0 6 (fontified nil)) . -328) (328 . 334) (#("Er" 0 2 (fontified t face font-lock-type-face)) . -328) (undo-tree-id1598 . -1) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) 330 (328 . 330) (322 . 328) (321 . 322) (320 . 321) (318 . 320) (317 . 318) (316 . 317) (apply yas--snippet-revive 311 316 #s(yas--snippet nil (#s(yas--field 1 314 315 nil nil nil t #s(yas--exit 316 nil))) #s(yas--exit 316 nil) 11 nil #s(yas--field 1 314 315 nil nil nil t #s(yas--exit 316 nil)) nil nil))) nil (25962 62871 458824 997000) 0 nil])
([nil nil ((350 . 356) (349 . 350) (348 . 350) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -348) (348 . 349) (apply yas--snippet-revive 338 349 #s(yas--snippet nil nil #s(yas--exit 348 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 348 nil) 13 nil nil nil nil)) (338 . 349) (#("eprintln!($0)" 0 13 (fontified nil)) . 338) (338 . 351) (#("e" 0 1 (fontified nil)) . 338) (338 . 339) (#("eprintln!(…)" 0 12 (fontified nil)) . -338) (338 . 350) (#("ep" 0 2 (fontified t)) . -338) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) 340 (338 . 340) (#("p" 0 1 (fontified t)) . -338) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) 339 (338 . 339) (336 . 338) (334 . 336) (apply yas--snippet-revive 328 334 #s(yas--snippet nil (#s(yas--field 1 332 333 nil nil nil t #s(yas--exit 334 nil))) #s(yas--exit 334 nil) 12 nil #s(yas--field 1 332 333 nil nil nil t #s(yas--exit 334 nil)) nil nil))) nil (25962 62871 458818 858000) 0 nil])
([nil nil ((194 . 201)) nil (25962 62871 458804 104000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -364) (364 . 365) (#("}" 0 1 (fontified nil face rust-string-interpolation)) . -364) (364 . 365) (363 . 365)) nil (25962 62871 458802 862000) 0 nil])
([nil nil ((364 . 365)) nil (25962 62871 458801 741000) 0 nil])
([nil nil ((368 . 369)) nil (25962 62871 458800 763000) 0 nil])
([nil nil ((372 . 373)) nil (25962 62871 458795 951000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -376) (undo-tree-id2035 . -1) 377 (376 . 377) (#("	" 0 1 (fontified nil)) . 375) (undo-tree-id2036 . -1) (375 . 377) (#("	" 0 1 (fontified nil)) . 374) (undo-tree-id2037 . -1) (373 . 376) (t 25962 62871 468933 943000)) nil (25962 62909 938136 290000) 0 nil])
([nil nil ((344 . 347)) nil (25962 62909 938133 221000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 346) (undo-tree-id2032 . 1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1)) nil (25962 62909 938132 276000) 0 nil])
([nil nil ((371 . 372) (#("}" 0 1 (fontified nil)) . -371) (370 . 372) (#("," 0 1 (fontified t)) . -370) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) 371) nil (25962 62909 938126 840000) 0 nil])
([nil nil ((347 . 349) (#(" " 0 1 (fontified nil)) . 346) (undo-tree-id1983 . -1) (347 . 348)) nil (25962 62909 938098 634000) 0 nil])
([nil nil ((373 . 378) (#(" " 0 1 (fontified nil)) . 372) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (373 . 374)) nil (25962 62909 938095 841000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified t)) . -373) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) (undo-tree-id1923 . -6) (undo-tree-id1924 . -6) (undo-tree-id1925 . -6) (undo-tree-id1926 . -6) (undo-tree-id1927 . -6) (undo-tree-id1928 . -6) (undo-tree-id1929 . -6) (undo-tree-id1930 . -6) (undo-tree-id1931 . -6) (undo-tree-id1932 . -6) (undo-tree-id1933 . -6) (undo-tree-id1934 . -6) (undo-tree-id1935 . -6) (undo-tree-id1936 . -6) (undo-tree-id1937 . -6) (undo-tree-id1938 . -6) (undo-tree-id1939 . -6) (undo-tree-id1940 . -6) (undo-tree-id1941 . -6) (undo-tree-id1942 . -6) (undo-tree-id1943 . -6) (undo-tree-id1944 . -6) (undo-tree-id1945 . -6) (undo-tree-id1946 . -6) 379 (372 . 379)) nil (25962 62909 937919 142000) 0 nil])
([nil nil ((372 . 373)) nil (25962 62909 937896 935000) 0 nil])
([nil nil ((372 . 373) (#("." 0 1 (fontified t)) . -372) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) 373) nil (25962 62909 937892 848000) 0 nil])
([nil nil ((apply yas--snippet-revive 376 385 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (376 . 385) (#("continue;" 0 9 (fontified nil)) . 376) (376 . 385) (#("con" 0 3 (fontified nil)) . 376) (376 . 379) (#("continue" 0 8 (fontified nil)) . -376) (376 . 384) (#("con" 0 3 (fontified t)) . -376) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -2) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -3) (undo-tree-id1783 . -3) (undo-tree-id1784 . -3) (undo-tree-id1785 . -3) (undo-tree-id1786 . -3) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -3) (undo-tree-id1790 . -3) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) (undo-tree-id1793 . -3) (undo-tree-id1794 . -3) (undo-tree-id1795 . -3) (undo-tree-id1796 . -3) (undo-tree-id1797 . -3) (undo-tree-id1798 . -3) (undo-tree-id1799 . -3) (undo-tree-id1800 . -3) (undo-tree-id1801 . -3) (undo-tree-id1802 . -3) (undo-tree-id1803 . -3) (undo-tree-id1804 . -3) (undo-tree-id1805 . -3) (undo-tree-id1806 . -3) (undo-tree-id1807 . -3) (undo-tree-id1808 . -3) (undo-tree-id1809 . -3) (undo-tree-id1810 . -3) (undo-tree-id1811 . -3) (undo-tree-id1812 . -3) (undo-tree-id1813 . -3) (undo-tree-id1814 . -3) (undo-tree-id1815 . -3) (undo-tree-id1816 . -3) (undo-tree-id1817 . -3) (undo-tree-id1818 . -3) (undo-tree-id1819 . -3) (undo-tree-id1820 . -3) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) (undo-tree-id1824 . -3) (undo-tree-id1825 . -3) (undo-tree-id1826 . -3) (undo-tree-id1827 . -3) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) (undo-tree-id1830 . -3) (undo-tree-id1831 . -3) (undo-tree-id1832 . -3) (undo-tree-id1833 . -3) (undo-tree-id1834 . -3) (undo-tree-id1835 . -3) (undo-tree-id1836 . -3) (undo-tree-id1837 . -3) (undo-tree-id1838 . -3) 379 (376 . 379) (373 . 376)) nil (25962 62909 937839 359000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 386) (t 25962 62909 951639 686000)) nil (25962 62964 828449 658000) 0 nil])
([nil nil ((415 . 419) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -415) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) 416 (400 . 416) (379 . 400) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -379) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) 380 (376 . 380) (373 . 376)) nil (25962 62964 828448 78000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -445) (undo-tree-id2058 . -1) 446 (445 . 446) (#("	" 0 1 (fontified nil)) . 444) (undo-tree-id2059 . -1) (444 . 446) (#("	" 0 1 (fontified nil)) . 443) (undo-tree-id2060 . -1) (442 . 445)) nil (25962 62964 828443 686000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -478) (undo-tree-id2046 . -1) 479 (462 . 479) (#("R" 0 1 (fontified t face font-lock-string-face)) . -462) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (#("I" 0 1 (fontified t face font-lock-string-face)) . -463) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -464) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (#("N" 0 1 (fontified t face font-lock-string-face)) . -465) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) 466 (461 . 466) (456 . 461) (455 . 457) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -455) (455 . 456) (#("'" 0 1 (fontified t)) . -455) (undo-tree-id2055 . -1) 456 (455 . 456) (apply yas--snippet-revive 446 456 #s(yas--snippet nil nil #s(yas--exit 455 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 455 nil) 15 nil nil nil nil)) (446 . 456) (#("println!($0)" 0 12 (fontified nil)) . 446) (446 . 458) (#("pr" 0 2 (fontified nil)) . 446) (446 . 448) (#("println!(…)" 0 11 (fontified nil)) . -446) (446 . 457) (#("pr" 0 2 (fontified t)) . -446) (undo-tree-id2056 . -2) (undo-tree-id2057 . -2) 448 (446 . 448) (445 . 446)) nil (25962 62964 828436 838000) 0 nil])
([nil nil ((480 . 481)) nil (25962 62964 828424 181000) 0 nil])
([nil nil ((483 . 484)) nil (25962 62964 828423 329000) 0 nil])
([nil nil ((105 . 107) (#(" " 0 1 (fontified t)) . -105) (undo-tree-id2041 . -1) 106 (104 . 106) (#(" " 0 1 (fontified t)) . -104) (undo-tree-id2042 . -1) 105 (94 . 105) (#(" " 0 1 (fontified t)) . -94) (undo-tree-id2043 . -1) 95 (85 . 95) (#("l" 0 1 (fontified t)) . -85) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) 86 (85 . 86)) nil (25962 62964 828421 404000) 0 nil])
([nil nil ((110 . 114) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 110) (110 . 114) (109 . 111) (107 . 110)) nil (25962 62964 828414 75000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id2038 . 1) (undo-tree-id2039 . 1) (undo-tree-id2040 . -1)) nil (25962 62964 828409 56000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -107) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (#(">" 0 1 (fontified t syntax-table (1))) . -108) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (#(" " 0 1 (fontified t)) . -109) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) 110 (107 . 110) (t 25962 62964 862428 816000)) nil (25962 62972 446043 788000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -113) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (#("a" 0 1 (fontified t)) . -114) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) 115 (113 . 115) (t 25962 62972 454312 925000)) nil (25962 62983 514027 548000) 0 nil])
([nil nil ((#("::net" 0 2 (fontified t) 2 5 (fontified t face font-lock-constant-face)) . -8) 13 (15 . 21) (25 . 33) (26 . 30) (113 . 122) (#("Tcp" 0 3 (fontified nil)) . 113) (113 . 116) (#("TcpStream (use std::net::TcpStream)" 0 35 (fontified nil)) . -113) (113 . 148) (#("Tcp" 0 3 (fontified t face font-lock-type-face)) . -113) (undo-tree-id2269 . -3) (undo-tree-id2270 . -3) 116 (111 . 116) (#(" " 0 1 (fontified t)) . -111) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) 112 (105 . 112)) nil (25962 62983 514017 697000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 542) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (t 25962 62983 530164 187000)) nil (25962 62990 307501 926000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 542) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -2)) nil (25962 62990 307498 433000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 542) (undo-tree-id2279 . -1)) nil (25962 62990 307491 493000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 548) (undo-tree-id2290 . -4) (undo-tree-id2291 . -5) (t 25962 62990 318084 582000)) nil (25962 62993 508315 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 548) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1)) nil (25962 62993 508309 473000) 0 nil])
([nil nil ((143 . 144) (t 25962 62993 550049 684000)) nil (25962 63038 185070 667000) 0 nil])
([nil nil ((#("    '
" 0 6 (fontified t)) . 139) (undo-tree-id2307 . 1) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -4) (undo-tree-id2311 . 1) (undo-tree-id2312 . -4) (undo-tree-id2313 . -5) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -6) 143) nil (25962 63038 185068 593000) 0 nil])
([nil nil ((147 . 149) (apply yas--snippet-revive 140 148 #s(yas--snippet nil nil #s(yas--exit 147 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 147 nil) 16 nil nil nil nil)) (140 . 148) (#("Option<$0>" 0 10 (fontified nil)) . 140) (140 . 150) (#("O" 0 1 (fontified nil)) . 140) (140 . 141) (#("Option<…>" 0 9 (fontified nil)) . -140) (140 . 149) (#("O" 0 1 (fontified t face font-lock-type-face)) . -140) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) 141 (137 . 141)) nil (25962 63038 185044 477000) 0 nil])
([nil nil ((150 . 151)) nil (25962 63038 185019 375000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -165) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) 166 (165 . 166) (apply yas--snippet-revive 159 165 #s(yas--snippet nil (#s(yas--field 1 162 164 nil nil nil nil #s(yas--exit 165 nil))) #s(yas--exit 165 nil) 17 nil #s(yas--field 1 162 164 nil nil nil nil #s(yas--exit 165 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 162 164 nil nil nil nil #s(yas--exit 165 nil))) #s(yas--exit 165 nil) 17 nil #s(yas--field 1 162 164 nil nil nil nil #s(yas--exit 165 nil)) nil nil)) (159 . 165) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 159) (159 . 172) (#("O" 0 1 (fontified nil)) . 159) (159 . 160) (#("Ok(…)" 0 5 (fontified nil)) . -159) (159 . 164) (#("O" 0 1 (fontified t face font-lock-type-face)) . -159) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) 160 (159 . 160) (155 . 159) (#("    " 0 4 (fontified nil)) . 154) (undo-tree-id2370 . -4) (154 . 159) (#("    " 0 4 (fontified nil)) . 153) (undo-tree-id2371 . -4) (157 . 158) (152 . 157) (t 25962 63038 193752 165000)) nil (25962 63044 161124 223000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -157) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (#("j" 0 1 (fontified t)) . -158) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) 159 (157 . 159) (153 . 157) (t 25962 63044 169736 695000)) nil (25962 63051 992990 115000) 0 nil])
([nil nil ((#("Ok" 0 2 (fontified t face font-lock-type-face)) . 163) (undo-tree-id2593 . -1) (undo-tree-id2594 . -2) (t 25962 63052 1724 469000)) nil (25962 63068 966138 533000) 0 nil])
([nil nil ((#("Option" 0 6 (fontified t face font-lock-type-face)) . 140) (undo-tree-id2591 . -5) (undo-tree-id2592 . -6)) nil (25962 63068 966135 882000) 0 nil])
([nil nil ((140 . 146) (#("Res" 0 3 (fontified nil)) . 140) (140 . 143) (#("Result" 0 6 (fontified nil)) . -140) (140 . 146) (#("Res" 0 3 (fontified t face font-lock-type-face)) . -140) (undo-tree-id2538 . -3) (undo-tree-id2539 . -3) (undo-tree-id2540 . -2) (undo-tree-id2541 . -2) (undo-tree-id2542 . -2) (undo-tree-id2543 . -2) (undo-tree-id2544 . -2) (undo-tree-id2545 . -2) (undo-tree-id2546 . -2) (undo-tree-id2547 . -2) (undo-tree-id2548 . -2) (undo-tree-id2549 . -2) (undo-tree-id2550 . -2) (undo-tree-id2551 . -2) (undo-tree-id2552 . -2) (undo-tree-id2553 . -2) (undo-tree-id2554 . -2) (undo-tree-id2555 . -2) (undo-tree-id2556 . -2) (undo-tree-id2557 . -2) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -3) (undo-tree-id2561 . -3) (undo-tree-id2562 . -3) (undo-tree-id2563 . -3) (undo-tree-id2564 . -3) (undo-tree-id2565 . -3) (undo-tree-id2566 . -3) (undo-tree-id2567 . -3) (undo-tree-id2568 . -3) (undo-tree-id2569 . -3) (undo-tree-id2570 . -3) (undo-tree-id2571 . -3) (undo-tree-id2572 . -3) (undo-tree-id2573 . -3) (undo-tree-id2574 . -3) (undo-tree-id2575 . -3) (undo-tree-id2576 . -3) (undo-tree-id2577 . -3) (undo-tree-id2578 . -3) (undo-tree-id2579 . -3) (undo-tree-id2580 . -3) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -3) (undo-tree-id2584 . -3) (undo-tree-id2585 . -3) (undo-tree-id2586 . -3) (undo-tree-id2587 . -3) (undo-tree-id2588 . -3) (undo-tree-id2589 . -3) (undo-tree-id2590 . -3) 143 (140 . 143)) nil (25962 63068 966131 849000) 0 nil])
([nil nil ((149 . 153)) nil (25962 63068 966096 812000) 0 nil])
([nil nil ((#("    (())
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-2-face)) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t face (rainbow-delimiters-depth-3-face)) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t)) . 163) (undo-tree-id2483 . -8) (undo-tree-id2484 . -7) (undo-tree-id2485 . -5) (undo-tree-id2486 . -7) (undo-tree-id2487 . -4) (undo-tree-id2488 . -8) (undo-tree-id2489 . -7) (undo-tree-id2490 . -7) (undo-tree-id2491 . -7) (undo-tree-id2492 . -7) (undo-tree-id2493 . -7) (undo-tree-id2494 . -7) (undo-tree-id2495 . -7) (undo-tree-id2496 . -7) (undo-tree-id2497 . -7) (undo-tree-id2498 . -9) (undo-tree-id2499 . -9) (undo-tree-id2500 . -9) (undo-tree-id2501 . -9) (undo-tree-id2502 . -9) (undo-tree-id2503 . -9) (undo-tree-id2504 . -9) (undo-tree-id2505 . -9) (undo-tree-id2506 . -9) (undo-tree-id2507 . -7) (undo-tree-id2508 . -7) (undo-tree-id2509 . -7) (undo-tree-id2510 . -7) (undo-tree-id2511 . -7) (undo-tree-id2512 . -7) (undo-tree-id2513 . -7) (undo-tree-id2514 . -7) (undo-tree-id2515 . -7) (undo-tree-id2516 . -7) (undo-tree-id2517 . -7) (undo-tree-id2518 . -7) (undo-tree-id2519 . -7) (undo-tree-id2520 . -7) (undo-tree-id2521 . -7) (undo-tree-id2522 . -7) (undo-tree-id2523 . -7) (undo-tree-id2524 . -7) (undo-tree-id2525 . -7) (undo-tree-id2526 . -7) (undo-tree-id2527 . -7) (undo-tree-id2528 . -7) (undo-tree-id2529 . -7) (undo-tree-id2530 . -7) (undo-tree-id2531 . -7) (undo-tree-id2532 . -7) (undo-tree-id2533 . -7) (undo-tree-id2534 . -7) (undo-tree-id2535 . -7) (undo-tree-id2536 . -7) (undo-tree-id2537 . -9) 170) nil (25962 63068 966093 938000) 0 nil])
([nil nil ((164 . 168) (#("    " 0 4 (fontified nil)) . 163) (undo-tree-id2436 . -4) (undo-tree-id2437 . -1) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (163 . 168) (#("    " 0 4 (fontified nil)) . 162) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (166 . 167) (162 . 166)) nil (25962 63068 966055 539000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -174) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) 175 (174 . 175) (apply yas--snippet-revive 168 174 #s(yas--snippet nil (#s(yas--field 1 171 173 nil nil nil nil #s(yas--exit 174 nil))) #s(yas--exit 174 nil) 18 nil #s(yas--field 1 171 173 nil nil nil nil #s(yas--exit 174 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 171 173 nil nil nil nil #s(yas--exit 174 nil))) #s(yas--exit 174 nil) 18 nil #s(yas--field 1 171 173 nil nil nil nil #s(yas--exit 174 nil)) nil nil)) (168 . 174) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 168) (168 . 181) (#("O" 0 1 (fontified nil)) . 168) (168 . 169) (#("Ok(…)" 0 5 (fontified nil)) . -168) (168 . 173) (#("O" 0 1 (fontified t face font-lock-type-face)) . -168) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) 169 (168 . 169) (t 25962 63068 973728 144000)) nil (25962 63077 137746 309000) 0 nil])
([nil nil ((162 . 166) (t 25962 63077 173744 83000)) nil (25962 63295 320423 716000) 0 nil])
([nil nil ((96 . 98)) nil (25962 63295 320422 827000) 0 nil])
([nil nil ((111 . 113) (105 . 111) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -105) (undo-tree-id2689 . -1) 106 (102 . 106) (#(" " 0 1 (fontified t)) . -102) (undo-tree-id2690 . -1) 103 (96 . 103)) nil (25962 63295 320421 433000) 0 nil])
([nil nil ((127 . 129) (126 . 128) (125 . 127) (124 . 126) (123 . 125) (122 . 124) (121 . 123) (120 . 122) (119 . 121) (118 . 120) (113 . 119) (#(" " 0 1 (fontified t)) . -113) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) 114 (113 . 114)) nil (25962 63295 320417 991000) 0 nil])
([nil nil ((#(" ((((((((((()))))))))))" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 4 (fontified t face (rainbow-delimiters-depth-3-face)) 4 5 (fontified t face (rainbow-delimiters-depth-4-face)) 5 6 (fontified t face (rainbow-delimiters-depth-5-face)) 6 7 (fontified t face (rainbow-delimiters-depth-6-face)) 7 8 (fontified t face (rainbow-delimiters-depth-7-face)) 8 9 (fontified t face (rainbow-delimiters-depth-8-face)) 9 10 (fontified t face (rainbow-delimiters-depth-9-face)) 10 11 (fontified t face (rainbow-delimiters-depth-1-face)) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t face (rainbow-delimiters-depth-9-face)) 15 16 (fontified t face (rainbow-delimiters-depth-8-face)) 16 17 (fontified t face (rainbow-delimiters-depth-7-face)) 17 18 (fontified t face (rainbow-delimiters-depth-6-face)) 18 19 (fontified t face (rainbow-delimiters-depth-5-face)) 19 20 (fontified t face (rainbow-delimiters-depth-4-face)) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t face (rainbow-delimiters-depth-1-face))) . 116) (undo-tree-id2686 . 11)) nil (25962 63295 320414 629000) 0 nil])
([nil nil ((157 . 161) (#("Us" 0 2 (fontified nil)) . 157) (157 . 159) (#("User" 0 4 (fontified nil)) . -157) (157 . 161) (#("Us" 0 2 (fontified t face font-lock-type-face)) . -157) (undo-tree-id2668 . -2) (undo-tree-id2669 . -2) 159 (157 . 159) (#("R" 0 1 (fontified t face font-lock-type-face)) . -157) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -158) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -159) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -160) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) 161 (157 . 161) (#("R" 0 1 (fontified t face font-lock-type-face)) . -157) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) 158 (155 . 158) (#(" " 0 1 (fontified t)) . -155) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) 156 (149 . 156) (#("::net" 0 2 (fontified t) 2 5 (fontified t face font-lock-constant-face)) . -8) 13 (16 . 22) (26 . 34) (27 . 31) (#("T" 0 1 (fontified t face font-lock-type-face)) . 29) (31 . 34) (#("pStr" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 31) (36 . 45) (37 . 42) (#("m" 0 1 (fontified t face font-lock-type-face)) . -37) 38 (apply yas--snippet-revive 117 126 #s(yas--snippet nil nil #s(yas--exit 125 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 125 nil) 19 nil nil nil nil)) (117 . 126) (#("HashMap<$0>" 0 11 (fontified nil)) . 117) (117 . 128) (#("Hash" 0 4 (fontified nil)) . 117) (117 . 121) (#("HashMap<…> (use std::collections::HashMap)" 0 42 (fontified nil)) . -117) (117 . 159) (#("Hash" 0 4 (fontified t face font-lock-type-face)) . -117) (undo-tree-id2682 . -4) (undo-tree-id2683 . -4) 121 (117 . 121) (#("H" 0 1 (fontified t face font-lock-type-face)) . -117) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) 118 (116 . 118)) nil (25962 63295 320408 795000) 0 nil])
([nil nil ((165 . 169) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 165) (165 . 169) (164 . 166) (162 . 165)) nil (25962 63295 320390 104000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -166) (undo-tree-id2628 . -4) (undo-tree-id2629 . -4) (undo-tree-id2630 . -4) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) (undo-tree-id2633 . -4) (undo-tree-id2634 . -4) (undo-tree-id2635 . -4) (undo-tree-id2636 . -4) (undo-tree-id2637 . -4) (undo-tree-id2638 . -4) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) 170 (166 . 170) (#("    " 0 4 (fontified nil)) . 165) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -3) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (169 . 170)) nil (25962 63295 320386 980000) 0 nil])
([nil nil ((182 . 183) (#(" " 0 1 (fontified t)) . -182) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (#("m" 0 1 (fontified t)) . -183) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (#("a" 0 1 (fontified t)) . -184) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) 185 (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -185) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 186) (169 . 187) (165 . 169)) nil (25962 63295 320354 392000) 0 nil])
([nil nil ((192 . 195) (#("ne" 0 2 (fontified nil)) . 192) (192 . 194) (#("new" 0 3 (fontified nil)) . -192) (192 . 195) (#("ne" 0 2 (fontified t)) . -192) (undo-tree-id2713 . -2) (undo-tree-id2714 . -2) 194 (190 . 194) (183 . 190) (#("Has" 0 3 (fontified nil)) . 183) (183 . 186) (#("HashMap" 0 7 (fontified nil)) . -183) (183 . 190) (#("Has" 0 3 (fontified t face font-lock-type-face)) . -183) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) 186 (183 . 186) (t 25962 63295 332683 321000)) nil (25962 63337 990218 17000) 0 nil])
([nil nil ((195 . 197)) nil (25962 63337 990213 79000) 0 nil])
([nil nil ((197 . 198)) nil (25962 63337 990212 377000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -201) (undo-tree-id2710 . -4) 205 (201 . 205) (#("    " 0 4 (fontified nil)) . 200) (undo-tree-id2711 . -4) (200 . 205) (#("    " 0 4 (fontified nil)) . 199) (undo-tree-id2712 . -4) (203 . 204) (198 . 203)) nil (25962 63337 990210 932000) 0 nil])
([nil nil ((216 . 219) (215 . 217) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -215) (#("k" 0 1 (fontified nil)) . 216) (215 . 216) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 215 231 nil nil nil t #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) #s(yas--exit 243 nil) 20 nil #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil)) nil nil)) (208 . 220) (#("insert(${1:k}, ${2:v})$0" 0 24 (fontified nil)) . 208) (208 . 232) (#("in" 0 2 (fontified nil)) . 208) (208 . 210) (#("insert(…)" 0 9 (fontified nil)) . -208) (208 . 217) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . -208) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) 210 (204 . 210) (#("l" 0 1 (fontified t)) . -204) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (#("m" 0 1 (fontified t)) . -205) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) 206 (205 . 206) (#("e" 0 1 (fontified t)) . -205) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -206) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (#(" " 0 1 (fontified t)) . -207) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) 208 (204 . 208) (200 . 204)) nil (25962 63337 990205 590000) 0 nil])
([nil nil ((apply yas--snippet-revive 239 242 #s(yas--snippet nil nil #s(yas--exit 242 nil) 22 nil nil #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 242 nil) 22 nil nil #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil)) nil)) (239 . 242) (#("Bob$0" 0 5 (fontified nil)) . 239) (239 . 244) (#("Bob" 0 3 (fontified nil)) . -239) (239 . 242) (237 . 239) (233 . 237) (#("U" 0 1 (fontified nil)) . 233) (233 . 234) (#("User" 0 4 (fontified nil)) . -233) (233 . 237) (#("U" 0 1 (fontified t face font-lock-type-face)) . -233) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) 234 (#("v" 0 1 (fontified nil)) . 234) (233 . 234) (apply yas--snippet-revive 221 231 #s(yas--snippet nil nil #s(yas--exit 231 nil) 21 nil nil #s(yas--field 1 215 231 nil nil nil t #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 231 nil) 21 nil nil #s(yas--field 1 215 231 nil nil nil t #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) nil)) (221 . 231) (#("to_owned()$0" 0 12 (fontified nil)) . 221) (221 . 233) (#("to" 0 2 (fontified nil)) . 221) (221 . 223) (#("to_owned() (as ToOwned)" 0 23 (fontified nil)) . -221) (221 . 244) (#("to" 0 2 (fontified t)) . -221) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) 223 (220 . 223)) nil (25962 63337 990189 381000) 0 nil])
([nil nil ((243 . 244) (apply yas--snippet-revive 208 243 #s(yas--snippet nil (#s(yas--field 1 215 231 nil nil nil t #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil))) #s(yas--exit 243 nil) 20 nil #s(yas--field 2 233 242 nil nil nil t #s(yas--exit 243 nil)) nil nil))) nil (25962 63337 990172 84000) 0 nil])
([nil nil ((nil rear-nonsticky nil 248 . 249) (#("
" 0 1 (fontified nil)) . -289) (244 . 290) 243) nil (25962 63337 990170 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 293 . 294) (#("
" 0 1 (fontified nil)) . -334) (289 . 335) 249) nil (25962 63337 990169 442000) 0 nil])
([nil nil ((nil rear-nonsticky nil 338 . 339) (#("
" 0 1 (fontified nil)) . -379) (334 . 380) 294) nil (25962 63337 990168 40000) 0 nil])
([nil nil ((nil rear-nonsticky nil 383 . 384) (#("
" 0 1 (fontified nil)) . -424) (379 . 425) 339) nil (25962 63337 990166 46000) 0 nil])
([nil nil ((nil rear-nonsticky nil 428 . 429) (#("
" 0 1 (fontified nil)) . -469) (424 . 470) 384) nil (25962 63337 990160 231000) 0 nil])
([nil nil ((#("BOB" 0 3 (fontified t face font-lock-string-face)) . 261) (undo-tree-id2878 . -2) (undo-tree-id2879 . -3) (t 25962 63338 1659 542000)) nil (25962 63352 817871 667000) 0 nil])
([nil nil ((261 . 264)) nil (25962 63352 817868 364000) 0 nil])
([nil nil ((#("BOB" 0 3 (fontified t face font-lock-string-face)) . 306) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -2) (undo-tree-id2867 . -2) (undo-tree-id2868 . -2) (undo-tree-id2869 . -2) (undo-tree-id2870 . -2) (undo-tree-id2871 . -2) (undo-tree-id2872 . -2) (undo-tree-id2873 . -2) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -3)) nil (25962 63352 817865 765000) 0 nil])
([nil nil ((306 . 309)) nil (25962 63352 817849 523000) 0 nil])
([nil nil ((#("Sam" 0 3 (fontified t face font-lock-string-face)) . 261) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -2) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (undo-tree-id2839 . -2) (undo-tree-id2840 . -2) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) (undo-tree-id2851 . -2) (undo-tree-id2852 . -2) (undo-tree-id2853 . -2) (undo-tree-id2854 . -2) (undo-tree-id2855 . -3)) nil (25962 63352 817847 833000) 0 nil])
([nil nil ((261 . 264)) nil (25962 63352 817833 403000) 0 nil])
([nil nil ((#("BOB" 0 3 (fontified t face font-lock-string-face)) . 351) (undo-tree-id2789 . -2) (undo-tree-id2790 . -2) (undo-tree-id2791 . -2) (undo-tree-id2792 . -2) (undo-tree-id2793 . -2) (undo-tree-id2794 . -2) (undo-tree-id2795 . -2) (undo-tree-id2796 . -2) (undo-tree-id2797 . -2) (undo-tree-id2798 . -2) (undo-tree-id2799 . -2) (undo-tree-id2800 . -2) (undo-tree-id2801 . -2) (undo-tree-id2802 . -2) (undo-tree-id2803 . -2) (undo-tree-id2804 . -2) (undo-tree-id2805 . -2) (undo-tree-id2806 . -2) (undo-tree-id2807 . -2) (undo-tree-id2808 . -2) (undo-tree-id2809 . -2) (undo-tree-id2810 . -2) (undo-tree-id2811 . -2) (undo-tree-id2812 . -2) (undo-tree-id2813 . -2) (undo-tree-id2814 . -2) (undo-tree-id2815 . -2) (undo-tree-id2816 . -2) (undo-tree-id2817 . -2) (undo-tree-id2818 . -2) (undo-tree-id2819 . -2) (undo-tree-id2820 . -2) (undo-tree-id2821 . -2) (undo-tree-id2822 . -2) (undo-tree-id2823 . -2) (undo-tree-id2824 . -2) (undo-tree-id2825 . -2) (undo-tree-id2826 . -2) (undo-tree-id2827 . -2) (undo-tree-id2828 . -2) (undo-tree-id2829 . -2) (undo-tree-id2830 . -2) (undo-tree-id2831 . -2) (undo-tree-id2832 . -2) (undo-tree-id2833 . -3)) nil (25962 63352 817831 151000) 0 nil])
([nil nil ((351 . 354)) nil (25962 63352 817789 31000) 0 nil])
([nil nil ((#("    map.insert(\"BOB\".to_owned(), User::Bob);
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 8 (fontified t) 8 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 20 (fontified t face font-lock-string-face) 20 21 (fontified t) 21 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 33 (fontified t) 33 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 42 (fontified t face font-lock-type-face) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t)) . 380) (undo-tree-id2765 . -44) (undo-tree-id2766 . -18) (undo-tree-id2767 . -18) (undo-tree-id2768 . -18) (undo-tree-id2769 . -18) (undo-tree-id2770 . -18) (undo-tree-id2771 . -18) (undo-tree-id2772 . -18) (undo-tree-id2773 . -18) (undo-tree-id2774 . -18) (undo-tree-id2775 . -18) (undo-tree-id2776 . -18) (undo-tree-id2777 . -18) (undo-tree-id2778 . -18) (undo-tree-id2779 . -18) (undo-tree-id2780 . -18) (undo-tree-id2781 . -18) (undo-tree-id2782 . -18) (undo-tree-id2783 . -18) (undo-tree-id2784 . -18) (undo-tree-id2785 . -18) (undo-tree-id2786 . -18) (undo-tree-id2787 . -18) (undo-tree-id2788 . -45) 398) nil (25962 63352 817786 365000) 0 nil])
([nil nil ((#("    map.insert(\"BOB\".to_owned(), User::Bob);
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 8 (fontified t) 8 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 20 (fontified t face font-lock-string-face) 20 21 (fontified t) 21 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-3-face)) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 33 (fontified t) 33 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 42 (fontified t face font-lock-type-face) 42 43 (fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t)) . 380) (undo-tree-id2717 . -44) (undo-tree-id2718 . -18) (undo-tree-id2719 . -44) (undo-tree-id2720 . -45) (undo-tree-id2721 . -44) (undo-tree-id2722 . -18) (undo-tree-id2723 . -18) (undo-tree-id2724 . -18) (undo-tree-id2725 . -18) (undo-tree-id2726 . -18) (undo-tree-id2727 . -18) (undo-tree-id2728 . -18) (undo-tree-id2729 . -18) (undo-tree-id2730 . -18) (undo-tree-id2731 . -18) (undo-tree-id2732 . -18) (undo-tree-id2733 . -18) (undo-tree-id2734 . -18) (undo-tree-id2735 . -18) (undo-tree-id2736 . -18) (undo-tree-id2737 . -18) (undo-tree-id2738 . -18) (undo-tree-id2739 . -18) (undo-tree-id2740 . -18) (undo-tree-id2741 . -18) (undo-tree-id2742 . -18) (undo-tree-id2743 . -18) (undo-tree-id2744 . -18) (undo-tree-id2745 . -18) (undo-tree-id2746 . -18) (undo-tree-id2747 . -18) (undo-tree-id2748 . -18) (undo-tree-id2749 . -18) (undo-tree-id2750 . -18) (undo-tree-id2751 . -18) (undo-tree-id2752 . -18) (undo-tree-id2753 . -18) (undo-tree-id2754 . -18) (undo-tree-id2755 . -18) (undo-tree-id2756 . -18) (undo-tree-id2757 . -18) (undo-tree-id2758 . -18) (undo-tree-id2759 . -18) (undo-tree-id2760 . -18) (undo-tree-id2761 . -18) (undo-tree-id2762 . -18) (undo-tree-id2763 . -18) (undo-tree-id2764 . -45) 398) nil (25962 63352 817760 571000) 0 nil])
([nil nil ((#("Bob" 0 3 (fontified t face font-lock-type-face)) . 284) (undo-tree-id3019 . -2) (t 25962 63352 854020 332000)) nil (25962 63364 749349 227000) 0 nil])
([nil nil ((apply yas--snippet-revive 284 287 #s(yas--snippet nil nil #s(yas--exit 287 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 287 nil) 23 nil nil nil nil)) (284 . 287) (#("Sam$0" 0 5 (fontified nil)) . 284) (284 . 289) (#("Sa" 0 2 (fontified nil)) . 284) (284 . 286) (#("Sam" 0 3 (fontified nil)) . -284) (284 . 287) (#("Sa" 0 2 (fontified t face font-lock-type-face)) . -284) (undo-tree-id3017 . -2) (undo-tree-id3018 . -2) 286 (284 . 286)) nil (25962 63364 749346 799000) 0 nil])
([nil nil ((#("Bob" 0 3 (fontified t face font-lock-type-face)) . 329) (undo-tree-id2999 . -2) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -2) (undo-tree-id3008 . -2) (undo-tree-id3009 . -2) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2) (undo-tree-id3014 . -2) (undo-tree-id3015 . -2) (undo-tree-id3016 . -3)) nil (25962 63364 749341 989000) 0 nil])
([nil nil ((apply yas--snippet-revive 329 332 #s(yas--snippet nil nil #s(yas--exit 332 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 332 nil) 24 nil nil nil nil)) (329 . 332) (#("Joe$0" 0 5 (fontified nil)) . 329) (329 . 334) (#("J" 0 1 (fontified nil)) . 329) (329 . 330) (#("Joe" 0 3 (fontified nil)) . -329) (329 . 332) (#("J" 0 1 (fontified t face font-lock-type-face)) . -329) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) 330 (329 . 330)) nil (25962 63364 749330 2000) 0 nil])
([nil nil ((#("Bob" 0 3 (fontified t face font-lock-type-face)) . 374) (undo-tree-id2953 . -2) (undo-tree-id2954 . -2) (undo-tree-id2955 . -2) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -2) (undo-tree-id2959 . -2) (undo-tree-id2960 . -2) (undo-tree-id2961 . -2) (undo-tree-id2962 . -2) (undo-tree-id2963 . -2) (undo-tree-id2964 . -2) (undo-tree-id2965 . -2) (undo-tree-id2966 . -2) (undo-tree-id2967 . -2) (undo-tree-id2968 . -2) (undo-tree-id2969 . -2) (undo-tree-id2970 . -2) (undo-tree-id2971 . -2) (undo-tree-id2972 . -2) (undo-tree-id2973 . -2) (undo-tree-id2974 . -2) (undo-tree-id2975 . -2) (undo-tree-id2976 . -2) (undo-tree-id2977 . -2) (undo-tree-id2978 . -2) (undo-tree-id2979 . -2) (undo-tree-id2980 . -2) (undo-tree-id2981 . -2) (undo-tree-id2982 . -2) (undo-tree-id2983 . -2) (undo-tree-id2984 . -2) (undo-tree-id2985 . -2) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . -2) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -3)) nil (25962 63364 749324 667000) 0 nil])
([nil nil ((apply yas--snippet-revive 374 377 #s(yas--snippet nil nil #s(yas--exit 377 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 377 nil) 25 nil nil nil nil)) (374 . 377) (#("Bob$0" 0 5 (fontified nil)) . 374) (374 . 379) (#("B" 0 1 (fontified nil)) . 374) (374 . 375) (#("Bob" 0 3 (fontified nil)) . -374) (374 . 377) (#("B" 0 1 (fontified t face font-lock-type-face)) . -374) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) 375 (374 . 375)) nil (25962 63364 749293 879000) 0 nil])
([nil nil ((386 . 389) (382 . 386) (#("    " 0 4 (fontified nil)) . 381) (undo-tree-id3020 . -4) (undo-tree-id3021 . -4) (undo-tree-id3022 . -4) (undo-tree-id3023 . -4) (undo-tree-id3024 . -4) (undo-tree-id3025 . -4) (undo-tree-id3026 . -4) (undo-tree-id3027 . -4) (undo-tree-id3028 . -4) (undo-tree-id3029 . -4) (undo-tree-id3030 . -4) (undo-tree-id3031 . -4) (381 . 386) (#("    " 0 4 (fontified nil)) . 380) (undo-tree-id3032 . -4) (384 . 385) (380 . 384) (t 25962 63364 758316 644000)) nil (25962 63371 547679 758000) 0 nil])
([nil nil ((488 . 489) (apply yas--snippet-revive 474 488 #s(yas--snippet nil nil #s(yas--exit 488 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 488 nil) 26 nil nil nil nil)) (474 . 488) (#("get_user_map()$0" 0 16 (fontified nil)) . 474) (474 . 490) (#("ge" 0 2 (fontified nil)) . 474) (474 . 476) (#("get_user_map()" 0 14 (fontified nil)) . -474) (474 . 488) (#("ge" 0 2 (fontified t)) . -474) (undo-tree-id3081 . -2) (undo-tree-id3082 . -2) (undo-tree-id3083 . -2) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -2) (undo-tree-id3105 . -2) (undo-tree-id3106 . -2) (undo-tree-id3107 . -2) (undo-tree-id3108 . -2) (undo-tree-id3109 . -2) (undo-tree-id3110 . -2) (undo-tree-id3111 . -2) (undo-tree-id3112 . -2) (undo-tree-id3113 . -2) (undo-tree-id3114 . -2) (undo-tree-id3115 . -2) (undo-tree-id3116 . -2) (undo-tree-id3117 . -2) (undo-tree-id3118 . -2) (undo-tree-id3119 . -2) (undo-tree-id3120 . -2) (undo-tree-id3121 . -2) (undo-tree-id3122 . -2) (undo-tree-id3123 . -2) (undo-tree-id3124 . -2) (undo-tree-id3125 . -2) (undo-tree-id3126 . -2) (undo-tree-id3127 . -2) (undo-tree-id3128 . -2) (undo-tree-id3129 . -2) (undo-tree-id3130 . -2) (undo-tree-id3131 . -2) (undo-tree-id3132 . -2) (undo-tree-id3133 . -2) (undo-tree-id3134 . -2) (undo-tree-id3135 . -2) (undo-tree-id3136 . -2) (undo-tree-id3137 . -2) (undo-tree-id3138 . -2) (undo-tree-id3139 . -2) (undo-tree-id3140 . -2) (undo-tree-id3141 . -2) (undo-tree-id3142 . -2) (undo-tree-id3143 . -2) (undo-tree-id3144 . -2) (undo-tree-id3145 . -2) (undo-tree-id3146 . -2) (undo-tree-id3147 . -2) (undo-tree-id3148 . -2) (undo-tree-id3149 . -2) (undo-tree-id3150 . -2) (undo-tree-id3151 . -2) (undo-tree-id3152 . -2) (undo-tree-id3153 . -2) (undo-tree-id3154 . -2) (undo-tree-id3155 . -2) (undo-tree-id3156 . -2) (undo-tree-id3157 . -2) (undo-tree-id3158 . -2) (undo-tree-id3159 . -2) (undo-tree-id3160 . -2) (undo-tree-id3161 . -2) (undo-tree-id3162 . -2) (undo-tree-id3163 . -2) (undo-tree-id3164 . -2) (undo-tree-id3165 . -2) (undo-tree-id3166 . -2) (undo-tree-id3167 . -2) (undo-tree-id3168 . -2) (undo-tree-id3169 . -2) (undo-tree-id3170 . -2) (undo-tree-id3171 . -2) (undo-tree-id3172 . -2) (undo-tree-id3173 . -2) (undo-tree-id3174 . -2) (undo-tree-id3175 . -2) (undo-tree-id3176 . -2) (undo-tree-id3177 . -2) (undo-tree-id3178 . -2) (undo-tree-id3179 . -2) (undo-tree-id3180 . -2) (undo-tree-id3181 . -2) (undo-tree-id3182 . -2) (undo-tree-id3183 . -2) (undo-tree-id3184 . -2) (undo-tree-id3185 . -2) (undo-tree-id3186 . -2) (undo-tree-id3187 . -2) (undo-tree-id3188 . -2) (undo-tree-id3189 . -2) (undo-tree-id3190 . -2) (undo-tree-id3191 . -2) (undo-tree-id3192 . -2) (undo-tree-id3193 . -2) (undo-tree-id3194 . -2) (undo-tree-id3195 . -2) 476 (472 . 476) (#("-" 0 1 (fontified t)) . -472) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (#("=" 0 1 (fontified t)) . -473) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (#(" " 0 1 (fontified t)) . -474) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) 475 (464 . 475) (t 25962 63371 586489 350000)) nil (25962 63388 24762 324000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -492) (undo-tree-id3033 . -4) (undo-tree-id3034 . -4) (undo-tree-id3035 . -4) (undo-tree-id3036 . -4) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) (undo-tree-id3043 . -4) (undo-tree-id3044 . -4) (undo-tree-id3045 . -4) (undo-tree-id3046 . -4) (undo-tree-id3047 . -4) (undo-tree-id3048 . -4) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) 496 (492 . 496) (#("    " 0 4 (fontified nil)) . 491) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (491 . 496) (#("    " 0 4 (fontified nil)) . 490) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (489 . 495)) nil (25962 63388 24678 175000) 0 nil])
([nil nil ((492 . 496) (t 25962 63388 62913 946000)) nil (25962 63415 515487 240000) 0 nil])
([nil nil ((apply yas--snippet-revive 519 530 #s(yas--snippet nil nil #s(yas--exit 530 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 530 nil) 27 nil nil nil nil)) (519 . 530) (#("try_clone()$0" 0 13 (fontified nil)) . 519) (519 . 532) (#("t" 0 1 (fontified nil)) . 519) (519 . 520) (#("try_clone()" 0 11 (fontified nil)) . -519) (519 . 530) (#("t" 0 1 (fontified t)) . -519) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) 520 (518 . 520) (512 . 518) (#("st" 0 2 (fontified nil)) . 512) (512 . 514) (#("stream" 0 6 (fontified nil)) . -512) (512 . 518) (#("st" 0 2 (fontified t)) . -512) (undo-tree-id3204 . -2) (undo-tree-id3205 . -2) 514 (512 . 514) (495 . 512) (491 . 495)) nil (25962 63415 515483 209000) 0 nil])
([nil nil ((530 . 531)) nil (25962 63415 515463 617000) 0 nil])
([nil nil ((531 . 532) (t 25962 63415 555645 622000)) nil (25962 63418 18029 734000) 0 nil])
([nil nil ((#("()> " 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t)) . 449) (undo-tree-id3229 . -3) (undo-tree-id3230 . -3) (undo-tree-id3231 . -4) (undo-tree-id3232 . -4) (undo-tree-id3233 . -4) (undo-tree-id3234 . -4) (undo-tree-id3235 . -4) (undo-tree-id3236 . -4) (undo-tree-id3237 . -4) (undo-tree-id3238 . -4) (undo-tree-id3239 . -4) (undo-tree-id3240 . -4) (t 25962 63418 19712 526000)) nil (25962 63433 288176 53000) 0 nil])
([nil nil ((468 . 469) (62 . 76) (449 . 454) (#("Error" 0 5 (fontified nil)) . 449) (449 . 454) (#("Error (use std::error::Error)" 0 29 (fontified nil)) . -449) (449 . 478) (#("Error" 0 5 (fontified t face font-lock-type-face)) . -449) (undo-tree-id3206 . -1) (undo-tree-id3207 . -5) (undo-tree-id3208 . -5) (undo-tree-id3209 . -5) (undo-tree-id3210 . -3) (undo-tree-id3211 . -5) (undo-tree-id3212 . -5) (undo-tree-id3213 . -5) (undo-tree-id3214 . -5) (undo-tree-id3215 . -5) (undo-tree-id3216 . -5) (undo-tree-id3217 . -5) (undo-tree-id3218 . -5) (undo-tree-id3219 . -5) (undo-tree-id3220 . -5) (undo-tree-id3221 . -5) (undo-tree-id3222 . -5) (undo-tree-id3223 . -5) (undo-tree-id3224 . -5) (undo-tree-id3225 . -5) (undo-tree-id3226 . -5) (undo-tree-id3227 . -5) (undo-tree-id3228 . -5) 454 (453 . 454) (450 . 453) (449 . 450)) nil (25962 63433 288162 996000) 0 nil])
([nil nil ((465 . 466) (462 . 465) (t 25962 63433 328132 841000)) nil (25962 63442 421307 107000) 0 nil])
([nil nil ((#("dyn " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 463) (undo-tree-id3241 . 1) (undo-tree-id3242 . -3) (undo-tree-id3243 . -4) (undo-tree-id3244 . 1) (undo-tree-id3245 . -2) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) (undo-tree-id3250 . -2) (undo-tree-id3251 . -2) (undo-tree-id3252 . -2) (undo-tree-id3253 . -2) (undo-tree-id3254 . -2) (undo-tree-id3255 . -2) (undo-tree-id3256 . -2) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) (undo-tree-id3261 . -2) (undo-tree-id3262 . -2) (undo-tree-id3263 . -2) (undo-tree-id3264 . -2) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -2) (undo-tree-id3268 . -2) (undo-tree-id3269 . -2) (undo-tree-id3270 . -2) (undo-tree-id3271 . -2) (undo-tree-id3272 . -2) (undo-tree-id3273 . -2) (undo-tree-id3274 . -2) (undo-tree-id3275 . -2) (undo-tree-id3276 . -2) (undo-tree-id3277 . -2) (undo-tree-id3278 . -2) (undo-tree-id3279 . -2) (undo-tree-id3280 . -2) (undo-tree-id3281 . -2) (undo-tree-id3282 . -2) (undo-tree-id3283 . -2) (undo-tree-id3284 . -2) (undo-tree-id3285 . -2) (undo-tree-id3286 . -2) (undo-tree-id3287 . -2) (undo-tree-id3288 . -2) (undo-tree-id3289 . -2) (undo-tree-id3290 . -2) (undo-tree-id3291 . -2) (undo-tree-id3292 . -2) (undo-tree-id3293 . -2) (undo-tree-id3294 . -2) (undo-tree-id3295 . -2) (undo-tree-id3296 . -2) (undo-tree-id3297 . -2) (undo-tree-id3298 . -2) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -2) (undo-tree-id3307 . -2) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2) (undo-tree-id3310 . -2) (undo-tree-id3311 . -2) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -2) (undo-tree-id3331 . -2) (undo-tree-id3332 . -2) (undo-tree-id3333 . -2) (undo-tree-id3334 . -2) (undo-tree-id3335 . -2) (undo-tree-id3336 . -2) (undo-tree-id3337 . -2) (undo-tree-id3338 . -2) (undo-tree-id3339 . -2) (undo-tree-id3340 . -2) (undo-tree-id3341 . -2) (undo-tree-id3342 . -2) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -2) (undo-tree-id3346 . -2) (undo-tree-id3347 . -2) (undo-tree-id3348 . -2) (undo-tree-id3349 . -2) (undo-tree-id3350 . -2) (undo-tree-id3351 . -2) (undo-tree-id3352 . -2) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -2) (undo-tree-id3356 . -2) (undo-tree-id3357 . -2) (undo-tree-id3358 . -2) (undo-tree-id3359 . -2) (undo-tree-id3360 . -2) (undo-tree-id3361 . -2) (undo-tree-id3362 . -2) (undo-tree-id3363 . -2) (undo-tree-id3364 . -2) (undo-tree-id3365 . -2) (undo-tree-id3366 . -2) (undo-tree-id3367 . -2) (undo-tree-id3368 . -2) (undo-tree-id3369 . -2) (undo-tree-id3370 . -2) (undo-tree-id3371 . -2) (undo-tree-id3372 . -2) (undo-tree-id3373 . -2) (undo-tree-id3374 . -4) (t 25962 63442 460387 245000)) nil (25962 63448 225269 698000) 0 nil])
([nil nil ((#("error" 0 5 (fontified t face font-lock-constant-face)) . 64) (undo-tree-id3378 . -4) (t 25962 63448 264550 301000)) nil (25962 63455 855398 602000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 64) (undo-tree-id3377 . -1)) nil (25962 63455 855396 749000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 64) (undo-tree-id3376 . -4)) nil (25962 63455 855393 548000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 63) (undo-tree-id3375 . -1)) nil (25962 63455 855386 895000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 450) (undo-tree-id3382 . 5) (undo-tree-id3383 . -4) (undo-tree-id3384 . -5) (t 25962 63455 868765 490000)) nil (25962 63485 34559 497000) 0 nil])
([nil nil ((63 . 74) (450 . 455) (#("Error" 0 5 (fontified nil)) . 450) (450 . 455) (#("Error (use std::io::Error)" 0 26 (fontified nil)) . -450) (450 . 476) (#("Error" 0 5 (fontified t face font-lock-type-face)) . -450) (undo-tree-id3379 . -1) (undo-tree-id3380 . -5) (undo-tree-id3381 . -5) 455 (453 . 455) (452 . 453) (451 . 452) (450 . 451)) nil (25962 63485 34552 617000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -548) (undo-tree-id3385 . -4) (undo-tree-id3386 . -4) (undo-tree-id3387 . -4) (undo-tree-id3388 . -4) (undo-tree-id3389 . -4) (undo-tree-id3390 . -4) (undo-tree-id3391 . -4) (undo-tree-id3392 . -4) (undo-tree-id3393 . -4) (undo-tree-id3394 . -4) (undo-tree-id3395 . -4) (undo-tree-id3396 . -4) (undo-tree-id3397 . -4) (undo-tree-id3398 . -4) (undo-tree-id3399 . -4) (undo-tree-id3400 . -4) (undo-tree-id3401 . -4) (undo-tree-id3402 . -4) (undo-tree-id3403 . -4) (undo-tree-id3404 . -4) (undo-tree-id3405 . -4) (undo-tree-id3406 . -4) (undo-tree-id3407 . -4) 552 (548 . 552) (#("    " 0 4 (fontified nil)) . 547) (undo-tree-id3408 . -4) (undo-tree-id3409 . -4) (undo-tree-id3410 . -4) (undo-tree-id3411 . -4) (undo-tree-id3412 . -4) (undo-tree-id3413 . -4) (undo-tree-id3414 . -4) (undo-tree-id3415 . -4) (undo-tree-id3416 . -4) (undo-tree-id3417 . -4) (undo-tree-id3418 . -4) (undo-tree-id3419 . -4) (undo-tree-id3420 . -4) (undo-tree-id3421 . -4) (undo-tree-id3422 . -4) (undo-tree-id3423 . -4) (undo-tree-id3424 . -4) (undo-tree-id3425 . -4) (undo-tree-id3426 . -4) (undo-tree-id3427 . -4) (undo-tree-id3428 . -4) (undo-tree-id3429 . -4) (undo-tree-id3430 . -4) (546 . 552) (t 25962 63485 69607 419000)) nil (25962 63490 98323 544000) 0 nil])
([nil nil ((548 . 552) (t 25962 63490 101754 874000)) nil (25962 63599 770407 459000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -577) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) 578 (#("i" 0 1 (fontified t)) . -578) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) 579 (577 . 579) (576 . 577) (570 . 576) (#("st" 0 2 (fontified nil)) . 570) (570 . 572) (#("stream" 0 6 (fontified nil)) . -570) (570 . 576) (#("st" 0 2 (fontified t)) . -570) (undo-tree-id3753 . -2) (undo-tree-id3754 . -2) 572 (556 . 572) (#("3" 0 1 (fontified t face font-lock-variable-name-face)) . -556) (undo-tree-id3755 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -557) (undo-tree-id3756 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -558) (undo-tree-id3757 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -559) (undo-tree-id3758 . -1) 560 (552 . 560)) nil (25962 63599 770404 997000) 0 nil])
([nil nil ((#("    let three_lines = stream.
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 29 (fontified t) 29 30 (fontified t)) . 548) (undo-tree-id3530 . 1) (undo-tree-id3531 . -29) (undo-tree-id3532 . -29) (undo-tree-id3533 . -28) (undo-tree-id3534 . -28) (undo-tree-id3535 . 1) (undo-tree-id3536 . -29) (undo-tree-id3537 . -29) (undo-tree-id3538 . -29) (undo-tree-id3539 . -29) (undo-tree-id3540 . -29) (undo-tree-id3541 . -29) (undo-tree-id3542 . -29) (undo-tree-id3543 . -29) (undo-tree-id3544 . -29) (undo-tree-id3545 . -29) (undo-tree-id3546 . -29) (undo-tree-id3547 . -29) (undo-tree-id3548 . -29) (undo-tree-id3549 . -29) (undo-tree-id3550 . -29) (undo-tree-id3551 . -29) (undo-tree-id3552 . -29) (undo-tree-id3553 . -29) (undo-tree-id3554 . -29) (undo-tree-id3555 . -29) (undo-tree-id3556 . -29) (undo-tree-id3557 . -29) (undo-tree-id3558 . -29) (undo-tree-id3559 . -29) (undo-tree-id3560 . -29) (undo-tree-id3561 . -29) (undo-tree-id3562 . -29) (undo-tree-id3563 . -29) (undo-tree-id3564 . -29) (undo-tree-id3565 . -29) (undo-tree-id3566 . -29) (undo-tree-id3567 . -29) (undo-tree-id3568 . -29) (undo-tree-id3569 . -29) (undo-tree-id3570 . -29) (undo-tree-id3571 . -29) (undo-tree-id3572 . -29) (undo-tree-id3573 . -29) (undo-tree-id3574 . -29) (undo-tree-id3575 . -29) (undo-tree-id3576 . -29) (undo-tree-id3577 . -29) (undo-tree-id3578 . -29) (undo-tree-id3579 . -29) (undo-tree-id3580 . -29) (undo-tree-id3581 . -29) (undo-tree-id3582 . -29) (undo-tree-id3583 . -29) (undo-tree-id3584 . -29) (undo-tree-id3585 . -29) (undo-tree-id3586 . -29) (undo-tree-id3587 . -29) (undo-tree-id3588 . -29) (undo-tree-id3589 . -29) (undo-tree-id3590 . -29) (undo-tree-id3591 . -29) (undo-tree-id3592 . -29) (undo-tree-id3593 . -29) (undo-tree-id3594 . -29) (undo-tree-id3595 . -29) (undo-tree-id3596 . -29) (undo-tree-id3597 . -29) (undo-tree-id3598 . -29) (undo-tree-id3599 . -29) (undo-tree-id3600 . -29) (undo-tree-id3601 . -29) (undo-tree-id3602 . -29) (undo-tree-id3603 . -29) (undo-tree-id3604 . -29) (undo-tree-id3605 . -29) (undo-tree-id3606 . -29) (undo-tree-id3607 . -29) (undo-tree-id3608 . -29) (undo-tree-id3609 . -29) (undo-tree-id3610 . -29) (undo-tree-id3611 . -29) (undo-tree-id3612 . -29) (undo-tree-id3613 . -29) (undo-tree-id3614 . -29) (undo-tree-id3615 . -29) (undo-tree-id3616 . -29) (undo-tree-id3617 . -29) (undo-tree-id3618 . -29) (undo-tree-id3619 . -29) (undo-tree-id3620 . -29) (undo-tree-id3621 . -29) (undo-tree-id3622 . -29) (undo-tree-id3623 . -29) (undo-tree-id3624 . -29) (undo-tree-id3625 . -29) (undo-tree-id3626 . -29) (undo-tree-id3627 . -29) (undo-tree-id3628 . -29) (undo-tree-id3629 . -29) (undo-tree-id3630 . -29) (undo-tree-id3631 . -29) (undo-tree-id3632 . -29) (undo-tree-id3633 . -29) (undo-tree-id3634 . -29) (undo-tree-id3635 . -29) (undo-tree-id3636 . -29) (undo-tree-id3637 . -29) (undo-tree-id3638 . -29) (undo-tree-id3639 . -29) (undo-tree-id3640 . -29) (undo-tree-id3641 . -29) (undo-tree-id3642 . -29) (undo-tree-id3643 . -29) (undo-tree-id3644 . -29) (undo-tree-id3645 . -29) (undo-tree-id3646 . -29) (undo-tree-id3647 . -29) (undo-tree-id3648 . -29) (undo-tree-id3649 . -29) (undo-tree-id3650 . -29) (undo-tree-id3651 . -29) (undo-tree-id3652 . -29) (undo-tree-id3653 . -29) (undo-tree-id3654 . -29) (undo-tree-id3655 . -29) (undo-tree-id3656 . -29) (undo-tree-id3657 . -29) (undo-tree-id3658 . -29) (undo-tree-id3659 . -29) (undo-tree-id3660 . -29) (undo-tree-id3661 . -29) (undo-tree-id3662 . -29) (undo-tree-id3663 . -29) (undo-tree-id3664 . -29) (undo-tree-id3665 . -29) (undo-tree-id3666 . -29) (undo-tree-id3667 . -29) (undo-tree-id3668 . -29) (undo-tree-id3669 . -29) (undo-tree-id3670 . -29) (undo-tree-id3671 . -29) (undo-tree-id3672 . -29) (undo-tree-id3673 . -29) (undo-tree-id3674 . -29) (undo-tree-id3675 . -29) (undo-tree-id3676 . -29) (undo-tree-id3677 . -29) (undo-tree-id3678 . -29) (undo-tree-id3679 . -29) (undo-tree-id3680 . -29) (undo-tree-id3681 . -29) (undo-tree-id3682 . -29) (undo-tree-id3683 . -29) (undo-tree-id3684 . -29) (undo-tree-id3685 . -29) (undo-tree-id3686 . -29) (undo-tree-id3687 . -29) (undo-tree-id3688 . -29) (undo-tree-id3689 . -28) (undo-tree-id3690 . -28) (undo-tree-id3691 . -28) (undo-tree-id3692 . -28) (undo-tree-id3693 . -28) (undo-tree-id3694 . -28) (undo-tree-id3695 . -28) (undo-tree-id3696 . -28) (undo-tree-id3697 . -28) (undo-tree-id3698 . -28) (undo-tree-id3699 . -28) (undo-tree-id3700 . -28) (undo-tree-id3701 . -28) (undo-tree-id3702 . -28) (undo-tree-id3703 . -28) (undo-tree-id3704 . -28) (undo-tree-id3705 . -28) (undo-tree-id3706 . -28) (undo-tree-id3707 . -28) (undo-tree-id3708 . -28) (undo-tree-id3709 . -28) (undo-tree-id3710 . -28) (undo-tree-id3711 . -28) (undo-tree-id3712 . -28) (undo-tree-id3713 . -28) (undo-tree-id3714 . -28) (undo-tree-id3715 . -28) (undo-tree-id3716 . -28) (undo-tree-id3717 . -28) (undo-tree-id3718 . -28) (undo-tree-id3719 . -28) (undo-tree-id3720 . -28) (undo-tree-id3721 . -28) (undo-tree-id3722 . -22) (undo-tree-id3723 . -28) (undo-tree-id3724 . -28) (undo-tree-id3725 . -28) (undo-tree-id3726 . -28) (undo-tree-id3727 . -28) (undo-tree-id3728 . -28) (undo-tree-id3729 . -28) (undo-tree-id3730 . -28) (undo-tree-id3731 . -28) (undo-tree-id3732 . -28) (undo-tree-id3733 . -28) (undo-tree-id3734 . -28) (undo-tree-id3735 . -28) (undo-tree-id3736 . -28) (undo-tree-id3737 . -28) (undo-tree-id3738 . -28) (undo-tree-id3739 . -28) (undo-tree-id3740 . -28) (undo-tree-id3741 . -28) (undo-tree-id3742 . -28) (undo-tree-id3743 . -28) (undo-tree-id3744 . -28) (undo-tree-id3745 . -28) (undo-tree-id3746 . -28) (undo-tree-id3747 . -30) 576) nil (25962 63599 770390 495000) 0 nil])
([nil nil ((547 . 551)) nil (25962 63599 770157 481000) 0 nil])
([nil nil ((607 . 613) (#("st" 0 2 (fontified nil)) . 607) (undo-tree-id3431 . -2) (607 . 609) (#("stream" 0 6 (fontified nil)) . -607) (undo-tree-id3432 . -6) (607 . 613) (#("st" 0 2 (fontified t)) . -607) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -2) (undo-tree-id3467 . -2) (undo-tree-id3468 . -2) (undo-tree-id3469 . -2) (undo-tree-id3470 . -2) (undo-tree-id3471 . -2) (undo-tree-id3472 . -2) (undo-tree-id3473 . -2) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2) (undo-tree-id3477 . -2) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) (undo-tree-id3480 . -2) (undo-tree-id3481 . -2) (undo-tree-id3482 . -2) (undo-tree-id3483 . -2) (undo-tree-id3484 . -2) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -2) (undo-tree-id3488 . -2) (undo-tree-id3489 . -2) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) (undo-tree-id3492 . -2) (undo-tree-id3493 . -2) (undo-tree-id3494 . -2) (undo-tree-id3495 . -2) (undo-tree-id3496 . -2) (undo-tree-id3497 . -2) (undo-tree-id3498 . -2) (undo-tree-id3499 . -2) (undo-tree-id3500 . -2) (undo-tree-id3501 . -2) (undo-tree-id3502 . -2) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) (undo-tree-id3505 . -2) (undo-tree-id3506 . -2) (undo-tree-id3507 . -2) (undo-tree-id3508 . -2) (undo-tree-id3509 . -2) (undo-tree-id3510 . -2) (undo-tree-id3511 . -2) (undo-tree-id3512 . -2) (undo-tree-id3513 . -2) (undo-tree-id3514 . -2) (undo-tree-id3515 . -2) (undo-tree-id3516 . -2) 609 (603 . 609) (#("inner" 0 5 (fontified nil)) . 603) (undo-tree-id3517 . -5) (602 . 603) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 602 613 nil nil nil t #s(yas--exit 614 nil))) #s(yas--exit 614 nil) 28 nil #s(yas--field 1 602 613 nil nil nil t #s(yas--exit 614 nil)) nil nil)) (598 . 608) (#("new(${1:inner})$0" 0 17 (fontified nil)) . 598) (598 . 615) (#("ne" 0 2 (fontified nil)) . 598) (598 . 600) (#("new(…)" 0 6 (fontified nil)) . -598) (598 . 604) (#("ne" 0 2 (fontified t)) . -598) (undo-tree-id3518 . -1) (undo-tree-id3519 . -2) (undo-tree-id3520 . -2) 600 (598 . 600) (#("n" 0 1 (fontified t)) . -598) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) 599 (596 . 599) (68 . 69) (73 . 85) (574 . 583) (#("Buf" 0 3 (fontified nil)) . 574) (574 . 577) (#("BufReader (use std::io::BufReader)" 0 34 (fontified nil)) . -574) (574 . 608) (#("Buf" 0 3 (fontified t face font-lock-type-face)) . -574) (undo-tree-id3523 . -1) (undo-tree-id3524 . -3) (undo-tree-id3525 . -3) 577 (576 . 577) (#("f" 0 1 (fontified t face font-lock-type-face)) . -576) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -577) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) 578 (577 . 578) (556 . 577)) nil (25962 63599 770150 512000) 0 nil])
([nil nil ((614 . 615) (apply yas--snippet-revive 598 614 #s(yas--snippet nil (#s(yas--field 1 602 613 nil nil nil t #s(yas--exit 614 nil))) #s(yas--exit 614 nil) 28 nil #s(yas--field 1 602 613 nil nil nil t #s(yas--exit 614 nil)) nil nil))) nil (25962 63599 770072 573000) 0 nil])
([nil nil ((448 . 452) (t 25962 63599 773112 426000)) nil (25962 63607 641567 404000) 0 nil])
([nil nil ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 449) (undo-tree-id3759 . 1) (undo-tree-id3760 . -3) (undo-tree-id3761 . -2) (undo-tree-id3762 . 1) (undo-tree-id3763 . -2) (undo-tree-id3764 . -2) (undo-tree-id3765 . -2) (undo-tree-id3766 . -2) (undo-tree-id3767 . -2) (undo-tree-id3768 . -2) (undo-tree-id3769 . -2) (undo-tree-id3770 . -2) (undo-tree-id3771 . -2) (undo-tree-id3772 . -2) (undo-tree-id3773 . -2) (undo-tree-id3774 . -2) (undo-tree-id3775 . -2) (undo-tree-id3776 . -2) (undo-tree-id3777 . -2) (undo-tree-id3778 . -2) (undo-tree-id3779 . -2) (undo-tree-id3780 . -2) (undo-tree-id3781 . -2) (undo-tree-id3782 . -2) (undo-tree-id3783 . -2) (undo-tree-id3784 . -2) (undo-tree-id3785 . -2) (undo-tree-id3786 . -2) (undo-tree-id3787 . -2) (undo-tree-id3788 . -2) (undo-tree-id3789 . -2) (undo-tree-id3790 . -2) (undo-tree-id3791 . -2) (undo-tree-id3792 . -2) (undo-tree-id3793 . -2) (undo-tree-id3794 . -2) (undo-tree-id3795 . -2) (undo-tree-id3796 . -2) (undo-tree-id3797 . -1) (undo-tree-id3798 . -3) (undo-tree-id3799 . -4) (undo-tree-id3800 . -3) (undo-tree-id3801 . -2) (undo-tree-id3802 . -2) (undo-tree-id3803 . -2) (undo-tree-id3804 . -2) (undo-tree-id3805 . -2) (undo-tree-id3806 . -2) (undo-tree-id3807 . -2) (undo-tree-id3808 . -2) (undo-tree-id3809 . -2) (undo-tree-id3810 . -2) (undo-tree-id3811 . -2) (undo-tree-id3812 . -2) (undo-tree-id3813 . -2) (undo-tree-id3814 . -2) (undo-tree-id3815 . -2) (undo-tree-id3816 . -2) (undo-tree-id3817 . -2) (undo-tree-id3818 . -2) (undo-tree-id3819 . -2) (undo-tree-id3820 . -2) (undo-tree-id3821 . -2) (undo-tree-id3822 . -2) (undo-tree-id3823 . -2) (undo-tree-id3824 . -2) (undo-tree-id3825 . -2) (undo-tree-id3826 . -2) (undo-tree-id3827 . -2) (undo-tree-id3828 . -2) (undo-tree-id3829 . -2) (undo-tree-id3830 . -2) (undo-tree-id3831 . -2) (undo-tree-id3832 . -2) (undo-tree-id3833 . -2) (undo-tree-id3834 . -2) (undo-tree-id3835 . -4) (t 25962 63607 681363 604000)) nil (25962 63612 942151 61000) 0 nil])
([nil nil ((441 . 445)) nil (25962 63612 942086 664000) 0 nil])
([nil nil ((654 . 657) (643 . 654) (#("bu" 0 2 (fontified nil)) . 643) (643 . 645) (#("buff_reader" 0 11 (fontified nil)) . -643) (643 . 654) (#("bu" 0 2 (fontified t)) . -643) (undo-tree-id4013 . -2) (undo-tree-id4014 . -2) (undo-tree-id4015 . -2) 645 (629 . 645) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -629) (undo-tree-id4016 . -1) 630 (625 . 630) (#("b" 0 1 (fontified t)) . -625) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (#("u" 0 1 (fontified t)) . -626) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (#("f" 0 1 (fontified t)) . -627) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (#("f" 0 1 (fontified t)) . -628) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (#("_" 0 1 (fontified t)) . -629) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (#("r" 0 1 (fontified t)) . -630) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (#("e" 0 1 (fontified t)) . -631) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (#("a" 0 1 (fontified t)) . -632) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (#("d" 0 1 (fontified t)) . -633) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (#("e" 0 1 (fontified t)) . -634) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (#("r" 0 1 (fontified t)) . -635) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (#("." 0 1 (fontified t)) . -636) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (#("l" 0 1 (fontified t)) . -637) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (#("i" 0 1 (fontified t)) . -638) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) 639 (636 . 639) (625 . 636) (#("bu" 0 2 (fontified nil)) . 625) (625 . 627) (#("buff_reader" 0 11 (fontified nil)) . -625) (625 . 636) (#("bu" 0 2 (fontified t)) . -625) (undo-tree-id4058 . -2) (undo-tree-id4059 . -2) 627 (625 . 627) (621 . 625) (#("    " 0 4 (fontified nil)) . 620) (undo-tree-id4060 . -4) (619 . 625) (t 25962 63612 981532 515000)) nil (25962 63673 77449 299000) 0 nil])
([nil nil ((654 . 655) (#("." 0 1 (fontified t)) . -654) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (#("," 0 1 (fontified t)) . -655) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (#("i" 0 1 (fontified t)) . -656) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) 657 (655 . 657) (#("r" 0 1 (fontified t)) . -655) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (#("e" 0 1 (fontified t)) . -656) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) 657 (655 . 657) (#("l" 0 1 (fontified t)) . -655) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (#("i" 0 1 (fontified t)) . -656) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (#("n" 0 1 (fontified t)) . -657) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (#("e" 0 1 (fontified t)) . -658) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (#("s" 0 1 (fontified t)) . -659) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) 660 (655 . 660) (#("l" 0 1 (fontified t)) . -655) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (#("i" 0 1 (fontified t)) . -656) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) 657) nil (25962 63673 77192 387000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -654) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) 655 (#("l" 0 1 (fontified t)) . -655) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (#("i" 0 1 (fontified t)) . -656) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) 657 (656 . 657) (655 . 656) (#("k" 0 1 (fontified t)) . -655) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) 656 (655 . 656) (654 . 655) (t 25962 63673 91477 792000)) nil (25962 63701 294054 789000) 0 nil])
([nil nil ((#("    let three_lines = buff_reader;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 34 (fontified t) 34 35 (fontified t)) . 621) (undo-tree-id4061 . 2) (undo-tree-id4062 . -34) (undo-tree-id4063 . -33) (undo-tree-id4064 . -33) (undo-tree-id4065 . -32) (undo-tree-id4066 . -33) (undo-tree-id4067 . -33) (undo-tree-id4068 . -33) (undo-tree-id4069 . -33) (undo-tree-id4070 . -33) (undo-tree-id4071 . -33) (undo-tree-id4072 . -33) (undo-tree-id4073 . -33) (undo-tree-id4074 . -33) (undo-tree-id4075 . -33) (undo-tree-id4076 . -33) (undo-tree-id4077 . -33) (undo-tree-id4078 . -33) (undo-tree-id4079 . -33) (undo-tree-id4080 . -33) (undo-tree-id4081 . -33) (undo-tree-id4082 . -33) (undo-tree-id4083 . -33) (undo-tree-id4084 . -33) (undo-tree-id4085 . -33) (undo-tree-id4086 . -33) (undo-tree-id4087 . -33) (undo-tree-id4088 . -33) (undo-tree-id4089 . -33) (undo-tree-id4090 . -33) (undo-tree-id4091 . -33) (undo-tree-id4092 . -33) (undo-tree-id4093 . -33) (undo-tree-id4094 . -33) (undo-tree-id4095 . -33) (undo-tree-id4096 . -33) (undo-tree-id4097 . -33) (undo-tree-id4098 . -33) (undo-tree-id4099 . -33) (undo-tree-id4100 . -33) (undo-tree-id4101 . -33) (undo-tree-id4102 . -33) (undo-tree-id4103 . -33) (undo-tree-id4104 . -33) (undo-tree-id4105 . -33) (undo-tree-id4106 . -33) (undo-tree-id4107 . -33) (undo-tree-id4108 . -33) (undo-tree-id4109 . -33) (undo-tree-id4110 . -33) (undo-tree-id4111 . -33) (undo-tree-id4112 . -33) (undo-tree-id4113 . -33) (undo-tree-id4114 . -33) (undo-tree-id4115 . -33) (undo-tree-id4116 . -33) (undo-tree-id4117 . -33) (undo-tree-id4118 . -33) (undo-tree-id4119 . -33) (undo-tree-id4120 . -33) (undo-tree-id4121 . -33) (undo-tree-id4122 . -33) (undo-tree-id4123 . -33) (undo-tree-id4124 . -33) (undo-tree-id4125 . -33) (undo-tree-id4126 . -33) (undo-tree-id4127 . -33) (undo-tree-id4128 . -33) (undo-tree-id4129 . -33) (undo-tree-id4130 . -33) (undo-tree-id4131 . -33) (undo-tree-id4132 . -33) (undo-tree-id4133 . -33) (undo-tree-id4134 . -33) (undo-tree-id4135 . -33) (undo-tree-id4136 . -33) (undo-tree-id4137 . -33) (undo-tree-id4138 . -33) (undo-tree-id4139 . -33) (undo-tree-id4140 . -33) (undo-tree-id4141 . -33) (undo-tree-id4142 . -33) (undo-tree-id4143 . -33) (undo-tree-id4144 . -33) (undo-tree-id4145 . -33) (undo-tree-id4146 . -33) (undo-tree-id4147 . -33) (undo-tree-id4148 . -33) (undo-tree-id4149 . -33) (undo-tree-id4150 . -33) (undo-tree-id4151 . -33) (undo-tree-id4152 . -33) (undo-tree-id4153 . -33) (undo-tree-id4154 . -33) (undo-tree-id4155 . -33) (undo-tree-id4156 . -33) (undo-tree-id4157 . -33) (undo-tree-id4158 . -33) (undo-tree-id4159 . -33) (undo-tree-id4160 . -33) (undo-tree-id4161 . -33) (undo-tree-id4162 . -33) (undo-tree-id4163 . -33) (undo-tree-id4164 . -33) (undo-tree-id4165 . -33) (undo-tree-id4166 . -33) (undo-tree-id4167 . -33) (undo-tree-id4168 . -33) (undo-tree-id4169 . -33) (undo-tree-id4170 . -33) (undo-tree-id4171 . -33) (undo-tree-id4172 . -33) (undo-tree-id4173 . -33) (undo-tree-id4174 . -33) (undo-tree-id4175 . -33) (undo-tree-id4176 . -33) (undo-tree-id4177 . -33) (undo-tree-id4178 . -33) (undo-tree-id4179 . -33) (undo-tree-id4180 . -33) (undo-tree-id4181 . -33) (undo-tree-id4182 . -33) (undo-tree-id4183 . -33) (undo-tree-id4184 . -33) (undo-tree-id4185 . -33) (undo-tree-id4186 . -33) (undo-tree-id4187 . -33) (undo-tree-id4188 . -33) (undo-tree-id4189 . -33) (undo-tree-id4190 . -33) (undo-tree-id4191 . -33) (undo-tree-id4192 . -33) (undo-tree-id4193 . -33) (undo-tree-id4194 . -33) (undo-tree-id4195 . -33) (undo-tree-id4196 . -33) (undo-tree-id4197 . -33) (undo-tree-id4198 . -33) (undo-tree-id4199 . -33) (undo-tree-id4200 . -33) (undo-tree-id4201 . -33) (undo-tree-id4202 . -33) (undo-tree-id4203 . -33) (undo-tree-id4204 . -33) (undo-tree-id4205 . -33) (undo-tree-id4206 . -33) (undo-tree-id4207 . -33) (undo-tree-id4208 . -33) (undo-tree-id4209 . -33) (undo-tree-id4210 . -33) (undo-tree-id4211 . -33) (undo-tree-id4212 . -33) (undo-tree-id4213 . -33) (undo-tree-id4214 . -33) (undo-tree-id4215 . -33) (undo-tree-id4216 . -33) (undo-tree-id4217 . -33) (undo-tree-id4218 . -33) (undo-tree-id4219 . -33) (undo-tree-id4220 . -33) (undo-tree-id4221 . 2) (undo-tree-id4222 . -33) (undo-tree-id4223 . -33) (undo-tree-id4224 . -33) (undo-tree-id4225 . -33) (undo-tree-id4226 . -33) (undo-tree-id4227 . -33) (undo-tree-id4228 . -33) (undo-tree-id4229 . -33) (undo-tree-id4230 . -33) (undo-tree-id4231 . -33) (undo-tree-id4232 . -33) (undo-tree-id4233 . -33) (undo-tree-id4234 . -33) (undo-tree-id4235 . -33) (undo-tree-id4236 . -33) (undo-tree-id4237 . -33) (undo-tree-id4238 . -33) (undo-tree-id4239 . -33) (undo-tree-id4240 . -33) (undo-tree-id4241 . -33) (undo-tree-id4242 . -33) (undo-tree-id4243 . -33) (undo-tree-id4244 . -33) (undo-tree-id4245 . -33) (undo-tree-id4246 . -33) (undo-tree-id4247 . -33) (undo-tree-id4248 . -33) (undo-tree-id4249 . -33) (undo-tree-id4250 . -33) (undo-tree-id4251 . -33) (undo-tree-id4252 . -33) (undo-tree-id4253 . -32) (undo-tree-id4254 . -32) (undo-tree-id4255 . -32) (undo-tree-id4256 . -32) (undo-tree-id4257 . -32) (undo-tree-id4258 . -32) (undo-tree-id4259 . -32) (undo-tree-id4260 . -32) (undo-tree-id4261 . -32) (undo-tree-id4262 . -32) (undo-tree-id4263 . -32) (undo-tree-id4264 . -8) (undo-tree-id4265 . -19) (undo-tree-id4266 . -8) (undo-tree-id4267 . -19) (undo-tree-id4268 . -32) (undo-tree-id4269 . -32) (undo-tree-id4270 . -32) (undo-tree-id4271 . -32) (undo-tree-id4272 . -32) (undo-tree-id4273 . -32) (undo-tree-id4274 . -32) (undo-tree-id4275 . -32) (undo-tree-id4276 . -32) (undo-tree-id4277 . -32) (undo-tree-id4278 . -32) (undo-tree-id4279 . -32) (undo-tree-id4280 . -32) (undo-tree-id4281 . -32) (undo-tree-id4282 . -32) (undo-tree-id4283 . -32) (undo-tree-id4284 . -32) (undo-tree-id4285 . -32) (undo-tree-id4286 . -32) (undo-tree-id4287 . -32) (undo-tree-id4288 . -32) (undo-tree-id4289 . -32) (undo-tree-id4290 . -32) (undo-tree-id4291 . -35) 653) nil (25962 63701 293765 785000) 0 nil])
([nil nil ((635 . 637) (t 25962 63701 335649 758000)) nil (25962 63712 870328 944000) 0 nil])
([nil nil ((nil rear-nonsticky nil 944 . 945) (nil fontified nil 637 . 945) (637 . 945)) nil (25962 63712 870322 691000) 0 nil])
([nil nil ((apply -18 419 656 undo--wrap-and-run-primitive-undo 419 656 ((648 . 651) (634 . 637) (578 . 581) (528 . 531) (494 . 497) (420 . 423) 419)) (t 25962 63712 907276 489000)) nil (25962 63726 212101 461000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 69) (undo-tree-id4697 . -4) (t 25962 63726 222866 329000)) nil (25962 63742 399780 776000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t)) . 69) (undo-tree-id4696 . -1)) nil (25962 63742 399779 324000) 0 nil])
([nil nil ((#("BufReader" 0 9 (fontified t face font-lock-type-face)) . 69) (undo-tree-id4695 . -8)) nil (25962 63742 399777 843000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-constant-face)) . 64)) nil (25962 63742 399776 265000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-constant-face)) . 64)) nil (25962 63742 399775 342000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 64)) nil (25962 63742 399774 500000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 64)) nil (25962 63742 399773 346000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 64) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1)) nil (25962 63742 399771 631000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 64)) nil (25962 63742 399767 250000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 64) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1)) nil (25962 63742 399762 750000) 0 nil])
([nil nil ((89 . 90) (80 . 89) (#("Buf" 0 3 (fontified nil)) . 80) (80 . 83) (#("BufReader" 0 9 (fontified nil)) . -80) (80 . 89) (#("Buf" 0 3 (fontified t face font-lock-type-face)) . -80) (undo-tree-id4698 . -1) (undo-tree-id4699 . -3) (undo-tree-id4700 . -3) (undo-tree-id4701 . -3) (undo-tree-id4702 . -3) (undo-tree-id4703 . -3) (undo-tree-id4704 . -3) (undo-tree-id4705 . -3) (undo-tree-id4706 . -3) (undo-tree-id4707 . -3) (undo-tree-id4708 . -3) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -3) (undo-tree-id4712 . -3) (undo-tree-id4713 . -3) (undo-tree-id4714 . -3) (undo-tree-id4715 . -3) (undo-tree-id4716 . -3) (undo-tree-id4717 . -3) (undo-tree-id4718 . -3) (undo-tree-id4719 . -3) (undo-tree-id4720 . -3) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -3) (undo-tree-id4724 . -3) (undo-tree-id4725 . -3) (undo-tree-id4726 . -3) (undo-tree-id4727 . -3) (undo-tree-id4728 . -3) (undo-tree-id4729 . -3) (undo-tree-id4730 . -3) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -3) (undo-tree-id4735 . -3) (undo-tree-id4736 . -3) (undo-tree-id4737 . -3) (undo-tree-id4738 . -3) (undo-tree-id4739 . -3) (undo-tree-id4740 . -3) (undo-tree-id4741 . -3) (undo-tree-id4742 . -3) (undo-tree-id4743 . -3) (undo-tree-id4744 . -3) (undo-tree-id4745 . -3) (undo-tree-id4746 . -3) (undo-tree-id4747 . -3) (undo-tree-id4748 . -3) (undo-tree-id4749 . -3) (undo-tree-id4750 . -3) (undo-tree-id4751 . -3) (undo-tree-id4752 . -3) (undo-tree-id4753 . -3) (undo-tree-id4754 . -3) (undo-tree-id4755 . -3) (undo-tree-id4756 . -3) (undo-tree-id4757 . -3) (undo-tree-id4758 . -3) (undo-tree-id4759 . -3) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) (undo-tree-id4762 . -3) (undo-tree-id4763 . -3) (undo-tree-id4764 . -3) (undo-tree-id4765 . -3) (undo-tree-id4766 . -3) (undo-tree-id4767 . -3) (undo-tree-id4768 . -3) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -3) (undo-tree-id4772 . -3) (undo-tree-id4773 . -3) (undo-tree-id4774 . -3) (undo-tree-id4775 . -3) (undo-tree-id4776 . -3) (undo-tree-id4777 . -3) (undo-tree-id4778 . -3) 83 (80 . 83) (#("b" 0 1 (fontified t)) . -80) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) 81 (67 . 81) (66 . 67) (t 25962 63742 414394 742000)) nil (25962 63757 759713 624000) 0 nil])
([nil nil ((nil rear-nonsticky nil 90 . 91) (#("
" 0 1 (fontified nil)) . -114) (90 . 115) 85 (t 25962 63757 773974 135000)) nil (25962 63832 212680 573000) 0 nil])
([nil nil ((#("BufReader" 0 9 (fontified t face font-lock-type-face)) . 104) (undo-tree-id4792 . -8) (undo-tree-id4793 . -9)) nil (25962 63832 212678 268000) 0 nil])
([nil nil ((111 . 114) (104 . 111) (#("p" 0 1 (fontified nil)) . 104) (104 . 105) (#("prelude" 0 7 (fontified nil)) . -104) (104 . 111) (#("p" 0 1 (fontified t)) . -104) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) 105 (#("e" 0 1 (fontified t)) . -105) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) 106 (104 . 106) (#("P" 0 1 (fontified t face font-lock-type-face)) . -104) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -105) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -106) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) 107 (104 . 107)) nil (25962 63832 212670 373000) 0 nil])
([nil nil ((#("// fn handle_connection(mut stream: TcpStream) -> Result<(), Error>{
    
//     let map = get_user_map();

//     let sendstream = stream.try_clone()?;
    
//     let buff_reader = BufReader::new(&mut stream);


//     Ok(())
// }


" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 5 (fontified t face font-lock-comment-face) 5 6 (fontified t face font-lock-comment-face) 6 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face) 24 27 (fontified t face font-lock-comment-face) 27 28 (fontified t face font-lock-comment-face) 28 34 (fontified t face font-lock-comment-face) 34 36 (fontified t face font-lock-comment-face) 36 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-face) 46 48 (fontified t face font-lock-comment-face) 48 49 (syntax-table (1) fontified t face font-lock-comment-face) 49 50 (fontified t face font-lock-comment-face) 50 56 (fontified t face font-lock-comment-face) 56 57 (syntax-table (1) fontified t face font-lock-comment-face) 57 58 (fontified t face font-lock-comment-face) 58 59 (fontified t face font-lock-comment-face) 59 61 (fontified t face font-lock-comment-face) 61 66 (fontified t face font-lock-comment-face) 66 67 (syntax-table (1) fontified t face font-lock-comment-face) 67 68 (fontified t face font-lock-comment-face) 68 69 (fontified t face font-lock-comment-face) 69 73 (fontified t) 73 74 (fontified t) 74 77 (fontified t face font-lock-comment-delimiter-face) 77 81 (fontified t face font-lock-comment-delimiter-face) 81 84 (fontified t face font-lock-comment-face) 84 85 (fontified t face font-lock-comment-face) 85 88 (fontified t face font-lock-comment-face) 88 91 (fontified t face font-lock-comment-face) 91 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 105 (fontified t face font-lock-comment-face) 105 107 (fontified t face font-lock-comment-face) 107 108 (fontified t) 108 111 (fontified t face font-lock-comment-delimiter-face) 111 115 (fontified t face font-lock-comment-delimiter-face) 115 118 (fontified t face font-lock-comment-face) 118 119 (fontified t face font-lock-comment-face) 119 129 (fontified t face font-lock-comment-face) 129 132 (fontified t face font-lock-comment-face) 132 139 (fontified t face font-lock-comment-face) 139 148 (fontified t face font-lock-comment-face) 148 149 (fontified t face font-lock-comment-face) 149 150 (fontified t face font-lock-comment-face) 150 151 (fontified t face font-lock-comment-face) 151 153 (fontified t face font-lock-comment-face) 153 157 (fontified t) 157 158 (fontified t) 158 161 (fontified t face font-lock-comment-delimiter-face) 161 165 (fontified t face font-lock-comment-delimiter-face) 165 168 (fontified t face font-lock-comment-face) 168 169 (fontified t face font-lock-comment-face) 169 170 (fontified t face font-lock-comment-face) 170 180 (face font-lock-comment-face fontified t) 180 183 (face font-lock-comment-face fontified t) 183 186 (face font-lock-comment-face fontified t) 186 192 (face font-lock-comment-face fontified t) 192 194 (face font-lock-comment-face fontified t) 194 197 (face font-lock-comment-face fontified t) 197 198 (face font-lock-comment-face fontified t) 198 199 (face font-lock-comment-face fontified t) 199 202 (face font-lock-comment-face fontified t) 202 203 (face font-lock-comment-face fontified t) 203 209 (face font-lock-comment-face fontified t) 209 210 (face font-lock-comment-face fontified t) 210 212 (face font-lock-comment-face fontified t) 212 213 (fontified t) 213 214 (fontified t) 214 217 (fontified t face font-lock-comment-delimiter-face) 217 221 (fontified t face font-lock-comment-delimiter-face) 221 223 (fontified t face font-lock-comment-face) 223 224 (fontified t face font-lock-comment-face) 224 225 (fontified t face font-lock-comment-face) 225 226 (fontified t face font-lock-comment-face) 226 227 (fontified t face font-lock-comment-face) 227 228 (fontified t face font-lock-comment-face) 228 231 (fontified t face font-lock-comment-delimiter-face) 231 232 (fontified t face font-lock-comment-face) 232 233 (fontified t face font-lock-comment-face) 233 234 (fontified t) 234 235 (fontified t)) . 446) (undo-tree-id4833 . -234) (undo-tree-id4834 . -234) (undo-tree-id4835 . -234) (undo-tree-id4836 . -235) (undo-tree-id4837 . -234) (t 25962 63832 224280 209000)) nil (25962 63888 433197 883000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -494) (undo-tree-id4831 . -4) 498 (494 . 498) (#("    " 0 4 (fontified nil)) . 493) (undo-tree-id4832 . -4) (492 . 498)) nil (25962 63888 433193 293000) 0 nil])
([nil nil ((521 . 522) (apply yas--snippet-revive 507 521 #s(yas--snippet nil nil #s(yas--exit 521 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 521 nil) 29 nil nil nil nil)) (507 . 521) (#("get_user_map()$0" 0 16 (fontified nil)) . 507) (507 . 523) (#("ge" 0 2 (fontified nil)) . 507) (507 . 509) (#("get_user_map()" 0 14 (fontified nil)) . -507) (507 . 521) (#("ge" 0 2 (fontified t)) . -507) (undo-tree-id4828 . -2) (undo-tree-id4829 . -2) (undo-tree-id4830 . -2) 509 (497 . 509) (493 . 497)) nil (25962 63888 433190 323000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -532) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -533) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) 534 (#("r" 0 1 (fontified t face font-lock-type-face)) . -534) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) 535 (528 . 535) (524 . 528) (#("    " 0 4 (fontified nil)) . 523) (undo-tree-id4827 . -4) (522 . 528)) nil (25962 63888 433185 148000) 0 nil])
([nil nil ((532 . 543) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -532) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -533) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -534) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -535) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -536) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) 537 (532 . 537)) nil (25962 63888 433177 374000) 0 nil])
([nil nil ((532 . 537)) nil (25962 63888 433169 495000) 0 nil])
([nil nil ((564 . 565) (apply yas--snippet-revive 553 564 #s(yas--snippet nil nil #s(yas--exit 564 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 564 nil) 30 nil nil nil nil)) (553 . 564) (#("try_clone()$0" 0 13 (fontified nil)) . 553) (553 . 566) (#("tr" 0 2 (fontified nil)) . 553) (553 . 555) (#("try_clone()" 0 11 (fontified nil)) . -553) (553 . 564) (#("tr" 0 2 (fontified t)) . -553) (undo-tree-id4800 . -2) (undo-tree-id4801 . -2) (undo-tree-id4802 . -2) 555 (552 . 555) (546 . 552) (#("str" 0 3 (fontified nil)) . 546) (546 . 549) (#("stream" 0 6 (fontified nil)) . -546) (546 . 552) (#("str" 0 3 (fontified t face font-lock-type-face)) . -546) (undo-tree-id4803 . -3) (undo-tree-id4804 . -3) 549 (548 . 549)) nil (25962 63888 433166 909000) 0 nil])
([nil nil ((565 . 566)) nil (25962 63888 433160 461000) 0 nil])
([nil nil ((501 . 503) (apply yas--snippet-revive 494 502 #s(yas--snippet nil nil #s(yas--exit 501 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 501 nil) 31 nil nil nil nil)) (494 . 502) (#("Result<$0>" 0 10 (fontified nil)) . 494) (494 . 504) (#("Re" 0 2 (fontified nil)) . 494) (494 . 496) (#("Result<…>" 0 9 (fontified nil)) . -494) (494 . 503) (#("Re" 0 2 (fontified t face font-lock-type-face)) . -494) (undo-tree-id4796 . -2) (undo-tree-id4797 . -2) 496 (494 . 496) (#("T" 0 1 (fontified t face font-lock-type-face)) . -494) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) 495 (494 . 495) (490 . 494)) nil (25962 63888 433149 662000) 0 nil])
([nil nil ((64 . 75) (505 . 510) (#("Err" 0 3 (fontified nil)) . 505) (505 . 508) (#("Error (use std::io::Error)" 0 26 (fontified nil)) . -505) (505 . 531) (#("Err" 0 3 (fontified t face font-lock-type-face)) . -505) (undo-tree-id4794 . -3) (undo-tree-id4795 . -3) 508 (503 . 508)) nil (25962 63888 433139 815000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -814) (undo-tree-id4915 . -4) (undo-tree-id4916 . -4) (undo-tree-id4917 . -4) (undo-tree-id4918 . -4) (undo-tree-id4919 . -4) (undo-tree-id4920 . -4) (undo-tree-id4921 . -4) (undo-tree-id4922 . -4) (undo-tree-id4923 . -4) (undo-tree-id4924 . -4) (undo-tree-id4925 . -4) (undo-tree-id4926 . -4) (undo-tree-id4927 . -4) 818 (814 . 818) (#("    " 0 4 (fontified nil)) . 813) (813 . 817) (813 . 814) (t 25962 63888 447345 641000)) nil (25962 63897 837605 686000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 871 873 nil nil nil nil #s(yas--exit 874 nil))) #s(yas--exit 874 nil) 32 nil #s(yas--field 1 871 873 nil nil nil nil #s(yas--exit 874 nil)) nil nil)) (868 . 874) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 868) (868 . 881) (#("O" 0 1 (fontified nil)) . 868) (868 . 869) (#("Ok(…)" 0 5 (fontified nil)) . -868) (868 . 873) (#("O" 0 1 (fontified t face font-lock-type-face)) . -868) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) 869 (868 . 869) (864 . 868) (#("    " 0 4 (fontified nil)) . 863) (undo-tree-id4912 . -4) (863 . 868) (#("    " 0 4 (fontified nil)) . 862) (undo-tree-id4913 . -4) (862 . 867) (#("    " 0 4 (fontified nil)) . 861) (undo-tree-id4914 . -4) (860 . 866)) nil (25962 63897 837591 460000) 0 nil])
([nil nil ((apply yas--snippet-revive 868 874 #s(yas--snippet nil (#s(yas--field 1 871 873 nil nil nil nil #s(yas--exit 874 nil))) #s(yas--exit 874 nil) 32 nil #s(yas--field 1 871 873 nil nil nil nil #s(yas--exit 874 nil)) nil nil))) nil (25962 63897 837527 418000) 0 nil])
([nil nil ((#("    let http_request: Vec<_> = buf_reader
        .lines()
        .map(|result| result.unwrap())
        .take_while(|line| !line.is_empty())
        .collect();


" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 20 (fontified t face font-lock-variable-name-face) 20 22 (fontified t) 22 25 (fontified t face font-lock-type-face) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 58 (fontified t face (rainbow-delimiters-depth-2-face)) 58 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-2-face)) 72 94 (fontified t) 94 95 (fontified t face (rainbow-delimiters-depth-3-face)) 95 96 (fontified t face (rainbow-delimiters-depth-3-face)) 96 97 (fontified t face (rainbow-delimiters-depth-2-face)) 97 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-2-face)) 118 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-3-face)) 140 141 (fontified t face (rainbow-delimiters-depth-3-face)) 141 142 (fontified t face (rainbow-delimiters-depth-2-face)) 142 157 (fontified t) 157 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t)) . 650) (undo-tree-id4976 . -164) (undo-tree-id4977 . -164) (undo-tree-id4978 . -164) (undo-tree-id4979 . -42) (undo-tree-id4980 . -42) (undo-tree-id4981 . -163) (undo-tree-id4982 . -164) (t 25962 63897 875215 397000)) nil (25962 63999 341364 305000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -651) (undo-tree-id4974 . -4) 655 (651 . 655) (#("    " 0 4 (fontified nil)) . 650) (undo-tree-id4975 . -4) (649 . 655)) nil (25962 63999 341356 673000) 0 nil])
([nil nil ((663 . 667) (660 . 663) (656 . 660) (652 . 656) (#("    " 0 4 (fontified nil)) . 651) (undo-tree-id4972 . -4) (651 . 656) (#("    " 0 4 (fontified nil)) . 650) (undo-tree-id4973 . -4) (654 . 655) (650 . 654)) nil (25962 63999 341353 623000) 0 nil])
([nil nil ((#("    println!(\"Request: {:#?}\", http_request);
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 23 (fontified t face font-lock-string-face) 23 28 (fontified t face rust-string-interpolation) 28 29 (fontified t face font-lock-string-face) 29 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 46 (fontified t)) . 669) (undo-tree-id4967 . -45) (undo-tree-id4968 . 46) (undo-tree-id4969 . -14) (undo-tree-id4970 . -14) (undo-tree-id4971 . -46) 683) nil (25962 63999 341350 274000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -667) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) 668 (667 . 668)) nil (25962 63999 341345 695000) 0 nil])
([nil nil ((660 . 665)) nil (25962 63999 341336 997000) 0 nil])
([nil nil ((715 . 716) (apply yas--snippet-revive 707 715 #s(yas--snippet nil nil #s(yas--exit 715 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 715 nil) 36 nil nil nil nil)) (707 . 715) (#("unwrap()$0" 0 10 (fontified nil)) . 707) (707 . 717) (#("un" 0 2 (fontified nil)) . 707) (707 . 709) (#("unwrap()" 0 8 (fontified nil)) . -707) (707 . 715) (#("un" 0 2 (fontified t)) . -707) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4930 . -2) (undo-tree-id4931 . -2) (undo-tree-id4932 . -2) (undo-tree-id4933 . -2) (undo-tree-id4934 . -2) (undo-tree-id4935 . -2) (undo-tree-id4936 . -2) (undo-tree-id4937 . -2) (undo-tree-id4938 . -2) (undo-tree-id4939 . -2) (undo-tree-id4940 . -2) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) 709 (706 . 709) (apply yas--snippet-revive 698 706 #s(yas--snippet nil nil #s(yas--exit 706 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 706 nil) 35 nil nil nil nil)) (698 . 706) (#("unwrap()$0" 0 10 (fontified nil)) . 698) (698 . 708) (#("un" 0 2 (fontified nil)) . 698) (698 . 700) (#("unwrap()" 0 8 (fontified nil)) . -698) (698 . 706) (#("un" 0 2 (fontified t)) . -698) (undo-tree-id4943 . -1) (undo-tree-id4944 . -2) (undo-tree-id4945 . -2) 700 (697 . 700) (apply yas--snippet-revive 691 697 #s(yas--snippet nil nil #s(yas--exit 697 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 697 nil) 34 nil nil nil nil)) (691 . 697) (#("next()$0" 0 8 (fontified nil)) . 691) (691 . 699) (#("ne" 0 2 (fontified nil)) . 691) (691 . 693) (#("next() (as Iterator)" 0 20 (fontified nil)) . -691) (691 . 711) (#("ne" 0 2 (fontified t)) . -691) (undo-tree-id4946 . -2) (undo-tree-id4947 . -2) (undo-tree-id4948 . -2) 693 (690 . 693) (apply yas--snippet-revive 683 690 #s(yas--snippet nil nil #s(yas--exit 690 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 690 nil) 33 nil nil nil nil)) (683 . 690) (#("lines()$0" 0 9 (fontified nil)) . 683) (683 . 692) (#("li" 0 2 (fontified nil)) . 683) (683 . 685) (#("lines() (as BufRead)" 0 20 (fontified nil)) . -683) (683 . 703) (#("li" 0 2 (fontified t)) . -683) (undo-tree-id4949 . -1) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) 685 (683 . 685) (682 . 683) (672 . 682) (#("bu" 0 2 (fontified nil)) . 672) (672 . 674) (#("buf_reader" 0 10 (fontified nil)) . -672) (672 . 682) (#("bu" 0 2 (fontified t)) . -672) (undo-tree-id4952 . -2) (undo-tree-id4953 . -2) 674 (672 . 674) (#(" " 0 1 (fontified t)) . -672) (undo-tree-id4954 . -1) 673 (672 . 673)) nil (25962 63999 341327 747000) 0 nil])
([nil nil ((732 . 733) (731 . 732) (#("=" 0 1 (fontified t)) . -731) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (#(" " 0 1 (fontified t)) . -732) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . 1) (undo-tree-id5183 . 1) (#("m" 0 1 (fontified t)) . -733) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (#("a" 0 1 (fontified t)) . -734) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (#("p" 0 1 (fontified t)) . -735) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (#("." 0 1 (fontified t)) . -736) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) 737 (736 . 737) (735 . 736) (#("p" 0 1 (fontified t)) . -735) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (#("." 0 1 (fontified t)) . -736) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) 737 (735 . 737) (732 . 735) (#("m" 0 1 (fontified t)) . -732) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . 1) (undo-tree-id5216 . 1) (#("a" 0 1 (fontified t)) . -733) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) 734 (732 . 734) (#("E" 0 1 (fontified t)) . -732) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (#("r" 0 1 (fontified t)) . -733) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (#("r" 0 1 (fontified t)) . -734) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) 735 (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -735) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . 1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 736) (undo-tree-id5262 . -1) (undo-tree-id5263 . 1) (undo-tree-id5264 . -1) (undo-tree-id5265 . 1) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face))) . 736) (undo-tree-id5266 . -2) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 718 718 nil nil nil t #s(yas--exit 718 nil))) #s(yas--exit 718 nil) 37 nil #s(yas--field 1 718 718 nil nil nil t #s(yas--exit 718 nil)) nil nil)) (732 . 739) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 732) (731 . 746) (#("= Err(…)" 0 2 (fontified nil) 2 8 (fontified nil)) . -731) (undo-tree-id5267 . -2) (undo-tree-id5268 . -2) (733 . 739) (#("ma" 0 2 (fontified t)) . -733) (undo-tree-id5269 . -2) (undo-tree-id5270 . -2) 735 (733 . 735) (732 . 733) (731 . 732) (#("-" 0 1 (fontified t)) . -731) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (#(" " 0 1 (fontified t)) . -732) (undo-tree-id5273 . -1) 733 (726 . 733) (722 . 726) (#("l" 0 1 (fontified t)) . -722) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (#("e" 0 1 (fontified t)) . -723) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -724) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (#(" " 0 1 (fontified t)) . -725) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) 726 (722 . 726) (718 . 722) (#("    " 0 4 (fontified nil)) . 717) (undo-tree-id5282 . -4) (716 . 722) (t 25962 63999 354245 623000)) nil (25962 64128 230995 842000) 0 nil])
([nil nil ((#("    let user = 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t)) . 718) (undo-tree-id4999 . 1) (undo-tree-id5000 . -15) (undo-tree-id5001 . -13) (undo-tree-id5002 . -15) (undo-tree-id5003 . -14) (undo-tree-id5004 . -13) (undo-tree-id5005 . -15) (undo-tree-id5006 . -15) (undo-tree-id5007 . -13) (undo-tree-id5008 . 1) (undo-tree-id5009 . 3) (undo-tree-id5010 . -13) (undo-tree-id5011 . 3) (undo-tree-id5012 . -13) (undo-tree-id5013 . -13) (undo-tree-id5014 . 1) (undo-tree-id5015 . -13) (undo-tree-id5016 . -13) (undo-tree-id5017 . -13) (undo-tree-id5018 . -13) (undo-tree-id5019 . -13) (undo-tree-id5020 . -13) (undo-tree-id5021 . -13) (undo-tree-id5022 . -13) (undo-tree-id5023 . -13) (undo-tree-id5024 . -13) (undo-tree-id5025 . -13) (undo-tree-id5026 . -13) (undo-tree-id5027 . -13) (undo-tree-id5028 . -13) (undo-tree-id5029 . -13) (undo-tree-id5030 . -13) (undo-tree-id5031 . -13) (undo-tree-id5032 . -13) (undo-tree-id5033 . -13) (undo-tree-id5034 . -13) (undo-tree-id5035 . -13) (undo-tree-id5036 . -13) (undo-tree-id5037 . -13) (undo-tree-id5038 . -13) (undo-tree-id5039 . -13) (undo-tree-id5040 . -13) (undo-tree-id5041 . -13) (undo-tree-id5042 . -13) (undo-tree-id5043 . -13) (undo-tree-id5044 . -13) (undo-tree-id5045 . -13) (undo-tree-id5046 . -13) (undo-tree-id5047 . -13) (undo-tree-id5048 . -13) (undo-tree-id5049 . -14) (undo-tree-id5050 . -14) (undo-tree-id5051 . -14) (undo-tree-id5052 . -14) (undo-tree-id5053 . -14) (undo-tree-id5054 . -14) (undo-tree-id5055 . -14) (undo-tree-id5056 . -14) (undo-tree-id5057 . -14) (undo-tree-id5058 . -14) (undo-tree-id5059 . 1) (undo-tree-id5060 . -14) (undo-tree-id5061 . -14) (undo-tree-id5062 . -14) (undo-tree-id5063 . -14) (undo-tree-id5064 . -14) (undo-tree-id5065 . -14) (undo-tree-id5066 . -14) (undo-tree-id5067 . -14) (undo-tree-id5068 . -14) (undo-tree-id5069 . -14) (undo-tree-id5070 . -14) (undo-tree-id5071 . -14) (undo-tree-id5072 . -14) (undo-tree-id5073 . -14) (undo-tree-id5074 . -14) (undo-tree-id5075 . -14) (undo-tree-id5076 . -14) (undo-tree-id5077 . -14) (undo-tree-id5078 . -14) (undo-tree-id5079 . -14) (undo-tree-id5080 . -14) (undo-tree-id5081 . -14) (undo-tree-id5082 . -14) (undo-tree-id5083 . -14) (undo-tree-id5084 . -14) (undo-tree-id5085 . -14) (undo-tree-id5086 . -14) (undo-tree-id5087 . -14) (undo-tree-id5088 . -14) (undo-tree-id5089 . -14) (undo-tree-id5090 . -14) (undo-tree-id5091 . -14) (undo-tree-id5092 . -14) (undo-tree-id5093 . -14) (undo-tree-id5094 . -14) (undo-tree-id5095 . -14) (undo-tree-id5096 . -14) (undo-tree-id5097 . -14) (undo-tree-id5098 . -15) (undo-tree-id5099 . -15) (undo-tree-id5100 . -15) (undo-tree-id5101 . -15) (undo-tree-id5102 . -15) (undo-tree-id5103 . -15) (undo-tree-id5104 . -15) (undo-tree-id5105 . -15) (undo-tree-id5106 . -15) (undo-tree-id5107 . -15) (undo-tree-id5108 . -15) (undo-tree-id5109 . -15) (undo-tree-id5110 . -15) (undo-tree-id5111 . -15) (undo-tree-id5112 . -15) (undo-tree-id5113 . -15) (undo-tree-id5114 . -15) (undo-tree-id5115 . -15) (undo-tree-id5116 . -15) (undo-tree-id5117 . -15) (undo-tree-id5118 . -15) (undo-tree-id5119 . -15) (undo-tree-id5120 . -15) (undo-tree-id5121 . -15) (undo-tree-id5122 . -15) (undo-tree-id5123 . -15) (undo-tree-id5124 . -15) (undo-tree-id5125 . -15) (undo-tree-id5126 . -15) (undo-tree-id5127 . -15) (undo-tree-id5128 . -15) (undo-tree-id5129 . -15) (undo-tree-id5130 . -15) (undo-tree-id5131 . -15) (undo-tree-id5132 . -15) (undo-tree-id5133 . -15) (undo-tree-id5134 . -15) (undo-tree-id5135 . -15) (undo-tree-id5136 . -15) (undo-tree-id5137 . -15) (undo-tree-id5138 . -15) (undo-tree-id5139 . -15) (undo-tree-id5140 . -15) (undo-tree-id5141 . -15) (undo-tree-id5142 . -14) (undo-tree-id5143 . -14) (undo-tree-id5144 . -14) (undo-tree-id5145 . -14) (undo-tree-id5146 . -14) (undo-tree-id5147 . -14) (undo-tree-id5148 . -14) (undo-tree-id5149 . -14) (undo-tree-id5150 . -14) (undo-tree-id5151 . -14) (undo-tree-id5152 . -14) (undo-tree-id5153 . -14) (undo-tree-id5154 . -14) (undo-tree-id5155 . -14) (undo-tree-id5156 . -14) (undo-tree-id5157 . -14) (undo-tree-id5158 . -14) (undo-tree-id5159 . -14) (undo-tree-id5160 . -14) (undo-tree-id5161 . -14) (undo-tree-id5162 . -14) (undo-tree-id5163 . -14) (undo-tree-id5164 . -14) (undo-tree-id5165 . -16) 732) nil (25962 64128 230839 961000) 0 nil])
([nil nil ((apply yas--snippet-revive 718 718 #s(yas--snippet nil (#s(yas--field 1 718 718 nil nil nil t #s(yas--exit 718 nil))) #s(yas--exit 718 nil) 37 nil #s(yas--field 1 718 718 nil nil nil t #s(yas--exit 718 nil)) nil nil))) nil (25962 64128 230671 931000) 0 nil])
([nil nil ((752 . 761) (#("us" 0 2 (fontified nil)) . 752) (undo-tree-id4983 . -2) (752 . 754) (#("user_line" 0 9 (fontified nil)) . -752) (undo-tree-id4984 . -9) (752 . 761) (#("us" 0 2 (fontified t)) . -752) (undo-tree-id4985 . -2) (undo-tree-id4986 . -2) (undo-tree-id4987 . -2) 754 (753 . 754) (#("k" 0 1 (fontified nil)) . 753) (undo-tree-id4988 . -1) (752 . 753) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 752 761 nil nil nil t #s(yas--exit 762 nil))) #s(yas--exit 762 nil) 38 nil #s(yas--field 1 752 761 nil nil nil t #s(yas--exit 762 nil)) nil nil)) (738 . 754) (#("get_key_value(${1:k})$0" 0 23 (fontified nil)) . 738) (738 . 761) (#("ge" 0 2 (fontified nil)) . 738) (738 . 740) (#("get_key_value(…)" 0 16 (fontified nil)) . -738) (738 . 754) (#("ge" 0 2 (fontified t)) . -738) (undo-tree-id4989 . -1) (undo-tree-id4990 . -2) (undo-tree-id4991 . -2) 740 (738 . 740) (#("h" 0 1 (fontified t)) . -738) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) 739 (738 . 739) (736 . 738) (725 . 736) (#(" " 0 1 (fontified t)) . -725) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) 726 (723 . 726) (719 . 723) (#("    " 0 4 (fontified nil)) . 718) (undo-tree-id4997 . -4) (718 . 723) (#("    " 0 4 (fontified nil)) . 717) (undo-tree-id4998 . -4) (721 . 722) (717 . 721)) nil (25962 64128 230666 676000) 0 nil])
([nil nil ((762 . 763) (apply yas--snippet-revive 738 762 #s(yas--snippet nil (#s(yas--field 1 752 761 nil nil nil t #s(yas--exit 762 nil))) #s(yas--exit 762 nil) 38 nil #s(yas--field 1 752 761 nil nil nil t #s(yas--exit 762 nil)) nil nil))) nil (25962 64128 230640 703000) 0 nil])
([nil nil ((752 . 753) (t 25962 64128 269991 911000)) nil (25962 64137 209360 946000) 0 nil])
([nil nil ((763 . 764) (t 25962 64137 250009 52000)) nil (25962 64169 548605 443000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t face rust-question-mark)) . 763) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (t 25962 64169 586104 340000)) nil (25962 64174 135251 631000) 0 nil])
([nil nil ((778 . 780) (776 . 778) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 776 780 nil nil nil t #s(yas--exit 784 nil))) #s(yas--exit 784 nil) 39 nil #s(yas--field 1 776 780 nil nil nil t #s(yas--exit 784 nil)) nil nil)) (770 . 786) (#("match $1 {
	$0
    }" 0 20 (fontified nil)) . 770) (785 . 789) (781 . 782) (#("    " 0 4 (fontified nil)) . 781) (770 . 789) (#("matc" 0 4 (fontified nil)) . 770) (770 . 774) (#("match" 0 5 (fontified nil)) . -770) (770 . 775) (#("matc" 0 4 (fontified t)) . -770) (undo-tree-id5703 . -2) (undo-tree-id5704 . -4) (undo-tree-id5705 . -4) 774 (772 . 774) (771 . 772) (#("a" 0 1 (fontified t)) . -771) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (#("p" 0 1 (fontified t)) . -772) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (#(" " 0 1 (fontified t)) . -773) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (#("u" 0 1 (fontified t)) . -774) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) 775 (#("s" 0 1 (fontified t)) . -775) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) 776 (774 . 776) (772 . 774) (770 . 772) (766 . 770) (t 25962 64174 150121 891000)) nil (25962 64216 831628 144000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -782) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) 783 (782 . 783) (apply yas--snippet-revive 770 790 #s(yas--snippet nil (#s(yas--field 1 776 780 nil nil nil t #s(yas--exit 784 nil))) #s(yas--exit 784 nil) 39 nil #s(yas--field 1 776 780 nil nil nil t #s(yas--exit 784 nil)) nil nil))) nil (25962 64216 831613 921000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 790 790 nil nil nil nil #s(yas--exit 791 nil))) #s(yas--exit 791 nil) 40 nil #s(yas--field 1 790 790 nil nil nil nil #s(yas--exit 791 nil)) nil nil)) (785 . 791) (#("Some($1)$0" 0 10 (fontified nil)) . 785) (785 . 795) (#("S" 0 1 (fontified nil)) . 785) (785 . 786) (#("Some(…)" 0 7 (fontified nil)) . -785) (785 . 792) (#("S" 0 1 (fontified t face font-lock-type-face)) . -785) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) 786 (785 . 786) (784 . 785) (#("	" 0 1 (fontified nil)) . 783) (undo-tree-id5657 . -1) (782 . 785)) nil (25962 64216 831586 776000) 0 nil])
([nil nil ((apply yas--snippet-revive 785 791 #s(yas--snippet nil (#s(yas--field 1 790 790 nil nil nil nil #s(yas--exit 791 nil))) #s(yas--exit 791 nil) 40 nil #s(yas--field 1 790 790 nil nil nil nil #s(yas--exit 791 nil)) nil nil))) nil (25962 64216 831580 733000) 0 nil])
([nil nil ((#("    match user {

	Some()
	
    }

" 0 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t) 26 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t) 34 35 (fontified t)) . 766) (undo-tree-id5420 . 11) (undo-tree-id5421 . -34) (undo-tree-id5422 . -26) (undo-tree-id5423 . -34) (undo-tree-id5424 . -34) (undo-tree-id5425 . -26) (undo-tree-id5426 . -16) (undo-tree-id5427 . -16) (undo-tree-id5428 . -16) (undo-tree-id5429 . -16) (undo-tree-id5430 . -16) (undo-tree-id5431 . -16) (undo-tree-id5432 . -16) (undo-tree-id5433 . -16) (undo-tree-id5434 . -16) (undo-tree-id5435 . -16) (undo-tree-id5436 . -16) (undo-tree-id5437 . -16) (undo-tree-id5438 . -16) (undo-tree-id5439 . -16) (undo-tree-id5440 . -16) (undo-tree-id5441 . -16) (undo-tree-id5442 . -16) (undo-tree-id5443 . -16) (undo-tree-id5444 . -16) (undo-tree-id5445 . -16) (undo-tree-id5446 . -16) (undo-tree-id5447 . -16) (undo-tree-id5448 . -16) (undo-tree-id5449 . -16) (undo-tree-id5450 . -16) (undo-tree-id5451 . -16) (undo-tree-id5452 . -16) (undo-tree-id5453 . -16) (undo-tree-id5454 . -16) (undo-tree-id5455 . -16) (undo-tree-id5456 . -16) (undo-tree-id5457 . -16) (undo-tree-id5458 . -16) (undo-tree-id5459 . -16) (undo-tree-id5460 . -16) (undo-tree-id5461 . -16) (undo-tree-id5462 . -16) (undo-tree-id5463 . -16) (undo-tree-id5464 . -16) (undo-tree-id5465 . -16) (undo-tree-id5466 . -16) (undo-tree-id5467 . -16) (undo-tree-id5468 . -16) (undo-tree-id5469 . -24) (undo-tree-id5470 . -24) (undo-tree-id5471 . -24) (undo-tree-id5472 . -24) (undo-tree-id5473 . -24) (undo-tree-id5474 . -24) (undo-tree-id5475 . -24) (undo-tree-id5476 . -24) (undo-tree-id5477 . -24) (undo-tree-id5478 . -24) (undo-tree-id5479 . -24) (undo-tree-id5480 . -24) (undo-tree-id5481 . -24) (undo-tree-id5482 . -24) (undo-tree-id5483 . -24) (undo-tree-id5484 . -24) (undo-tree-id5485 . -24) (undo-tree-id5486 . -24) (undo-tree-id5487 . -24) (undo-tree-id5488 . -10) (undo-tree-id5489 . -14) (undo-tree-id5490 . -25) (undo-tree-id5491 . -26) (undo-tree-id5492 . -25) (undo-tree-id5493 . -26) (undo-tree-id5494 . -23) (undo-tree-id5495 . -25) (undo-tree-id5496 . -24) (undo-tree-id5497 . -24) (undo-tree-id5498 . -24) (undo-tree-id5499 . -24) (undo-tree-id5500 . -24) (undo-tree-id5501 . -24) (undo-tree-id5502 . -24) (undo-tree-id5503 . -24) (undo-tree-id5504 . -24) (undo-tree-id5505 . -24) (undo-tree-id5506 . -24) (undo-tree-id5507 . -24) (undo-tree-id5508 . -24) (undo-tree-id5509 . -24) (undo-tree-id5510 . -24) (undo-tree-id5511 . -24) (undo-tree-id5512 . -24) (undo-tree-id5513 . -24) (undo-tree-id5514 . -24) (undo-tree-id5515 . -24) (undo-tree-id5516 . -24) (undo-tree-id5517 . -24) (undo-tree-id5518 . -24) (undo-tree-id5519 . -24) (undo-tree-id5520 . -24) (undo-tree-id5521 . -24) (undo-tree-id5522 . -24) (undo-tree-id5523 . -24) (undo-tree-id5524 . -24) (undo-tree-id5525 . -24) (undo-tree-id5526 . -24) (undo-tree-id5527 . -24) (undo-tree-id5528 . -24) (undo-tree-id5529 . -24) (undo-tree-id5530 . -23) (undo-tree-id5531 . -23) (undo-tree-id5532 . -23) (undo-tree-id5533 . -23) (undo-tree-id5534 . -23) (undo-tree-id5535 . -23) (undo-tree-id5536 . -23) (undo-tree-id5537 . -23) (undo-tree-id5538 . -23) (undo-tree-id5539 . -23) (undo-tree-id5540 . -23) (undo-tree-id5541 . -23) (undo-tree-id5542 . -23) (undo-tree-id5543 . -23) (undo-tree-id5544 . -23) (undo-tree-id5545 . -23) (undo-tree-id5546 . -23) (undo-tree-id5547 . -23) (undo-tree-id5548 . -23) (undo-tree-id5549 . -23) (undo-tree-id5550 . -23) (undo-tree-id5551 . -23) (undo-tree-id5552 . -26) (undo-tree-id5553 . -26) (undo-tree-id5554 . -26) (undo-tree-id5555 . -26) (undo-tree-id5556 . -26) (undo-tree-id5557 . -26) (undo-tree-id5558 . -26) (undo-tree-id5559 . -26) (undo-tree-id5560 . -26) (undo-tree-id5561 . -26) (undo-tree-id5562 . -26) (undo-tree-id5563 . -26) (undo-tree-id5564 . -26) (undo-tree-id5565 . -26) (undo-tree-id5566 . -26) (undo-tree-id5567 . -26) (undo-tree-id5568 . -26) (undo-tree-id5569 . -26) (undo-tree-id5570 . -26) (undo-tree-id5571 . -26) (undo-tree-id5572 . -26) (undo-tree-id5573 . -26) (undo-tree-id5574 . -26) (undo-tree-id5575 . -26) (undo-tree-id5576 . -26) (undo-tree-id5577 . -26) (undo-tree-id5578 . -26) (undo-tree-id5579 . -26) (undo-tree-id5580 . -26) (undo-tree-id5581 . -26) (undo-tree-id5582 . -26) (undo-tree-id5583 . -26) (undo-tree-id5584 . -32) (undo-tree-id5585 . -32) (undo-tree-id5586 . -32) (undo-tree-id5587 . -32) (undo-tree-id5588 . -32) (undo-tree-id5589 . -32) (undo-tree-id5590 . -32) (undo-tree-id5591 . -32) (undo-tree-id5592 . -32) (undo-tree-id5593 . -34) (undo-tree-id5594 . -34) (undo-tree-id5595 . -34) (undo-tree-id5596 . -34) (undo-tree-id5597 . -34) (undo-tree-id5598 . -34) (undo-tree-id5599 . -34) (undo-tree-id5600 . -34) (undo-tree-id5601 . -34) (undo-tree-id5602 . -35) (undo-tree-id5603 . -34) (undo-tree-id5604 . -34) (undo-tree-id5605 . -34) (undo-tree-id5606 . -34) (undo-tree-id5607 . -34) (undo-tree-id5608 . -34) (undo-tree-id5609 . -34) (undo-tree-id5610 . -34) (undo-tree-id5611 . -34) (undo-tree-id5612 . -34) (undo-tree-id5613 . -34) (undo-tree-id5614 . -34) (undo-tree-id5615 . -28) (undo-tree-id5616 . -28) (undo-tree-id5617 . -28) (undo-tree-id5618 . -28) (undo-tree-id5619 . -28) (undo-tree-id5620 . -28) (undo-tree-id5621 . -28) (undo-tree-id5622 . -28) (undo-tree-id5623 . -28) (undo-tree-id5624 . -26) (undo-tree-id5625 . -26) (undo-tree-id5626 . -26) (undo-tree-id5627 . -26) (undo-tree-id5628 . -26) (undo-tree-id5629 . -26) (undo-tree-id5630 . -26) (undo-tree-id5631 . -26) (undo-tree-id5632 . -26) (undo-tree-id5633 . -18) (undo-tree-id5634 . -18) (undo-tree-id5635 . -18) (undo-tree-id5636 . -18) (undo-tree-id5637 . -18) (undo-tree-id5638 . -18) (undo-tree-id5639 . -18) (undo-tree-id5640 . -18) (undo-tree-id5641 . -18) (undo-tree-id5642 . -17) (undo-tree-id5643 . -17) (undo-tree-id5644 . -17) (undo-tree-id5645 . -17) (undo-tree-id5646 . -17) (undo-tree-id5647 . -17) (undo-tree-id5648 . -17) (undo-tree-id5649 . -17) (undo-tree-id5650 . -17) (undo-tree-id5651 . -35)) nil (25962 64216 831573 528000) 0 nil])
([nil nil ((766 . 770)) nil (25962 64216 831333 716000) 0 nil])
([nil nil ((792 . 793) (793 . 797) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 792) (792 . 793) (791 . 793) (789 . 792) (785 . 789) (#("us" 0 2 (fontified nil)) . 785) (785 . 787) (#("user" 0 4 (fontified nil)) . -785) (785 . 789) (#("us" 0 2 (fontified t)) . -785) (undo-tree-id5343 . -2) (undo-tree-id5344 . -2) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -2) (undo-tree-id5384 . -2) (undo-tree-id5385 . -2) (undo-tree-id5386 . -2) (undo-tree-id5387 . -2) (undo-tree-id5388 . -2) (undo-tree-id5389 . -2) (undo-tree-id5390 . -2) (undo-tree-id5391 . -2) (undo-tree-id5392 . -2) (undo-tree-id5393 . -2) (undo-tree-id5394 . -2) (undo-tree-id5395 . -2) (undo-tree-id5396 . -2) (undo-tree-id5397 . -2) (undo-tree-id5398 . -2) (undo-tree-id5399 . -2) (undo-tree-id5400 . -2) (undo-tree-id5401 . -2) (undo-tree-id5402 . -2) (undo-tree-id5403 . -2) (undo-tree-id5404 . -2) (undo-tree-id5405 . -2) (undo-tree-id5406 . -2) (undo-tree-id5407 . -2) (undo-tree-id5408 . -2) (undo-tree-id5409 . -2) (undo-tree-id5410 . -2) (undo-tree-id5411 . -2) (undo-tree-id5412 . -2) (undo-tree-id5413 . -2) 787 (786 . 787) (785 . 786) (784 . 785) (#("=" 0 1 (fontified t)) . -784) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) 785 (783 . 785) (782 . 783) (apply yas--snippet-revive 778 782 #s(yas--snippet nil nil #s(yas--exit 782 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 782 nil) 41 nil nil nil nil)) (778 . 782) (#("None$0" 0 6 (fontified nil)) . 778) (778 . 784) (#("Ne" 0 2 (fontified nil)) . 778) (778 . 780) (#("None" 0 4 (fontified nil)) . -778) (778 . 782) (#("Ne" 0 2 (fontified t face font-lock-type-face)) . -778) (undo-tree-id5416 . -2) (undo-tree-id5417 . -2) 780 (771 . 780) (767 . 771) (#("    " 0 4 (fontified nil)) . 766) (undo-tree-id5418 . -4) (766 . 771) (#("    " 0 4 (fontified nil)) . 765) (undo-tree-id5419 . -4) (769 . 770) (765 . 769)) nil (25962 64216 831328 97000) 0 nil])
([nil nil ((793 . 798) (#("Error" 0 5 (fontified nil)) . 793) (793 . 798) (#("Error" 0 5 (fontified t face font-lock-type-face)) . -793) (undo-tree-id5287 . -1) (undo-tree-id5288 . -5) (undo-tree-id5289 . -5) (undo-tree-id5290 . -5) (undo-tree-id5291 . -5) (undo-tree-id5292 . -5) (undo-tree-id5293 . -5) (undo-tree-id5294 . -5) (undo-tree-id5295 . -5) (undo-tree-id5296 . -5) (undo-tree-id5297 . -5) (undo-tree-id5298 . -5) (undo-tree-id5299 . -5) (undo-tree-id5300 . -5) (undo-tree-id5301 . -5) (undo-tree-id5302 . -5) (undo-tree-id5303 . -5) (undo-tree-id5304 . -5) (undo-tree-id5305 . -5) (undo-tree-id5306 . -5) (undo-tree-id5307 . -5) (undo-tree-id5308 . -5) (undo-tree-id5309 . -5) (undo-tree-id5310 . -5) (undo-tree-id5311 . -5) (undo-tree-id5312 . -5) (undo-tree-id5313 . -5) (undo-tree-id5314 . -5) (undo-tree-id5315 . -5) (undo-tree-id5316 . -5) (undo-tree-id5317 . -5) (undo-tree-id5318 . -5) (undo-tree-id5319 . -5) (undo-tree-id5320 . -5) (undo-tree-id5321 . -5) (undo-tree-id5322 . -5) (undo-tree-id5323 . -5) (undo-tree-id5324 . -5) (undo-tree-id5325 . -5) (undo-tree-id5326 . -5) (undo-tree-id5327 . -5) (undo-tree-id5328 . -5) (undo-tree-id5329 . -5) (undo-tree-id5330 . -5) (undo-tree-id5331 . -5) (undo-tree-id5332 . -5) (undo-tree-id5333 . -5) (undo-tree-id5334 . -5) (undo-tree-id5335 . -5) (undo-tree-id5336 . -5) (undo-tree-id5337 . -5) (undo-tree-id5338 . -5) (undo-tree-id5339 . -5) (undo-tree-id5340 . -5) (undo-tree-id5341 . -5) (undo-tree-id5342 . -5) 798 (794 . 798) (793 . 794)) nil (25962 64216 831134 295000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 793) (undo-tree-id5729 . -4) (undo-tree-id5730 . -4) (t 25962 64216 878333 4000)) nil (25962 64227 630805 210000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face font-lock-type-face)) . -792) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) 793 (792 . 793)) nil (25962 64227 630802 118000) 0 nil])
([nil nil ((797 . 802) (#("Err" 0 3 (fontified nil)) . 797) (undo-tree-id5717 . -3) (797 . 800) (#("Error" 0 5 (fontified nil)) . -797) (undo-tree-id5718 . -5) (797 . 802) (#("Err" 0 3 (fontified t face font-lock-type-face)) . -797) (undo-tree-id5719 . -1) (undo-tree-id5720 . -3) (undo-tree-id5721 . -3) (undo-tree-id5722 . -3) 800 (798 . 800) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 798) (undo-tree-id5723 . -2) (797 . 798) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 797 802 nil nil nil t #s(yas--exit 803 nil))) #s(yas--exit 803 nil) 42 nil #s(yas--field 1 797 802 nil nil nil t #s(yas--exit 803 nil)) nil nil)) (793 . 800) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 793) (793 . 807) (#("Err" 0 3 (fontified nil)) . 793) (793 . 796) (#("Err(…)" 0 6 (fontified nil)) . -793) (793 . 799) (#("Err" 0 3 (fontified t face font-lock-type-face)) . -793) (undo-tree-id5724 . -3) (undo-tree-id5725 . -3) 796 (793 . 796)) nil (25962 64227 630793 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 793 803 #s(yas--snippet nil (#s(yas--field 1 797 802 nil nil nil t #s(yas--exit 803 nil))) #s(yas--exit 803 nil) 42 nil #s(yas--field 1 797 802 nil nil nil t #s(yas--exit 803 nil)) nil nil))) nil (25962 64250 208143 519000) 0 nil])
([nil nil ((802 . 804) (t 25962 64227 642399 24000)) nil (25962 64250 208142 330000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 797) (undo-tree-id5734 . -4) (undo-tree-id5735 . -4)) nil (25962 64250 208140 505000) 0 nil])
([nil nil ((#("::)" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-3-face))) . 797) (undo-tree-id5731 . 1) (undo-tree-id5732 . -2) (undo-tree-id5733 . 1)) nil (25962 64250 208137 716000) 0 nil])
([nil nil ((797 . 798) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -797) (797 . 798)) nil (25962 64250 208120 342000) 0 nil])
([nil nil ((797 . 802) (#("Err" 0 3 (fontified nil)) . 797) (797 . 800) (#("Error" 0 5 (fontified nil)) . -797) (797 . 802) (#("Err" 0 3 (fontified t face font-lock-type-face)) . -797) (undo-tree-id5736 . -1) (undo-tree-id5737 . -3) (undo-tree-id5738 . -3) 800 (797 . 800) (t 25962 64250 214553 414000)) nil (25962 64273 702998 250000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -802) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (#(":" 0 1 (fontified t)) . -803) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) 804 (802 . 804) (t 25962 64273 710736 248000)) nil (25962 64298 332586 667000) 0 nil])
([nil nil ((805 . 810) (806 . 807) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-4-face))) . 805) (805 . 810) (804 . 806) (802 . 805) (t 25962 64298 346951 96000)) nil (25962 64331 641924 733000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -810) (undo-tree-id6054 . -1) 811 (810 . 811) (#("r" 0 1 (fontified t)) . -810) (undo-tree-id6055 . -1) 811 (810 . 811) (#("r" 0 1 (fontified t)) . -810) (undo-tree-id6056 . -1) 811 (810 . 811)) nil (25962 64331 641921 667000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -810) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (#("y" 0 1 (fontified t)) . -811) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) 812 (810 . 812)) nil (25962 64331 641910 787000) 0 nil])
([nil nil ((#("
    if let None = user {
	Err(Error {
	    
	})
    }" 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-type-face) 16 19 (fontified t) 19 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t) 26 27 (fontified t) 27 30 (fontified t face font-lock-type-face) 30 31 (fontified t face (rainbow-delimiters-depth-3-face)) 31 36 (fontified t face font-lock-type-face) 36 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-4-face)) 38 39 (fontified t) 39 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-4-face)) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 49 (fontified t) 49 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face))) . 766) (undo-tree-id6144 . 10) (undo-tree-id6145 . -53) (undo-tree-id6146 . -40) (undo-tree-id6147 . -53) (undo-tree-id6148 . -53) (undo-tree-id6149 . 10) (undo-tree-id6150 . -40) (undo-tree-id6151 . -5) (undo-tree-id6152 . -54) (undo-tree-id6153 . -31) (undo-tree-id6154 . -36) (undo-tree-id6155 . -31) (undo-tree-id6156 . -36) (undo-tree-id6157 . -27) (undo-tree-id6158 . -48) (undo-tree-id6159 . -27) (undo-tree-id6160 . -28) (undo-tree-id6161 . -54) (undo-tree-id6162 . -53) (undo-tree-id6163 . -5) (undo-tree-id6164 . -5) (undo-tree-id6165 . -5) (undo-tree-id6166 . -54) (t 25962 64331 687277 628000)) nil (25962 64355 422925 229000) 0 nil])
([nil nil ((#("Result" 0 6 (fontified t face font-lock-type-face)) . 505) (undo-tree-id6142 . -5) (undo-tree-id6143 . -6)) nil (25962 64355 422778 254000) 0 nil])
([nil nil ((#("<(), " 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 5 (fontified t)) . 505) (undo-tree-id6140 . -4) (undo-tree-id6141 . -5)) nil (25962 64355 422775 692000) 0 nil])
([nil nil ((#("Error" 0 5 (fontified t face font-lock-type-face)) . 505) (undo-tree-id6138 . -4) (undo-tree-id6139 . -5)) nil (25962 64355 422773 620000) 0 nil])
([nil nil ((#("> " 0 1 (fontified t syntax-table (1)) 1 2 (fontified t)) . 505) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -2) (undo-tree-id6137 . -2)) nil (25962 64355 422771 658000) 0 nil])
([nil nil ((512 . 514) (apply yas--snippet-revive 505 513 #s(yas--snippet nil nil #s(yas--exit 512 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 512 nil) 43 nil nil nil nil)) (505 . 513) (#("Option<$0>" 0 10 (fontified nil)) . 505) (505 . 515) (#("Op" 0 2 (fontified nil)) . 505) (505 . 507) (#("Option<…>" 0 9 (fontified nil)) . -505) (505 . 514) (#("Op" 0 2 (fontified t face font-lock-type-face)) . -505) (undo-tree-id6110 . -1) (undo-tree-id6111 . -2) (undo-tree-id6112 . -2) (undo-tree-id6113 . -2) (undo-tree-id6114 . -2) (undo-tree-id6115 . -2) (undo-tree-id6116 . -2) (undo-tree-id6117 . -2) (undo-tree-id6118 . -2) (undo-tree-id6119 . -2) (undo-tree-id6120 . -2) (undo-tree-id6121 . -2) (undo-tree-id6122 . -2) (undo-tree-id6123 . -2) (undo-tree-id6124 . -2) (undo-tree-id6125 . -2) (undo-tree-id6126 . -2) (undo-tree-id6127 . -2) (undo-tree-id6128 . -2) (undo-tree-id6129 . -2) (undo-tree-id6130 . -2) (undo-tree-id6131 . -2) (undo-tree-id6132 . -2) (undo-tree-id6133 . -2) 507 (505 . 507)) nil (25962 64355 422766 234000) 0 nil])
([nil nil ((515 . 516)) nil (25962 64355 422745 524000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t face rust-question-mark)) . 589) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1)) nil (25962 64355 422743 740000) 0 nil])
([nil nil ((594 . 595) (apply yas--snippet-revive 590 594 #s(yas--snippet nil nil #s(yas--exit 594 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 594 nil) 44 nil nil nil nil)) (590 . 594) (#("ok()$0" 0 6 (fontified nil)) . 590) (590 . 596) (#("o" 0 1 (fontified nil)) . 590) (590 . 591) (#("ok()" 0 4 (fontified nil)) . -590) (590 . 594) (#("o" 0 1 (fontified t)) . -590) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) 591 (589 . 591)) nil (25962 64355 422728 80000) 0 nil])
([nil nil ((#("    Ok(())
" 0 4 (fontified t) 4 6 (fontified t face font-lock-type-face) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (rainbow-delimiters-depth-3-face)) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t)) . 770) (undo-tree-id6223 . -10) (undo-tree-id6224 . -9) (undo-tree-id6225 . -4) (undo-tree-id6226 . -10) (undo-tree-id6227 . -9) (undo-tree-id6228 . -9) (undo-tree-id6229 . -9) (undo-tree-id6230 . -9) (undo-tree-id6231 . -9) (undo-tree-id6232 . -9) (undo-tree-id6233 . -9) (undo-tree-id6234 . -9) (undo-tree-id6235 . -9) (undo-tree-id6236 . -9) (undo-tree-id6237 . -9) (undo-tree-id6238 . -9) (undo-tree-id6239 . -9) (undo-tree-id6240 . -9) (undo-tree-id6241 . -9) (undo-tree-id6242 . -9) (undo-tree-id6243 . -9) (undo-tree-id6244 . -9) (undo-tree-id6245 . -9) (undo-tree-id6246 . -9) (undo-tree-id6247 . -9) (undo-tree-id6248 . -9) (undo-tree-id6249 . -9) (undo-tree-id6250 . -9) (undo-tree-id6251 . -9) (undo-tree-id6252 . -9) (undo-tree-id6253 . -9) (undo-tree-id6254 . -9) (undo-tree-id6255 . -9) (undo-tree-id6256 . -9) (undo-tree-id6257 . -11) 779 (t 25962 64355 427533 923000)) nil (25962 64363 697722 231000) 0 nil])
([nil nil ((776 . 777) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 776) (undo-tree-id6167 . -2) (undo-tree-id6168 . -1) (775 . 776) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 775 777 nil nil nil t #s(yas--exit 778 nil))) #s(yas--exit 778 nil) 45 nil #s(yas--field 1 775 777 nil nil nil t #s(yas--exit 778 nil)) nil nil)) (770 . 778) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 770) (770 . 785) (#("S" 0 1 (fontified nil)) . 770) (770 . 771) (#("Some(…)" 0 7 (fontified nil)) . -770) (770 . 777) (#("S" 0 1 (fontified t face font-lock-type-face)) . -770) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) 771 (770 . 771) (766 . 770) (#("    " 0 4 (fontified nil)) . 765) (undo-tree-id6222 . -4) (769 . 770)) nil (25962 64363 697698 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 770 778 #s(yas--snippet nil (#s(yas--field 1 775 777 nil nil nil t #s(yas--exit 778 nil))) #s(yas--exit 778 nil) 45 nil #s(yas--field 1 775 777 nil nil nil t #s(yas--exit 778 nil)) nil nil))) nil (25962 64363 697647 246000) 0 nil])
([nil nil ((761 . 762) (t 25962 64363 711627 815000)) nil (25962 64369 483714 933000) 0 nil])
([nil nil ((767 . 771) (#("    " 0 4 (fontified nil)) . 766) (undo-tree-id6351 . -4) (undo-tree-id6352 . -4) (undo-tree-id6353 . -4) (undo-tree-id6354 . -4) (undo-tree-id6355 . -4) (undo-tree-id6356 . -4) (undo-tree-id6357 . -4) (undo-tree-id6358 . -4) (undo-tree-id6359 . -4) (undo-tree-id6360 . -4) (undo-tree-id6361 . -4) (undo-tree-id6362 . -4) (undo-tree-id6363 . -4) (766 . 771) (#("    " 0 4 (fontified nil)) . 765) (undo-tree-id6364 . -4) (undo-tree-id6365 . -4) (undo-tree-id6366 . -4) (undo-tree-id6367 . -4) (undo-tree-id6368 . -4) (undo-tree-id6369 . -4) (undo-tree-id6370 . -4) (undo-tree-id6371 . -4) (undo-tree-id6372 . -4) (undo-tree-id6373 . -4) (undo-tree-id6374 . -4) (undo-tree-id6375 . -4) (769 . 770) (765 . 769) (t 25962 64369 531695 127000)) nil (25962 64430 30103 647000) 0 nil])
([nil nil ((766 . 770)) nil (25962 64430 30087 639000) 0 nil])
([nil nil ((829 . 830) (apply yas--snippet-revive 821 829 #s(yas--snippet nil nil #s(yas--exit 829 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 829 nil) 49 nil nil nil nil)) (821 . 829) (#("unwrap()$0" 0 10 (fontified nil)) . 821) (821 . 831) (#("un" 0 2 (fontified nil)) . 821) (821 . 823) (#("unwrap()" 0 8 (fontified nil)) . -821) (821 . 829) (#("un" 0 2 (fontified t)) . -821) (undo-tree-id6258 . -2) (undo-tree-id6259 . -2) (undo-tree-id6260 . -2) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -2) (undo-tree-id6292 . -2) (undo-tree-id6293 . -2) (undo-tree-id6294 . -2) (undo-tree-id6295 . -2) (undo-tree-id6296 . -2) (undo-tree-id6297 . -2) (undo-tree-id6298 . -2) (undo-tree-id6299 . -2) (undo-tree-id6300 . -2) (undo-tree-id6301 . -2) (undo-tree-id6302 . -2) (undo-tree-id6303 . -2) (undo-tree-id6304 . -2) (undo-tree-id6305 . -2) (undo-tree-id6306 . -2) (undo-tree-id6307 . -2) (undo-tree-id6308 . -2) (undo-tree-id6309 . -2) (undo-tree-id6310 . -2) (undo-tree-id6311 . -2) (undo-tree-id6312 . -2) (undo-tree-id6313 . -2) (undo-tree-id6314 . -2) (undo-tree-id6315 . -2) (undo-tree-id6316 . -2) (undo-tree-id6317 . -2) (undo-tree-id6318 . -2) (undo-tree-id6319 . -2) (undo-tree-id6320 . -2) (undo-tree-id6321 . -2) 823 (820 . 823) (apply yas--snippet-revive 812 820 #s(yas--snippet nil nil #s(yas--exit 820 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 820 nil) 48 nil nil nil nil)) (812 . 820) (#("unwrap()$0" 0 10 (fontified nil)) . 812) (812 . 822) (#("un" 0 2 (fontified nil)) . 812) (812 . 814) (#("unwrap()" 0 8 (fontified nil)) . -812) (812 . 820) (#("un" 0 2 (fontified t)) . -812) (undo-tree-id6322 . -1) (undo-tree-id6323 . -2) (undo-tree-id6324 . -2) 814 (811 . 814) (apply yas--snippet-revive 805 811 #s(yas--snippet nil nil #s(yas--exit 811 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 811 nil) 47 nil nil nil nil)) (805 . 811) (#("next()$0" 0 8 (fontified nil)) . 805) (805 . 813) (#("ne" 0 2 (fontified nil)) . 805) (805 . 807) (#("next() (as Iterator)" 0 20 (fontified nil)) . -805) (805 . 825) (#("ne" 0 2 (fontified t)) . -805) (undo-tree-id6325 . -2) (undo-tree-id6326 . -2) (undo-tree-id6327 . -2) 807 (804 . 807) (apply yas--snippet-revive 797 804 #s(yas--snippet nil nil #s(yas--exit 804 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 804 nil) 46 nil nil nil nil)) (797 . 804) (#("lines()$0" 0 9 (fontified nil)) . 797) (797 . 806) (#("li" 0 2 (fontified nil)) . 797) (797 . 799) (#("lines() (as BufRead)" 0 20 (fontified nil)) . -797) (797 . 817) (#("li" 0 2 (fontified t)) . -797) (undo-tree-id6328 . -1) (undo-tree-id6329 . -2) (undo-tree-id6330 . -2) 799 (796 . 799) (#(";" 0 1 (fontified t)) . -796) (undo-tree-id6331 . -1) 797 (796 . 797) (786 . 796) (#("bu" 0 2 (fontified nil)) . 786) (786 . 788) (#("buf_reader" 0 10 (fontified nil)) . -786) (786 . 796) (#("bu" 0 2 (fontified t)) . -786) (undo-tree-id6332 . -2) (undo-tree-id6333 . -2) (undo-tree-id6334 . -2) 788 (778 . 788) (776 . 778) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -776) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) 777 (769 . 777) (#("l" 0 1 (fontified t)) . -769) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (#("e" 0 1 (fontified t)) . -770) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -771) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) 772 (769 . 772) (#("l" 0 1 (fontified t)) . -769) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (#("e" 0 1 (fontified t)) . -770) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -771) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (#(" " 0 1 (fontified t)) . -772) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) 773 (769 . 773) (765 . 769)) nil (25962 64430 30075 694000) 0 nil])
([nil nil ((670 . 671) (t 25962 64430 60457 948000)) nil (25962 64446 294697 742000) 0 nil])
([nil nil ((670 . 672) (t 25962 64446 312681 262000)) nil (25962 64453 349851 498000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 671) (undo-tree-id6376 . 1) (undo-tree-id6377 . 1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1)) nil (25962 64453 349849 982000) 0 nil])
([nil nil ((682 . 683) (#(")" 0 1 (fontified nil)) . -682) (682 . 683)) nil (25962 64453 349831 975000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 671) (undo-tree-id6398 . 1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (t 25962 64453 364780 462000)) nil (25962 64461 576646 150000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 670) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1)) nil (25962 64461 576641 791000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 680) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1)) nil (25962 64461 576629 91000) 0 nil])
([nil nil ((#("    let magnetline = buf_reader.lines().next().unwrap().unwrap();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 18 (fontified t face font-lock-variable-name-face) 18 21 (fontified t) 21 32 (fontified t) 32 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 47 (fontified t) 47 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 56 (fontified t) 56 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-2-face)) 63 64 (fontified t face (rainbow-delimiters-depth-2-face)) 64 65 (fontified t) 65 66 (fontified t)) . 765) (undo-tree-id6401 . -65) (undo-tree-id6402 . -30) (undo-tree-id6403 . -30) (undo-tree-id6404 . -8) (undo-tree-id6405 . -18) (undo-tree-id6406 . -8) (undo-tree-id6407 . -18) (undo-tree-id6408 . -21) (undo-tree-id6409 . -31) (undo-tree-id6410 . -30) (undo-tree-id6411 . -30) (undo-tree-id6412 . -30) (undo-tree-id6413 . -30) (undo-tree-id6414 . -30) (undo-tree-id6415 . -30) (undo-tree-id6416 . -30) (undo-tree-id6417 . -30) (undo-tree-id6418 . -30) (undo-tree-id6419 . -30) (undo-tree-id6420 . -30) (undo-tree-id6421 . -30) (undo-tree-id6422 . -30) (undo-tree-id6423 . -30) (undo-tree-id6424 . -30) (undo-tree-id6425 . -30) (undo-tree-id6426 . -30) (undo-tree-id6427 . -30) (undo-tree-id6428 . -30) (undo-tree-id6429 . -30) (undo-tree-id6430 . -30) (undo-tree-id6431 . -30) (undo-tree-id6432 . -30) (undo-tree-id6433 . -30) (undo-tree-id6434 . -30) (undo-tree-id6435 . -30) (undo-tree-id6436 . -30) (undo-tree-id6437 . -30) (undo-tree-id6438 . -30) (undo-tree-id6439 . -21) (undo-tree-id6440 . -31) (undo-tree-id6441 . -30) (undo-tree-id6442 . -30) (undo-tree-id6443 . -30) (undo-tree-id6444 . -30) (undo-tree-id6445 . -30) (undo-tree-id6446 . -30) (undo-tree-id6447 . -30) (undo-tree-id6448 . -30) (undo-tree-id6449 . -30) (undo-tree-id6450 . -30) (undo-tree-id6451 . -30) (undo-tree-id6452 . -30) (undo-tree-id6453 . -30) (undo-tree-id6454 . -30) (undo-tree-id6455 . -30) (undo-tree-id6456 . -30) (undo-tree-id6457 . -30) (undo-tree-id6458 . -30) (undo-tree-id6459 . -30) (undo-tree-id6460 . -30) (undo-tree-id6461 . -30) (undo-tree-id6462 . -30) (undo-tree-id6463 . -30) (undo-tree-id6464 . -30) (undo-tree-id6465 . -30) (undo-tree-id6466 . -30) (undo-tree-id6467 . -30) (undo-tree-id6468 . -30) (undo-tree-id6469 . -30) (undo-tree-id6470 . -30) (undo-tree-id6471 . -30) (undo-tree-id6472 . -30) (undo-tree-id6473 . -30) (undo-tree-id6474 . -30) (undo-tree-id6475 . -30) (undo-tree-id6476 . -66) 795 (t 25962 64461 592897 932000)) nil (25962 64465 848608 388000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -668) (undo-tree-id6483 . -1) 669 (667 . 669) (t 25962 64465 892960 51000)) nil (25962 64487 591005 10000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 667)) nil (25962 64487 591003 109000) 0 nil])
([nil nil ((#(".next().unwrap().unwrap();" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-2-face)) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t) 8 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t)) . 688)) nil (25962 64487 591001 911000) 0 nil])
([nil nil ((706 . 707) (apply yas--snippet-revive 697 706 #s(yas--snippet nil nil #s(yas--exit 706 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 706 nil) 51 nil nil nil nil)) (697 . 706) (#("collect()$0" 0 11 (fontified nil)) . 697) (697 . 708) (#("col" 0 3 (fontified nil)) . 697) (697 . 700) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -697) (697 . 720) (#("col" 0 3 (fontified t)) . -697) (undo-tree-id6477 . -2) (undo-tree-id6478 . -3) (undo-tree-id6479 . -3) 700 (698 . 700) (697 . 698) (696 . 697) (apply yas--snippet-revive 689 696 #s(yas--snippet nil (#s(yas--field 1 694 695 nil nil nil t #s(yas--exit 696 nil))) #s(yas--exit 696 nil) 50 nil #s(yas--field 1 694 695 nil nil nil t #s(yas--exit 696 nil)) nil nil)) (#("n" 0 1 (fontified nil)) . 695) (694 . 695) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 694 695 nil nil nil t #s(yas--exit 696 nil))) #s(yas--exit 696 nil) 50 nil #s(yas--field 1 694 695 nil nil nil t #s(yas--exit 696 nil)) nil nil)) (689 . 696) (#("take(${1:n})$0" 0 14 (fontified nil)) . 689) (689 . 703) (#("ta" 0 2 (fontified nil)) . 689) (689 . 691) (#("take(…) (as Iterator)" 0 21 (fontified nil)) . -689) (689 . 710) (#("ta" 0 2 (fontified t)) . -689) (undo-tree-id6480 . -2) (undo-tree-id6481 . -2) (undo-tree-id6482 . -2) 691 (688 . 691)) nil (25962 64487 590995 806000) 0 nil])
([nil nil ((674 . 680) (#("St" 0 2 (fontified nil)) . 674) (674 . 676) (#("String" 0 6 (fontified nil)) . -674) (674 . 680) (#("St" 0 2 (fontified t face font-lock-type-face)) . -674) (undo-tree-id6484 . -2) (undo-tree-id6485 . -2) (undo-tree-id6486 . -2) (undo-tree-id6487 . -2) (undo-tree-id6488 . -2) (undo-tree-id6489 . -2) (undo-tree-id6490 . -2) (undo-tree-id6491 . -2) (undo-tree-id6492 . -2) (undo-tree-id6493 . -2) (undo-tree-id6494 . -2) (undo-tree-id6495 . -2) (undo-tree-id6496 . -2) (undo-tree-id6497 . -2) 676 (674 . 676) (apply yas--snippet-revive 670 675 #s(yas--snippet nil nil #s(yas--exit 674 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 674 nil) 52 nil nil nil nil)) (670 . 675) (#("Vec<$0>" 0 7 (fontified nil)) . 670) (670 . 677) (#("Ve" 0 2 (fontified nil)) . 670) (670 . 672) (#("Vec<…>" 0 6 (fontified nil)) . -670) (670 . 676) (#("Ve" 0 2 (fontified t)) . -670) (undo-tree-id6498 . -2) (undo-tree-id6499 . -2) 672 (668 . 672) (t 25962 64487 629281 576000)) nil (25962 64499 23062 4000) 0 nil])
([nil nil ((681 . 682) (t 25962 64499 37455 214000)) nil (25962 64500 817260 119000) 0 nil])
([nil nil ((707 . 709) (#("l" 0 1 (fontified t)) . -707) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) 708 (707 . 708) (#("\\" 0 1 (fontified t)) . -707) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) 708 (#("f" 0 1 (fontified nil)) . 708) (undo-tree-id6602 . -1) (707 . 708) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil))) #s(yas--exit 722 nil) 53 nil #s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil)) nil nil)) (703 . 709) (#("map(${1:f})$0" 0 13 (fontified nil)) . 703) (703 . 716) (#("ma" 0 2 (fontified nil)) . 703) (703 . 705) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -703) (703 . 723) (#("ma" 0 2 (fontified t)) . -703) (undo-tree-id6603 . -2) (undo-tree-id6604 . -2) (undo-tree-id6605 . -2) 705 (702 . 705) (t 25962 64500 829482 790000)) nil (25962 64535 911003 504000) 0 nil])
([nil nil ((708 . 709)) nil (25962 64535 910994 963000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 708) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1)) nil (25962 64535 910993 320000) 0 nil])
([nil nil ((708 . 709)) nil (25962 64535 910972 993000) 0 nil])
([nil nil ((apply yas--snippet-revive 713 721 #s(yas--snippet nil nil #s(yas--exit 721 nil) 54 nil nil #s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 721 nil) 54 nil nil #s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil)) nil)) (713 . 721) (#("unwrap()$0" 0 10 (fontified nil)) . 713) (undo-tree-id6500 . -10) (713 . 723) (#("un" 0 2 (fontified nil)) . 713) (undo-tree-id6501 . -2) (713 . 715) (#("unwrap()" 0 8 (fontified nil)) . -713) (undo-tree-id6502 . -8) (713 . 721) (#("un" 0 2 (fontified t)) . -713) (undo-tree-id6503 . -2) (undo-tree-id6504 . -2) (undo-tree-id6505 . -2) (undo-tree-id6506 . -2) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -2) (undo-tree-id6538 . -2) (undo-tree-id6539 . -2) (undo-tree-id6540 . -2) (undo-tree-id6541 . -2) (undo-tree-id6542 . -2) (undo-tree-id6543 . -2) (undo-tree-id6544 . -2) (undo-tree-id6545 . -2) (undo-tree-id6546 . -2) (undo-tree-id6547 . -2) (undo-tree-id6548 . -2) (undo-tree-id6549 . -2) (undo-tree-id6550 . -2) (undo-tree-id6551 . -2) (undo-tree-id6552 . -2) (undo-tree-id6553 . -2) (undo-tree-id6554 . -2) (undo-tree-id6555 . -2) (undo-tree-id6556 . -2) (undo-tree-id6557 . -2) (undo-tree-id6558 . -2) (undo-tree-id6559 . -2) (undo-tree-id6560 . -2) (undo-tree-id6561 . -2) (undo-tree-id6562 . -2) (undo-tree-id6563 . -2) (undo-tree-id6564 . -2) (undo-tree-id6565 . -2) (undo-tree-id6566 . -2) (undo-tree-id6567 . -2) 715 (710 . 715)) nil (25962 64535 910966 235000) 0 nil])
([nil nil ((apply yas--snippet-revive 703 722 #s(yas--snippet nil (#s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil))) #s(yas--exit 722 nil) 53 nil #s(yas--field 1 707 721 nil nil nil t #s(yas--exit 722 nil)) nil nil))) nil (25962 64556 363478 891000) 0 nil])
([nil nil ((694 . 696) (t 25962 64535 918038 581000)) nil (25962 64556 363477 877000) 0 nil])
([nil nil ((704 . 706)) nil (25962 64556 363475 870000) 0 nil])
([nil nil ((726 . 728)) nil (25962 64556 363474 438000) 0 nil])
([nil nil ((736 . 738)) nil (25962 64556 363469 770000) 0 nil])
([nil nil ((750 . 754) (t 25962 64556 406376 555000)) nil (25962 64570 137 853000) 0 nil])
([nil nil ((#("    let user = map.get_key_value(&user_line)?;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 19 (fontified t) 19 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 34 (fontified t face rust-ampersand-face) 34 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t face rust-question-mark) 45 46 (fontified t) 46 47 (fontified t)) . 756) (undo-tree-id6606 . -46) (undo-tree-id6607 . -3) (undo-tree-id6608 . -33) (undo-tree-id6609 . -43) (undo-tree-id6610 . -19) (undo-tree-id6611 . -32) (undo-tree-id6612 . -3) (undo-tree-id6613 . -3) (undo-tree-id6614 . -3) (undo-tree-id6615 . -3) (undo-tree-id6616 . -3) (undo-tree-id6617 . -3) (undo-tree-id6618 . -3) (undo-tree-id6619 . -3) (undo-tree-id6620 . -3) (undo-tree-id6621 . -47) (undo-tree-id6622 . -47) (undo-tree-id6623 . -47) (undo-tree-id6624 . -47) (undo-tree-id6625 . -47) (undo-tree-id6626 . -47) (undo-tree-id6627 . -47) (undo-tree-id6628 . -47) (undo-tree-id6629 . -47) (undo-tree-id6630 . -3) (undo-tree-id6631 . -3) (undo-tree-id6632 . -3) (undo-tree-id6633 . -3) (undo-tree-id6634 . -3) (undo-tree-id6635 . -3) (undo-tree-id6636 . -3) (undo-tree-id6637 . -3) (undo-tree-id6638 . -3) (undo-tree-id6639 . -3) (undo-tree-id6640 . -3) (undo-tree-id6641 . -3) (undo-tree-id6642 . -3) (undo-tree-id6643 . -3) (undo-tree-id6644 . -3) (undo-tree-id6645 . -3) (undo-tree-id6646 . -3) (undo-tree-id6647 . -3) (undo-tree-id6648 . -3) (undo-tree-id6649 . -3) (undo-tree-id6650 . -3) (undo-tree-id6651 . -3) (undo-tree-id6652 . -3) (undo-tree-id6653 . -3) (undo-tree-id6654 . -3) (undo-tree-id6655 . -3) (undo-tree-id6656 . -3) (undo-tree-id6657 . -3) (undo-tree-id6658 . -3) (undo-tree-id6659 . -3) (undo-tree-id6660 . -3) (undo-tree-id6661 . -3) (undo-tree-id6662 . -3) (undo-tree-id6663 . -3) (undo-tree-id6664 . -3) (undo-tree-id6665 . -3) (undo-tree-id6666 . -3) (undo-tree-id6667 . -3) (undo-tree-id6668 . -3) (undo-tree-id6669 . -3) (undo-tree-id6670 . -3) (undo-tree-id6671 . -3) (undo-tree-id6672 . -3) (undo-tree-id6673 . -3) (undo-tree-id6674 . -3) (undo-tree-id6675 . -3) (undo-tree-id6676 . -3) (undo-tree-id6677 . -3) (undo-tree-id6678 . -3) (undo-tree-id6679 . -3) (undo-tree-id6680 . -3) (undo-tree-id6681 . -3) (undo-tree-id6682 . -47) 759) nil (25962 64570 131 466000) 0 nil])
([nil nil ((756 . 760) (t 25962 64570 14606 273000)) nil (25962 64603 434228 677000) 0 nil])
([nil nil ((789 . 798) (#("us" 0 2 (fontified nil)) . 789) (undo-tree-id6709 . -2) (789 . 791) (#("user_line" 0 9 (fontified nil)) . -789) (undo-tree-id6710 . -9) (789 . 798) (#("us" 0 2 (fontified t)) . -789) (undo-tree-id6711 . -2) (undo-tree-id6712 . -2) (undo-tree-id6713 . -2) 791 (790 . 791) (#("k" 0 1 (fontified nil)) . 790) (undo-tree-id6714 . -1) (789 . 790) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 789 798 nil nil nil t #s(yas--exit 799 nil))) #s(yas--exit 799 nil) 55 nil #s(yas--field 1 789 798 nil nil nil t #s(yas--exit 799 nil)) nil nil)) (775 . 791) (#("get_key_value(${1:k})$0" 0 23 (fontified nil)) . 775) (775 . 798) (#("ke" 0 2 (fontified nil)) . 775) (775 . 777) (#("get_key_value(…)" 0 16 (fontified nil)) . -775) (775 . 791) (#("ke" 0 2 (fontified t)) . -775) (undo-tree-id6715 . -1) (undo-tree-id6716 . -2) (undo-tree-id6717 . -2) 777 (774 . 777) (771 . 774) (#("ma" 0 2 (fontified nil)) . 771) (771 . 773) (#("map" 0 3 (fontified nil)) . -771) (771 . 774) (#("ma" 0 2 (fontified t)) . -771) (undo-tree-id6718 . -2) (undo-tree-id6719 . -2) (undo-tree-id6720 . -2) 773 (760 . 773)) nil (25962 64603 434224 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 775 799 #s(yas--snippet nil (#s(yas--field 1 789 798 nil nil nil t #s(yas--exit 799 nil))) #s(yas--exit 799 nil) 55 nil #s(yas--field 1 789 798 nil nil nil t #s(yas--exit 799 nil)) nil nil))) nil (25962 64603 434213 754000) 0 nil])
([nil nil ((#("user" 0 4 (fontified t face font-lock-variable-name-face)) . 658) (undo-tree-id6707 . -3) (undo-tree-id6708 . -4)) nil (25962 64603 434212 805000) 0 nil])
([nil nil ((659 . 661) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -659) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) 660 (659 . 660) (658 . 659)) nil (25962 64603 434208 402000) 0 nil])
([nil nil ((666 . 667)) nil (25962 64603 434179 374000) 0 nil])
([nil nil ((#("user" 0 4 (fontified t)) . 789) (undo-tree-id7104 . -3) (undo-tree-id7105 . -4) (t 25962 64603 451187 708000)) nil (25962 64634 271909 485000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 789) (undo-tree-id7103 . -1)) nil (25962 64634 271907 384000) 0 nil])
([nil nil ((#("line" 0 4 (fontified t)) . 789) (undo-tree-id7100 . -3) (undo-tree-id7101 . -4) (undo-tree-id7102 . -4)) nil (25962 64634 271905 860000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -789) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) 790 (#("i" 0 1 (fontified t)) . -790) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) 791 (789 . 791) (#("l" 0 1 (fontified t)) . -789) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) 790 (#("i" 0 1 (fontified t)) . -790) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) 791 (789 . 791) (#("i" 0 1 (fontified t)) . -789) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) 790 (789 . 790) (#("l" 0 1 (fontified t)) . -789) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (#("i" 0 1 (fontified t)) . -790) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) 791 (789 . 791)) nil (25962 64634 271896 99000) 0 nil])
([nil nil ((752 . 756) (#("    " 0 4 (fontified nil)) . 751) (undo-tree-id6855 . -4) (undo-tree-id6856 . -4) (undo-tree-id6857 . -4) (undo-tree-id6858 . -4) (undo-tree-id6859 . -4) (undo-tree-id6860 . -4) (undo-tree-id6861 . -4) (undo-tree-id6862 . -4) (undo-tree-id6863 . -4) (undo-tree-id6864 . -4) (undo-tree-id6865 . -4) (undo-tree-id6866 . -4) (752 . 756) (#("    " 0 4 (fontified nil)) . 750) (undo-tree-id6867 . -3) (753 . 754) (753 . 754)) nil (25962 64634 271726 927000) 0 nil])
([nil nil ((766 . 768) (765 . 767) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -765) (765 . 766) (apply yas--snippet-revive 756 766 #s(yas--snippet nil nil #s(yas--exit 765 nil) 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 765 nil) 56 nil nil nil nil)) (756 . 766) (#("println!($0)" 0 12 (fontified nil)) . 756) (756 . 768) (#("pr" 0 2 (fontified nil)) . 756) (756 . 758) (#("println!(…)" 0 11 (fontified nil)) . -756) (756 . 767) (#("pr" 0 2 (fontified t)) . -756) (undo-tree-id6827 . -2) (undo-tree-id6828 . -2) (undo-tree-id6829 . -2) (undo-tree-id6830 . -2) (undo-tree-id6831 . -2) (undo-tree-id6832 . -2) (undo-tree-id6833 . -2) (undo-tree-id6834 . -2) (undo-tree-id6835 . -2) (undo-tree-id6836 . -2) (undo-tree-id6837 . -2) (undo-tree-id6838 . -2) (undo-tree-id6839 . -2) (undo-tree-id6840 . -2) (undo-tree-id6841 . -2) (undo-tree-id6842 . -2) (undo-tree-id6843 . -2) (undo-tree-id6844 . -2) (undo-tree-id6845 . -2) (undo-tree-id6846 . -2) (undo-tree-id6847 . -2) (undo-tree-id6848 . -2) (undo-tree-id6849 . -2) (undo-tree-id6850 . -2) (undo-tree-id6851 . -2) (undo-tree-id6852 . -2) (undo-tree-id6853 . -2) (undo-tree-id6854 . -2) 758 (756 . 758)) nil (25962 64634 271716 243000) 0 nil])
([nil nil ((769 . 771)) nil (25962 64634 271698 169000) 0 nil])
([nil nil ((767 . 769)) nil (25962 64634 271697 526000) 0 nil])
([nil nil ((773 . 782) (#("t" 0 1 (fontified nil)) . 773) (773 . 774) (#("two_lines" 0 9 (fontified nil)) . -773) (773 . 782) (#("t" 0 1 (fontified t)) . -773) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) 774 (773 . 774)) nil (25962 64634 271691 940000) 0 nil])
([nil nil ((783 . 784)) nil (25962 64634 271568 436000) 0 nil])
([nil nil ((767 . 768) (t 25962 64634 287744 281000)) nil (25962 64661 65972 146000) 0 nil])
([nil nil ((836 . 837) (apply yas--snippet-revive 830 836 #s(yas--snippet nil (#s(yas--field 1 834 835 nil nil nil t #s(yas--exit 836 nil))) #s(yas--exit 836 nil) 57 nil #s(yas--field 1 834 835 nil nil nil t #s(yas--exit 836 nil)) nil nil)) (#("index" 0 5 (fontified nil)) . 835) (undo-tree-id7106 . -5) (834 . 835) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 834 835 nil nil nil t #s(yas--exit 836 nil))) #s(yas--exit 836 nil) 57 nil #s(yas--field 1 834 835 nil nil nil t #s(yas--exit 836 nil)) nil nil)) (830 . 840) (#("get(${1:index})$0" 0 17 (fontified nil)) . 830) (830 . 847) (#("ge" 0 2 (fontified nil)) . 830) (830 . 832) (#("get(…)" 0 6 (fontified nil)) . -830) (830 . 836) (#("ge" 0 2 (fontified t)) . -830) (undo-tree-id7107 . -2) (undo-tree-id7108 . -2) (undo-tree-id7109 . -2) 832 (830 . 832) (829 . 830) (820 . 829) (#("tw" 0 2 (fontified nil)) . 820) (820 . 822) (#("two_lines" 0 9 (fontified nil)) . -820) (820 . 829) (#("tw" 0 2 (fontified t)) . -820) (undo-tree-id7110 . -2) (undo-tree-id7111 . -2) (undo-tree-id7112 . -2) 822 (821 . 822) (820 . 821) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (#("s" 0 1 (fontified t)) . -821) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) 822 (820 . 822) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (#("s" 0 1 (fontified t)) . -821) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) 822 (820 . 822) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (#("s" 0 1 (fontified t)) . -821) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) 822 (820 . 822) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (#("s" 0 1 (fontified t)) . -821) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) 822 (820 . 822) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (#("u" 0 1 (fontified t)) . -821) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) 822 (821 . 822) (#("s" 0 1 (fontified t)) . -821) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -822) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) 823 (822 . 823) (820 . 822) (t 25962 64661 108243 331000)) nil (25962 64695 859720 243000) 0 nil])
([nil nil ((838 . 839) (t 25962 64695 904910 341000)) nil (25962 64701 304647 855000) 0 nil])
([nil nil ((838 . 839) (t 25962 64701 345016 531000)) nil (25962 64740 334654 196000) 0 nil])
([nil nil ((801 . 803) (795 . 801) (t 25962 64740 373792 729000)) nil (25962 64769 332667 496000) 0 nil])
([nil nil ((#("sting " 0 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t)) . 795) (undo-tree-id7168 . -5) (undo-tree-id7169 . -3) (undo-tree-id7170 . -6) (undo-tree-id7171 . -5) (undo-tree-id7172 . -5) (undo-tree-id7173 . -5) (undo-tree-id7174 . -5) (undo-tree-id7175 . -5) (undo-tree-id7176 . -5) (undo-tree-id7177 . -5) (undo-tree-id7178 . -5) (undo-tree-id7179 . -5) (undo-tree-id7180 . -5) (undo-tree-id7181 . -5) (undo-tree-id7182 . -6) (undo-tree-id7183 . -6) (undo-tree-id7184 . -6) (undo-tree-id7185 . -6) (undo-tree-id7186 . -6) (undo-tree-id7187 . -6) (undo-tree-id7188 . -6) (undo-tree-id7189 . -6) (undo-tree-id7190 . -6) (undo-tree-id7191 . -6) (undo-tree-id7192 . -6) (undo-tree-id7193 . -5) (undo-tree-id7194 . -6) (undo-tree-id7195 . -6) (undo-tree-id7196 . -4) (undo-tree-id7197 . -4) (undo-tree-id7198 . -6) (undo-tree-id7199 . -6) (undo-tree-id7200 . -6) (undo-tree-id7201 . -6) (undo-tree-id7202 . -6) (undo-tree-id7203 . -6) (undo-tree-id7204 . -6) (undo-tree-id7205 . -6) (undo-tree-id7206 . -6) (undo-tree-id7207 . -6) (undo-tree-id7208 . -6) (undo-tree-id7209 . -6) (undo-tree-id7210 . -6) (undo-tree-id7211 . -6) (undo-tree-id7212 . -6) (undo-tree-id7213 . -6) (undo-tree-id7214 . -6) (undo-tree-id7215 . -6) (undo-tree-id7216 . -6) (undo-tree-id7217 . -6) (undo-tree-id7218 . -6) (undo-tree-id7219 . -6) (undo-tree-id7220 . -6) (undo-tree-id7221 . -6) (undo-tree-id7222 . -6) (undo-tree-id7223 . -6) (undo-tree-id7224 . -6) (undo-tree-id7225 . -6) (undo-tree-id7226 . -6) (undo-tree-id7227 . -6) (undo-tree-id7228 . -6) (undo-tree-id7229 . -6) (undo-tree-id7230 . -6) (undo-tree-id7231 . -6) (undo-tree-id7232 . -6) (undo-tree-id7233 . -6) (undo-tree-id7234 . -6) (undo-tree-id7235 . -6) (undo-tree-id7236 . -6) (undo-tree-id7237 . -6) (undo-tree-id7238 . -6) (undo-tree-id7239 . -6) (undo-tree-id7240 . -6) (undo-tree-id7241 . -6) (undo-tree-id7242 . -6) (undo-tree-id7243 . -6) (undo-tree-id7244 . -6) (undo-tree-id7245 . -6) (undo-tree-id7246 . -6) (undo-tree-id7247 . -6) (undo-tree-id7248 . -6) (undo-tree-id7249 . -6) (undo-tree-id7250 . -6) (undo-tree-id7251 . -6) (undo-tree-id7252 . -6) (undo-tree-id7253 . -6) (undo-tree-id7254 . -6) (undo-tree-id7255 . -6) (undo-tree-id7256 . -6) (undo-tree-id7257 . -6) (undo-tree-id7258 . -6) (undo-tree-id7259 . -6) (undo-tree-id7260 . -6) (undo-tree-id7261 . -6) (undo-tree-id7262 . -6) (undo-tree-id7263 . -6) (undo-tree-id7264 . -6) (undo-tree-id7265 . -6) (undo-tree-id7266 . -6) (undo-tree-id7267 . -6) (undo-tree-id7268 . -6) (undo-tree-id7269 . -6) (undo-tree-id7270 . -6) (undo-tree-id7271 . -6) (undo-tree-id7272 . -6) (undo-tree-id7273 . -6) (undo-tree-id7274 . -6) (undo-tree-id7275 . -6) (undo-tree-id7276 . -6) (undo-tree-id7277 . -6)) nil (25962 64769 332663 435000) 0 nil])
([nil nil ((795 . 804)) nil (25962 64769 332595 619000) 0 nil])
([nil nil ((801 . 802) (800 . 801) (#(" " 0 1 (fontified t)) . -800) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) 801 (800 . 801)) nil (25962 64769 332594 352000) 0 nil])
([nil nil ((795 . 797)) nil (25962 64769 332590 339000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 796) (undo-tree-id7160 . 1) (undo-tree-id7161 . 1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1)) nil (25962 64769 332589 64000) 0 nil])
([nil nil ((813 . 814) (#(")" 0 1 (fontified nil)) . -813) (813 . 814)) nil (25962 64769 332584 614000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 802) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1)) nil (25962 64769 332580 329000) 0 nil])
([nil nil ((#("first" 0 5 (fontified t)) . 796) (undo-tree-id7285 . -4) (undo-tree-id7286 . 5) (undo-tree-id7287 . -5) (t 25962 64769 374385 64000)) nil (25962 64779 821317 863000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 796) (undo-tree-id7283 . 1) (undo-tree-id7284 . -1)) nil (25962 64779 821314 801000) 0 nil])
([nil nil ((#("line" 0 4 (fontified t)) . 796) (undo-tree-id7278 . -3) (undo-tree-id7279 . 4) (undo-tree-id7280 . -4) (undo-tree-id7281 . -4) (undo-tree-id7282 . -4)) nil (25962 64779 821311 37000) 0 nil])
([nil nil ((796 . 797)) nil (25962 64779 821293 539000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -847) (undo-tree-id7297 . -4) 851 (847 . 851) (#("    " 0 4 (fontified nil)) . 846) (undo-tree-id7298 . -4) (845 . 851) (t 25962 64779 834601 809000)) nil (25962 64804 379357 236000) 0 nil])
([nil nil ((847 . 851)) nil (25962 64804 379353 946000) 0 nil])
([nil nil ((nil rear-nonsticky nil 849 . 850) (#("
" 0 1 (fontified nil)) . -904) (845 . 905) 790) nil (25962 64804 379352 638000) 0 nil])
([nil nil ((#("user" 0 4 (fontified t)) . 858) (undo-tree-id7296 . -3)) nil (25962 64804 379350 813000) 0 nil])
([nil nil ((863 . 864) (858 . 863) (#("l" 0 1 (fontified t)) . -858) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (#("i" 0 1 (fontified t)) . -859) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (#("n" 0 1 (fontified t)) . -860) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) 861 (858 . 861)) nil (25962 64804 379348 194000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 900)) nil (25962 64804 379331 71000) 0 nil])
([nil nil ((900 . 901)) nil (25962 64804 379326 316000) 0 nil])
([nil nil ((#("map.get_key_value(two_lines.get(1)?)?;" 0 4 (fontified t) 4 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 28 (fontified t) 28 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t face rust-question-mark) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face rust-question-mark) 37 38 (fontified t)) . 868) (undo-tree-id7304 . 5) (undo-tree-id7305 . -32) (t 25962 64804 419117 423000)) nil (25962 64821 190354 717000) 0 nil])
([nil nil ((884 . 885) (apply yas--snippet-revive 878 884 #s(yas--snippet nil (#s(yas--field 1 882 883 nil nil nil t #s(yas--exit 884 nil))) #s(yas--exit 884 nil) 58 nil #s(yas--field 1 882 883 nil nil nil t #s(yas--exit 884 nil)) nil nil)) (#("index" 0 5 (fontified nil)) . 883) (882 . 883) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 882 883 nil nil nil t #s(yas--exit 884 nil))) #s(yas--exit 884 nil) 58 nil #s(yas--field 1 882 883 nil nil nil t #s(yas--exit 884 nil)) nil nil)) (878 . 888) (#("get(${1:index})$0" 0 17 (fontified nil)) . 878) (878 . 895) (#("ge" 0 2 (fontified nil)) . 878) (878 . 880) (#("get(…)" 0 6 (fontified nil)) . -878) (878 . 884) (#("ge" 0 2 (fontified t)) . -878) (undo-tree-id7299 . -2) (undo-tree-id7300 . -2) (undo-tree-id7301 . -2) 880 (878 . 880) (877 . 878) (868 . 877) (#("t" 0 1 (fontified nil)) . 868) (868 . 869) (#("two_lines" 0 9 (fontified nil)) . -868) (868 . 877) (#("tw" 0 2 (fontified t)) . -868) (undo-tree-id7302 . -2) (undo-tree-id7303 . -2) 870 (868 . 870)) nil (25962 64821 190349 48000) 0 nil])
([nil nil ((885 . 886)) nil (25962 64821 190327 164000) 0 nil])
([nil nil ((#("(_, " 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t) 2 4 (fontified t)) . 854) (undo-tree-id7310 . -3) (undo-tree-id7311 . -4) (t 25962 64821 207474 360000)) nil (25962 64840 927027 35000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 860) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1)) nil (25962 64840 927020 716000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -880) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (#("t" 0 1 (fontified t)) . -881) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (#("o" 0 1 (fontified t)) . -882) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (#("_" 0 1 (fontified t)) . -883) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (#("o" 0 1 (fontified t)) . -884) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) 885 (#("w" 0 1 (fontified t)) . -885) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) 886 (880 . 886) (t 25962 64840 943898 790000)) nil (25962 64850 378740 212000) 0 nil])
([nil nil ((130 . 132) (t 25962 64850 404104 24000)) nil (25962 64887 468278 761000) 0 nil])
([nil nil ((458 . 460)) nil (25962 64887 468277 711000) 0 nil])
([nil nil ((480 . 482) (459 . 480)) nil (25962 64887 468276 792000) 0 nil])
([nil nil ((485 . 489) (#("    " 0 4 (fontified nil face (rainbow-delimiters-depth-1-face))) . 485) (485 . 489) (484 . 486) (482 . 485)) nil (25962 64887 468275 638000) 0 nil])
([nil nil ((504 . 507) (#("st" 0 2 (fontified nil)) . 504) (504 . 506) (#("str" 0 3 (fontified nil)) . -504) (504 . 507) (#("st" 0 2 (fontified t)) . -504) (undo-tree-id7403 . -2) (undo-tree-id7404 . -2) (undo-tree-id7405 . -2) (undo-tree-id7406 . -2) (undo-tree-id7407 . -2) (undo-tree-id7408 . -2) (undo-tree-id7409 . -2) (undo-tree-id7410 . -2) (undo-tree-id7411 . -2) (undo-tree-id7412 . -2) (undo-tree-id7413 . -2) (undo-tree-id7414 . -2) (undo-tree-id7415 . -2) (undo-tree-id7416 . -2) (undo-tree-id7417 . -2) (undo-tree-id7418 . -2) (undo-tree-id7419 . -2) (undo-tree-id7420 . -2) (undo-tree-id7421 . -2) (undo-tree-id7422 . -2) (undo-tree-id7423 . -2) (undo-tree-id7424 . -2) (undo-tree-id7425 . -2) (undo-tree-id7426 . -2) (undo-tree-id7427 . -2) (undo-tree-id7428 . -2) (undo-tree-id7429 . -2) (undo-tree-id7430 . -2) (undo-tree-id7431 . -2) (undo-tree-id7432 . -2) (undo-tree-id7433 . -2) (undo-tree-id7434 . -2) (undo-tree-id7435 . -2) (undo-tree-id7436 . -2) (undo-tree-id7437 . -2) (undo-tree-id7438 . -2) (undo-tree-id7439 . -2) (undo-tree-id7440 . -2) 506 (501 . 506) (#(" " 0 1 (fontified t)) . -501) (undo-tree-id7441 . -1) 502 (500 . 502) (493 . 500) (#(" " 0 1 (fontified t)) . -493) (undo-tree-id7442 . -1) (#("," 0 1 (fontified t)) . -494) (undo-tree-id7443 . -1) 495 (493 . 495) (489 . 493) (#("Us" 0 2 (fontified nil)) . 489) (489 . 491) (#("User" 0 4 (fontified nil)) . -489) (489 . 493) (#("Us" 0 2 (fontified t face font-lock-type-face)) . -489) (undo-tree-id7444 . -1) (undo-tree-id7445 . -2) (undo-tree-id7446 . -2) 491 (489 . 491) (#("u" 0 1 (fontified t)) . -489) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) 490 (486 . 490) (#("&" 0 1 (fontified t)) . -486) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (#("u" 0 1 (fontified t)) . -487) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (#("s" 0 1 (fontified t)) . -488) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) 489 (481 . 489)) nil (25962 64887 468266 765000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -968) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (#("K" 0 1 (fontified t face font-lock-string-face)) . -969) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) 970 (968 . 970) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -968) (968 . 969) (#(")" 0 1 (fontified t face font-lock-string-face)) . -968) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (#("K" 0 1 (fontified t face font-lock-string-face)) . -969) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) 970 (968 . 970) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -968) (968 . 969) (967 . 969) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -967) (#("buf" 0 3 (fontified nil)) . 968) (967 . 968) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 945 nil))) #s(yas--exit 945 nil) 59 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 945 nil)) nil nil)) (961 . 971) (#("write(${1:buf})$0" 0 17 (fontified nil)) . 961) (961 . 978) (#("wr" 0 2 (fontified nil)) . 961) (961 . 963) (#("write(…) (as Write)" 0 19 (fontified nil)) . -961) (961 . 980) (#("wr" 0 2 (fontified t)) . -961) (undo-tree-id7506 . -1) (undo-tree-id7507 . -2) (undo-tree-id7508 . -2) 963 (961 . 963) (#("s" 0 1 (fontified t)) . -961) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (#("e" 0 1 (fontified t)) . -962) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (#("n" 0 1 (fontified t)) . -963) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (#("d" 0 1 (fontified t)) . -964) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) 965 (961 . 965) (#("s" 0 1 (fontified t)) . -961) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (#("e" 0 1 (fontified t)) . -962) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (#("n" 0 1 (fontified t)) . -963) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) 964 (960 . 964) (#(" " 0 1 (fontified t)) . -960) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (#("=" 0 1 (fontified t)) . -961) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (#(" " 0 1 (fontified t)) . -962) (undo-tree-id7531 . -1) 963 (962 . 963) (#("=" 0 1 (fontified t)) . -962) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (#(" " 0 1 (fontified t)) . -963) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) 964 (960 . 964) (949 . 960) (#("sen" 0 3 (fontified nil)) . 949) (949 . 952) (#("send_steram" 0 11 (fontified nil)) . -949) (949 . 960) (#("sen" 0 3 (fontified t)) . -949) (undo-tree-id7536 . -3) (undo-tree-id7537 . -3) 952 (949 . 952) (t 25962 64887 512919 806000)) nil (25962 64923 509626 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 945 945 #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 945 nil))) #s(yas--exit 945 nil) 59 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 945 nil)) nil nil)) (#("    send_steram.write(\"\")
" 0 4 (fontified t) 4 16 (fontified t) 16 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t)) . 945) (undo-tree-id7484 . 3) (undo-tree-id7485 . -25) (undo-tree-id7486 . -16) (undo-tree-id7487 . -22) (undo-tree-id7488 . -22) (undo-tree-id7489 . -25) (undo-tree-id7490 . 5) (undo-tree-id7491 . -22) (undo-tree-id7492 . 2) (undo-tree-id7493 . -25) (undo-tree-id7494 . -22) (undo-tree-id7495 . 2) (undo-tree-id7496 . -22) (undo-tree-id7497 . 3) 967) nil (25962 64923 509595 610000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 945) (undo-tree-id7479 . 5) (undo-tree-id7480 . -4) (undo-tree-id7481 . -3) (undo-tree-id7482 . -3) (undo-tree-id7483 . 5) 948) nil (25962 64923 509585 447000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 945) (undo-tree-id7473 . 5) (undo-tree-id7474 . -4) (undo-tree-id7475 . -5) (undo-tree-id7476 . -5) (undo-tree-id7477 . -3) (undo-tree-id7478 . 5) 948) nil (25962 64923 509580 567000) 0 nil])
([nil nil ((#("    let send_steram = stream.try_clone().ok()?;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 29 (fontified t) 29 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 41 (fontified t) 41 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t face rust-question-mark) 46 47 (fontified t) 47 48 (fontified t)) . 611) (undo-tree-id7458 . -47) (undo-tree-id7459 . -8) (undo-tree-id7460 . -19) (undo-tree-id7461 . -8) (undo-tree-id7462 . -19) (undo-tree-id7463 . -48) (undo-tree-id7464 . -48) (undo-tree-id7465 . -48) (undo-tree-id7466 . -48) (undo-tree-id7467 . -48) (undo-tree-id7468 . -48) (undo-tree-id7469 . -48) (undo-tree-id7470 . -48) (undo-tree-id7471 . -48) (undo-tree-id7472 . -48)) nil (25962 64923 509571 965000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -1267) (undo-tree-id7538 . -5) 1272 (1267 . 1272) (#("	    " 0 5 (fontified nil)) . 1266) (undo-tree-id7539 . -5) (1266 . 1272) (#("	    " 0 5 (fontified nil)) . 1265) (undo-tree-id7540 . -5) (1264 . 1271) (t 25962 64923 525726 998000)) nil (25962 64943 351931 31000) 0 nil])
([nil nil ((1266 . 1271)) nil (25962 64943 351916 251000) 0 nil])
([nil nil ((1264 . 1265)) nil (25962 64943 351911 890000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1264) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) 1265 (t 25962 64943 390178 390000)) nil (25962 64949 796663 233000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1282) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (#("w" 0 1 (fontified t)) . -1283) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (#("
" 0 1 (fontified t)) . -1284) (undo-tree-id7706 . -1) (undo-tree-id7707 . 1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (#("	" 0 1 (fontified t)) . -1285) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (#("	" 0 1 (fontified t)) . -1286) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) 1287 (1284 . 1287) (1275 . 1284) (1274 . 1275) (1271 . 1274) (t 25962 64949 838325 819000)) nil (25962 64966 101142 865000) 0 nil])
([nil nil ((#("	    let thing ;
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-variable-name-face) 14 16 (fontified t) 16 17 (fontified t)) . 1266) (undo-tree-id7779 . 1) (undo-tree-id7780 . -16) (undo-tree-id7781 . -16) (undo-tree-id7782 . -16) (undo-tree-id7783 . -16) (undo-tree-id7784 . -16) (undo-tree-id7785 . -16) (undo-tree-id7786 . -16) (undo-tree-id7787 . -16) (undo-tree-id7788 . -16) (undo-tree-id7789 . -16) (undo-tree-id7790 . -16) (undo-tree-id7791 . 1) (undo-tree-id7792 . -16) (undo-tree-id7793 . -16) (undo-tree-id7794 . -16) (undo-tree-id7795 . -16) (undo-tree-id7796 . -16) (undo-tree-id7797 . -16) (undo-tree-id7798 . -16) (undo-tree-id7799 . -16) (undo-tree-id7800 . -16) (undo-tree-id7801 . -16) (undo-tree-id7802 . 1) (undo-tree-id7803 . -16) (undo-tree-id7804 . -16) (undo-tree-id7805 . -16) (undo-tree-id7806 . -16) (undo-tree-id7807 . -16) (undo-tree-id7808 . -16) (undo-tree-id7809 . -16) (undo-tree-id7810 . -16) (undo-tree-id7811 . -16) (undo-tree-id7812 . -16) (undo-tree-id7813 . -16) (undo-tree-id7814 . -16) (undo-tree-id7815 . -16) (undo-tree-id7816 . -16) (undo-tree-id7817 . -16) (undo-tree-id7818 . -16) (undo-tree-id7819 . -16) (undo-tree-id7820 . -16) (undo-tree-id7821 . -16) (undo-tree-id7822 . -16) (undo-tree-id7823 . -16) (undo-tree-id7824 . -16) (undo-tree-id7825 . -16) (undo-tree-id7826 . -16) (undo-tree-id7827 . -16) (undo-tree-id7828 . -16) (undo-tree-id7829 . -16) (undo-tree-id7830 . -16) (undo-tree-id7831 . -16) (undo-tree-id7832 . -16) (undo-tree-id7833 . -16) (undo-tree-id7834 . -16) (undo-tree-id7835 . -16) (undo-tree-id7836 . -16) (undo-tree-id7837 . -16) (undo-tree-id7838 . -16) (undo-tree-id7839 . -16) (undo-tree-id7840 . -16) (undo-tree-id7841 . -16) (undo-tree-id7842 . -16) (undo-tree-id7843 . -16) (undo-tree-id7844 . -16) (undo-tree-id7845 . -16) (undo-tree-id7846 . -16) (undo-tree-id7847 . -16) (undo-tree-id7848 . -16) (undo-tree-id7849 . -16) (undo-tree-id7850 . -16) (undo-tree-id7851 . -16) (undo-tree-id7852 . -16) (undo-tree-id7853 . -16) (undo-tree-id7854 . -16) (undo-tree-id7855 . -16) (undo-tree-id7856 . -16) (undo-tree-id7857 . -16) (undo-tree-id7858 . -16) (undo-tree-id7859 . -16) (undo-tree-id7860 . -16) (undo-tree-id7861 . -16) (undo-tree-id7862 . -16) (undo-tree-id7863 . -15) (undo-tree-id7864 . -15) (undo-tree-id7865 . -15) (undo-tree-id7866 . -15) (undo-tree-id7867 . -15) (undo-tree-id7868 . -15) (undo-tree-id7869 . -15) (undo-tree-id7870 . -15) (undo-tree-id7871 . -15) (undo-tree-id7872 . -15) (undo-tree-id7873 . -15) (undo-tree-id7874 . -15) (undo-tree-id7875 . -15) (undo-tree-id7876 . -15) (undo-tree-id7877 . -15) (undo-tree-id7878 . -15) (undo-tree-id7879 . -15) (undo-tree-id7880 . -15) (undo-tree-id7881 . -15) (undo-tree-id7882 . -15) (undo-tree-id7883 . -15) (undo-tree-id7884 . -15) (undo-tree-id7885 . -15) (undo-tree-id7886 . -15) (undo-tree-id7887 . -15) (undo-tree-id7888 . -15) (undo-tree-id7889 . -15) (undo-tree-id7890 . -15) (undo-tree-id7891 . -15) (undo-tree-id7892 . -15) (undo-tree-id7893 . -15) (undo-tree-id7894 . -15) (undo-tree-id7895 . -15) (undo-tree-id7896 . -15) (undo-tree-id7897 . -15) (undo-tree-id7898 . -5) (undo-tree-id7899 . -6) (undo-tree-id7900 . -8) (undo-tree-id7901 . -9) (undo-tree-id7902 . -14) (undo-tree-id7903 . -15) (undo-tree-id7904 . -15) (undo-tree-id7905 . -16) (undo-tree-id7906 . -16) (undo-tree-id7907 . -17) (undo-tree-id7908 . -16) (undo-tree-id7909 . -17) (undo-tree-id7910 . -5) (undo-tree-id7911 . -8) (undo-tree-id7912 . -5) (undo-tree-id7913 . -8) (undo-tree-id7914 . -15) (undo-tree-id7915 . -16) (undo-tree-id7916 . -15) (undo-tree-id7917 . -15) (undo-tree-id7918 . -15) (undo-tree-id7919 . -15) (undo-tree-id7920 . -15) (undo-tree-id7921 . -15) (undo-tree-id7922 . -15) (undo-tree-id7923 . -15) (undo-tree-id7924 . -15) (undo-tree-id7925 . -15) (undo-tree-id7926 . -15) (undo-tree-id7927 . -15) (undo-tree-id7928 . -15) (undo-tree-id7929 . -15) (undo-tree-id7930 . -15) (undo-tree-id7931 . -15) (undo-tree-id7932 . -15) (undo-tree-id7933 . -15) (undo-tree-id7934 . -15) (undo-tree-id7935 . -15) (undo-tree-id7936 . -15) (undo-tree-id7937 . -15) (undo-tree-id7938 . -15) (undo-tree-id7939 . -15) (undo-tree-id7940 . -15) (undo-tree-id7941 . -15) (undo-tree-id7942 . -15) (undo-tree-id7943 . -15) (undo-tree-id7944 . -15) (undo-tree-id7945 . -15) (undo-tree-id7946 . -15) (undo-tree-id7947 . -15) (undo-tree-id7948 . -15) (undo-tree-id7949 . -15) (undo-tree-id7950 . -15) (undo-tree-id7951 . -15) (undo-tree-id7952 . -15) (undo-tree-id7953 . -15) (undo-tree-id7954 . -15) (undo-tree-id7955 . -15) (undo-tree-id7956 . -15) (undo-tree-id7957 . -15) (undo-tree-id7958 . -15) (undo-tree-id7959 . -15) (undo-tree-id7960 . -15) (undo-tree-id7961 . -15) (undo-tree-id7962 . -15) (undo-tree-id7963 . -15) (undo-tree-id7964 . -15) (undo-tree-id7965 . -15) (undo-tree-id7966 . -15) (undo-tree-id7967 . -15) (undo-tree-id7968 . -15) (undo-tree-id7969 . -15) (undo-tree-id7970 . -15) (undo-tree-id7971 . -15) (undo-tree-id7972 . -15) (undo-tree-id7973 . -15) (undo-tree-id7974 . -15) (undo-tree-id7975 . -15) (undo-tree-id7976 . -15) (undo-tree-id7977 . -15) (undo-tree-id7978 . -15) (undo-tree-id7979 . -15) (undo-tree-id7980 . -15) (undo-tree-id7981 . -15) (undo-tree-id7982 . -15) (undo-tree-id7983 . -15) (undo-tree-id7984 . -15) (undo-tree-id7985 . -15) (undo-tree-id7986 . -15) (undo-tree-id7987 . -15) (undo-tree-id7988 . -15) (undo-tree-id7989 . -15) (undo-tree-id7990 . -15) (undo-tree-id7991 . -15) (undo-tree-id7992 . -17) 1281 (t 25962 64966 118699 964000)) nil (25962 64980 372311 393000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1267) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (#(" " 0 1 (fontified t)) . -1268) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (#(" " 0 1 (fontified t)) . -1269) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (#(" " 0 1 (fontified t)) . -1270) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (#("h" 0 1 (fontified t)) . -1271) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (#("a" 0 1 (fontified t)) . -1272) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (#("n" 0 1 (fontified t)) . -1273) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (#("d" 0 1 (fontified t)) . -1274) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (#("l" 0 1 (fontified nil)) . -1275) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (#("e" 0 1 (fontified t)) . -1276) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (#("_" 0 1 (fontified t)) . -1277) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (#("c" 0 1 (fontified t)) . -1278) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (#("o" 0 1 (fontified t)) . -1279) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (#("n" 0 1 (fontified t)) . -1280) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (#("n" 0 1 (fontified t)) . -1281) (undo-tree-id8509 . -1) (#("e" 0 1 (fontified t)) . -1282) (undo-tree-id8510 . -1) 1283 (1271 . 1283) (1266 . 1271) (#("	    " 0 5 (fontified nil)) . 1265) (undo-tree-id8511 . -5) (1270 . 1271) (1265 . 1270) (t 25962 64980 415030 719000)) nil (25962 64994 946214 789000) 0 nil])
([nil nil ((#("let " 0 1 (fontified t face font-lock-keyword-face) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1111) (undo-tree-id8515 . -3) (t 25962 64994 955369 176000)) nil (25962 65003 392110 366000) 0 nil])
([nil nil ((#("stream " 0 6 (fontified t) 6 7 (fontified t)) . 1111) (undo-tree-id8513 . -6) (undo-tree-id8514 . -7)) nil (25962 65003 392107 659000) 0 nil])
([nil nil ((#("= " 0 2 (fontified t)) . 1111) (undo-tree-id8512 . -1)) nil (25962 65003 392101 279000) 0 nil])
([nil nil ((#("	match stream {
	    Ok(t) => t,
	    Err(t) => {
		eprintln!(\"ERROR: {t}\");
		// don't handle connection in case of error
		continue;
	    }

	" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-3-face)) 15 16 (fontified t) 16 19 (fontified t) 19 21 (fontified t) 21 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-4-face)) 26 27 (fontified t) 27 28 (fontified t) 28 29 (syntax-table (1) fontified t) 29 30 (fontified t) 30 33 (fontified t) 33 38 (fontified t) 38 41 (fontified t face font-lock-type-face) 41 42 (fontified t face (rainbow-delimiters-depth-4-face)) 42 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-4-face)) 44 46 (fontified t) 46 47 (syntax-table (1) fontified t) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-4-face)) 49 50 (fontified t) 50 52 (fontified t) 52 56 (fontified t face rust-builtin-formatting-macro) 56 61 (fontified t face rust-builtin-formatting-macro) 61 62 (fontified t face (rainbow-delimiters-depth-5-face)) 62 64 (fontified t face font-lock-string-face) 64 67 (fontified t face font-lock-string-face) 67 70 (fontified t face font-lock-string-face) 70 72 (fontified t face rust-string-interpolation) 72 73 (fontified t face rust-string-interpolation) 73 74 (fontified t face font-lock-string-face) 74 75 (fontified t face (rainbow-delimiters-depth-5-face)) 75 77 (fontified t) 77 79 (fontified t) 79 82 (fontified t face font-lock-comment-delimiter-face) 82 104 (fontified t face font-lock-comment-face) 104 109 (fontified t face font-lock-comment-face) 109 117 (fontified t face font-lock-comment-face) 117 122 (fontified t face font-lock-comment-face) 122 123 (fontified t face font-lock-comment-face) 123 125 (fontified t) 125 130 (fontified t face font-lock-keyword-face) 130 133 (fontified t face font-lock-keyword-face) 133 134 (fontified t) 134 135 (fontified t) 135 140 (fontified t) 140 141 (fontified t face (rainbow-delimiters-depth-4-face)) 141 142 (fontified t) 142 143 (fontified t) 143 144 (fontified t)) . 1110) (undo-tree-id8607 . -143) (undo-tree-id8608 . -144) (undo-tree-id8609 . -143) (undo-tree-id8610 . -143) (undo-tree-id8611 . -55) (undo-tree-id8612 . -143) (t 25962 65003 435567 506000)) nil (25962 65036 851589 507000) 0 nil])
([nil nil ((1112 . 1119) (1111 . 1112) (#("	" 0 1 (fontified nil)) . 1110) (undo-tree-id8606 . -1) (1111 . 1112) (1110 . 1111)) nil (25962 65036 851583 987000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1128) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) 1129 (1126 . 1129) (1123 . 1126) (#("g" 0 1 (fontified t)) . -1123) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) 1124 (1123 . 1124) (1122 . 1123) (1121 . 1123) (1119 . 1121) (#("O" 0 1 (fontified nil)) . 1119) (1119 . 1120) (#("Ok" 0 2 (fontified nil)) . -1119) (1119 . 1121) (#("O" 0 1 (fontified t face font-lock-type-face)) . -1119) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) 1120 (1119 . 1120) (1118 . 1119)) nil (25962 65036 851579 497000) 0 nil])
([nil nil ((1141 . 1147) (1139 . 1141) (1133 . 1139) (#("s" 0 1 (fontified nil)) . 1133) (1133 . 1134) (#("stream" 0 6 (fontified nil)) . -1133) (1133 . 1139) (#("st" 0 2 (fontified t)) . -1133) (undo-tree-id8516 . -2) (undo-tree-id8517 . -2) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -2) (undo-tree-id8546 . -2) (undo-tree-id8547 . -2) (undo-tree-id8548 . -2) (undo-tree-id8549 . -2) (undo-tree-id8550 . -2) (undo-tree-id8551 . -2) (undo-tree-id8552 . -2) (undo-tree-id8553 . -2) (undo-tree-id8554 . -2) (undo-tree-id8555 . -2) (undo-tree-id8556 . -2) (undo-tree-id8557 . -2) (undo-tree-id8558 . -2) (undo-tree-id8559 . -2) (undo-tree-id8560 . -2) (undo-tree-id8561 . -2) (undo-tree-id8562 . -2) (undo-tree-id8563 . -2) (undo-tree-id8564 . -2) (undo-tree-id8565 . -2) (undo-tree-id8566 . -2) (undo-tree-id8567 . -2) (undo-tree-id8568 . -2) (undo-tree-id8569 . -2) (undo-tree-id8570 . -2) (undo-tree-id8571 . -2) (undo-tree-id8572 . -2) (undo-tree-id8573 . -2) (undo-tree-id8574 . -2) (undo-tree-id8575 . -2) (undo-tree-id8576 . -2) (undo-tree-id8577 . -2) 1135 (1133 . 1135) (1132 . 1133) (1130 . 1132)) nil (25962 65036 851551 354000) 0 nil])
([nil nil ((apply yas--snippet-revive 1173 1184 #s(yas--snippet nil nil #s(yas--exit 1184 nil) 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1184 nil) 60 nil nil nil nil)) (1173 . 1184) (#("try_clone()$0" 0 13 (fontified nil)) . 1173) (1173 . 1186) (#("tr" 0 2 (fontified nil)) . 1173) (1173 . 1175) (#("try_clone()" 0 11 (fontified nil)) . -1173) (1173 . 1184) (#("tr" 0 2 (fontified t)) . -1173) (undo-tree-id8613 . -2) (undo-tree-id8614 . -2) (undo-tree-id8615 . -2) (undo-tree-id8616 . -2) 1175 (1172 . 1175) (1166 . 1172) (#("st" 0 2 (fontified nil)) . 1166) (1166 . 1168) (#("stream" 0 6 (fontified nil)) . -1166) (1166 . 1172) (#("st" 0 2 (fontified t)) . -1166) (undo-tree-id8617 . -2) (undo-tree-id8618 . -2) 1168 (1157 . 1168) (1156 . 1157) (1148 . 1156) (1143 . 1148) (#("	    " 0 5 (fontified nil)) . 1142) (undo-tree-id8619 . -4) (undo-tree-id8620 . -5) (1147 . 1148) (t 25962 65036 896356 540000)) nil (25962 65058 406844 340000) 0 nil])
([nil nil ((1184 . 1185)) nil (25962 65058 406822 957000) 0 nil])
([nil nil ((1185 . 1186)) nil (25962 65058 406818 117000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t face rust-question-mark)) . 1184) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (t 25962 65058 448870 15000)) nil (25962 65062 222937 831000) 0 nil])
([nil nil ((apply yas--snippet-revive 1185 1193 #s(yas--snippet nil nil #s(yas--exit 1193 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1193 nil) 61 nil nil nil nil)) (1185 . 1193) (#("unwrap()$0" 0 10 (fontified nil)) . 1185) (1185 . 1195) (#("un" 0 2 (fontified nil)) . 1185) (1185 . 1187) (#("unwrap()" 0 8 (fontified nil)) . -1185) (1185 . 1193) (#("un" 0 2 (fontified t)) . -1185) (undo-tree-id8681 . -2) (undo-tree-id8682 . -2) (undo-tree-id8683 . -2) (undo-tree-id8684 . -2) (undo-tree-id8685 . -2) (undo-tree-id8686 . -2) (undo-tree-id8687 . -2) (undo-tree-id8688 . -2) (undo-tree-id8689 . -2) (undo-tree-id8690 . -2) (undo-tree-id8691 . -2) (undo-tree-id8692 . -2) (undo-tree-id8693 . -2) (undo-tree-id8694 . -2) (undo-tree-id8695 . -2) (undo-tree-id8696 . -2) (undo-tree-id8697 . -2) (undo-tree-id8698 . -2) (undo-tree-id8699 . -2) (undo-tree-id8700 . -2) (undo-tree-id8701 . -2) (undo-tree-id8702 . -2) (undo-tree-id8703 . -2) (undo-tree-id8704 . -2) (undo-tree-id8705 . -2) (undo-tree-id8706 . -2) (undo-tree-id8707 . -2) (undo-tree-id8708 . -2) (undo-tree-id8709 . -2) (undo-tree-id8710 . -2) (undo-tree-id8711 . -2) (undo-tree-id8712 . -2) (undo-tree-id8713 . -2) (undo-tree-id8714 . -2) 1187 (1184 . 1187) (t 25962 65062 240960 770000)) nil (25962 65068 165687 990000) 0 nil])
([nil nil ((1219 . 1225) (#("st" 0 2 (fontified nil)) . 1219) (undo-tree-id8975 . -2) (1219 . 1221) (#("stream" 0 6 (fontified nil)) . -1219) (undo-tree-id8976 . -6) (1219 . 1225) (#("st" 0 2 (fontified t)) . -1219) (undo-tree-id8977 . -2) (undo-tree-id8978 . -2) (undo-tree-id8979 . -2) (undo-tree-id8980 . -2) (undo-tree-id8981 . -2) (undo-tree-id8982 . -2) (undo-tree-id8983 . -2) (undo-tree-id8984 . -2) (undo-tree-id8985 . -2) (undo-tree-id8986 . -2) (undo-tree-id8987 . -2) (undo-tree-id8988 . -2) (undo-tree-id8989 . -2) (undo-tree-id8990 . -2) (undo-tree-id8991 . -2) (undo-tree-id8992 . -2) (undo-tree-id8993 . -2) (undo-tree-id8994 . -2) (undo-tree-id8995 . -2) (undo-tree-id8996 . -2) (undo-tree-id8997 . -2) (undo-tree-id8998 . -2) (undo-tree-id8999 . -2) (undo-tree-id9000 . -2) (undo-tree-id9001 . -2) (undo-tree-id9002 . -2) (undo-tree-id9003 . -2) (undo-tree-id9004 . -2) (undo-tree-id9005 . -2) (undo-tree-id9006 . -2) (undo-tree-id9007 . -2) (undo-tree-id9008 . -2) (undo-tree-id9009 . -2) (undo-tree-id9010 . -2) (undo-tree-id9011 . -2) (undo-tree-id9012 . -2) (undo-tree-id9013 . -2) (undo-tree-id9014 . -2) (undo-tree-id9015 . -2) (undo-tree-id9016 . -2) (undo-tree-id9017 . -2) (undo-tree-id9018 . -2) (undo-tree-id9019 . -2) (undo-tree-id9020 . -2) (undo-tree-id9021 . -2) (undo-tree-id9022 . -2) (undo-tree-id9023 . -2) (undo-tree-id9024 . -2) (undo-tree-id9025 . -2) (undo-tree-id9026 . -2) (undo-tree-id9027 . -2) (undo-tree-id9028 . -2) (undo-tree-id9029 . -2) (undo-tree-id9030 . -2) (undo-tree-id9031 . -2) (undo-tree-id9032 . -2) (undo-tree-id9033 . -2) (undo-tree-id9034 . -2) (undo-tree-id9035 . -2) 1221 (1220 . 1221) (#("stream" 0 6 (fontified nil)) . 1220) (undo-tree-id9036 . -6) (1219 . 1220) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1219 1225 nil nil nil t #s(yas--exit 1226 nil))) #s(yas--exit 1226 nil) 62 nil #s(yas--field 1 1219 1225 nil nil nil t #s(yas--exit 1226 nil)) nil nil)) (1201 . 1226) (#("handle_connection(${1:stream})$0" 0 32 (fontified nil)) . 1201) (1201 . 1233) (#("han" 0 3 (fontified nil)) . 1201) (1201 . 1204) (#("handle_connection(…)" 0 20 (fontified nil)) . -1201) (1201 . 1221) (#("han" 0 3 (fontified t)) . -1201) (undo-tree-id9037 . -3) (undo-tree-id9038 . -3) 1204 (1203 . 1204) (1201 . 1203) (1196 . 1201) (#("	    " 0 5 (fontified nil)) . 1195) (undo-tree-id9039 . -5) (1194 . 1201) (t 25962 65068 181103 177000)) nil (25962 65094 506343 849000) 0 nil])
([nil nil ((1226 . 1227) (apply yas--snippet-revive 1201 1226 #s(yas--snippet nil (#s(yas--field 1 1219 1225 nil nil nil t #s(yas--exit 1226 nil))) #s(yas--exit 1226 nil) 62 nil #s(yas--field 1 1219 1225 nil nil nil t #s(yas--exit 1226 nil)) nil nil))) nil (25962 65094 506302 735000) 0 nil])
([nil nil ((1225 . 1231) (#("st" 0 2 (fontified nil)) . 1225) (undo-tree-id8867 . -2) (1225 . 1227) (#("stream" 0 6 (fontified nil)) . -1225) (undo-tree-id8868 . -6) (1225 . 1231) (#("st" 0 2 (fontified t)) . -1225) (undo-tree-id8869 . -2) (undo-tree-id8870 . -2) (undo-tree-id8871 . -2) (undo-tree-id8872 . -2) (undo-tree-id8873 . -2) (undo-tree-id8874 . -2) (undo-tree-id8875 . -2) (undo-tree-id8876 . -2) (undo-tree-id8877 . -2) (undo-tree-id8878 . -2) (undo-tree-id8879 . -2) (undo-tree-id8880 . -2) (undo-tree-id8881 . -2) (undo-tree-id8882 . -2) (undo-tree-id8883 . -2) (undo-tree-id8884 . -2) (undo-tree-id8885 . -2) (undo-tree-id8886 . -2) (undo-tree-id8887 . -2) (undo-tree-id8888 . -2) (undo-tree-id8889 . -2) (undo-tree-id8890 . -2) (undo-tree-id8891 . -2) (undo-tree-id8892 . -2) (undo-tree-id8893 . -2) (undo-tree-id8894 . -2) (undo-tree-id8895 . -2) (undo-tree-id8896 . -2) (undo-tree-id8897 . -2) (undo-tree-id8898 . -2) (undo-tree-id8899 . -2) (undo-tree-id8900 . -2) (undo-tree-id8901 . -2) (undo-tree-id8902 . -2) (undo-tree-id8903 . -2) (undo-tree-id8904 . -2) (undo-tree-id8905 . -2) (undo-tree-id8906 . -2) (undo-tree-id8907 . -2) (undo-tree-id8908 . -2) (undo-tree-id8909 . -2) (undo-tree-id8910 . -2) (undo-tree-id8911 . -2) (undo-tree-id8912 . -2) (undo-tree-id8913 . -2) (undo-tree-id8914 . -2) (undo-tree-id8915 . -2) (undo-tree-id8916 . -2) (undo-tree-id8917 . -2) (undo-tree-id8918 . -2) (undo-tree-id8919 . -2) (undo-tree-id8920 . -2) (undo-tree-id8921 . -2) (undo-tree-id8922 . -2) (undo-tree-id8923 . -2) (undo-tree-id8924 . -2) (undo-tree-id8925 . -2) (undo-tree-id8926 . -2) (undo-tree-id8927 . -2) (undo-tree-id8928 . -2) (undo-tree-id8929 . -2) (undo-tree-id8930 . -2) (undo-tree-id8931 . -2) (undo-tree-id8932 . -2) (undo-tree-id8933 . -2) (undo-tree-id8934 . -2) (undo-tree-id8935 . -2) (undo-tree-id8936 . -2) (undo-tree-id8937 . -2) (undo-tree-id8938 . -2) (undo-tree-id8939 . -2) (undo-tree-id8940 . -2) (undo-tree-id8941 . -2) (undo-tree-id8942 . -2) (undo-tree-id8943 . -2) (undo-tree-id8944 . -2) (undo-tree-id8945 . -2) 1227 (1226 . 1227) (#("stream" 0 6 (fontified nil)) . 1226) (undo-tree-id8946 . -6) (1225 . 1226) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1225 1231 nil nil nil t #s(yas--exit 1232 nil))) #s(yas--exit 1232 nil) 64 nil #s(yas--field 1 1225 1231 nil nil nil t #s(yas--exit 1232 nil)) #s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil)) nil)) (1207 . 1232) (#("handle_connection(${1:stream})$0" 0 32 (fontified nil)) . 1207) (undo-tree-id8947 . -32) (1207 . 1239) (#("han" 0 3 (fontified nil)) . 1207) (undo-tree-id8948 . -3) (1207 . 1210) (#("handle_connection(…)" 0 20 (fontified nil)) . -1207) (undo-tree-id8949 . -20) (1207 . 1227) (#("han" 0 3 (fontified t)) . -1207) (undo-tree-id8950 . -3) (undo-tree-id8951 . -3) (undo-tree-id8952 . -3) 1210 (1207 . 1210) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil))) #s(yas--exit 1237 nil) 63 nil #s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil)) nil nil)) (1201 . 1219) (#("match $1 {
		$0
	    }" 0 22 (fontified nil)) . 1201) (1217 . 1222) (1212 . 1214) (#("    " 0 4 (fontified nil)) . 1212) (1201 . 1220) (#("mathandle_connection" 0 3 (fontified nil) 3 20 (fontified nil)) . 1201) (1201 . 1204) (#("match" 0 5 (fontified nil)) . -1201) (1201 . 1206) (#("mat" 0 3 (fontified t)) . -1201) (undo-tree-id8953 . -3) (undo-tree-id8954 . -3) 1204 (1203 . 1204) (1201 . 1203) (#("i" 0 1 (fontified t)) . -1201) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (#("f" 0 1 (fontified t)) . -1202) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (#(" " 0 1 (fontified t)) . -1203) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (#("l" 0 1 (fontified t)) . -1204) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (#("e" 0 1 (fontified t)) . -1205) (undo-tree-id8967 . -1) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (#("t" 0 1 (fontified t)) . -1206) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (#(" " 0 1 (fontified t)) . -1207) (undo-tree-id8973 . -1) (undo-tree-id8974 . -1) 1208 (1207 . 1208) (1201 . 1207)) nil (25962 65094 506294 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 1201 1244 #s(yas--snippet nil (#s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil))) #s(yas--exit 1237 nil) 63 nil #s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil)) nil nil)) (apply yas--snippet-revive 1207 1232 #s(yas--snippet nil (#s(yas--field 1 1225 1231 nil nil nil t #s(yas--exit 1232 nil))) #s(yas--exit 1232 nil) 64 nil #s(yas--field 1 1225 1231 nil nil nil t #s(yas--exit 1232 nil)) #s(yas--field 1 1207 1232 nil nil nil t #s(yas--exit 1237 nil)) nil))) nil (25962 65094 506189 234000) 0 nil])
([nil nil ((#("}(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 1243) (undo-tree-id8810 . -1) (undo-tree-id8811 . -2) (undo-tree-id8812 . -2) (undo-tree-id8813 . -2) (undo-tree-id8814 . -2) (undo-tree-id8815 . -2) (undo-tree-id8816 . -2) (undo-tree-id8817 . -2) (undo-tree-id8818 . -2) (undo-tree-id8819 . -2) (undo-tree-id8820 . -2) (undo-tree-id8821 . -2) (undo-tree-id8822 . -2) (undo-tree-id8823 . -2) (undo-tree-id8824 . -2) (undo-tree-id8825 . -2) (undo-tree-id8826 . -2) (undo-tree-id8827 . -2) (undo-tree-id8828 . -2) (undo-tree-id8829 . -2) (undo-tree-id8830 . -2) (undo-tree-id8831 . -2) (undo-tree-id8832 . -2) (undo-tree-id8833 . -2) (undo-tree-id8834 . -2) (undo-tree-id8835 . -2) (undo-tree-id8836 . -2) (undo-tree-id8837 . -2) (undo-tree-id8838 . -2) (undo-tree-id8839 . -2) (undo-tree-id8840 . -2) (undo-tree-id8841 . -2) (undo-tree-id8842 . -2) (undo-tree-id8843 . -2) (undo-tree-id8844 . -2) (undo-tree-id8845 . -2) (undo-tree-id8846 . -2) (undo-tree-id8847 . -2) (undo-tree-id8848 . -2) (undo-tree-id8849 . -2) (undo-tree-id8850 . -2) (undo-tree-id8851 . -2) (undo-tree-id8852 . -2) (undo-tree-id8853 . -2) (undo-tree-id8854 . -2) (undo-tree-id8855 . -2) (undo-tree-id8856 . -2) (undo-tree-id8857 . -2) (undo-tree-id8858 . -2) (undo-tree-id8859 . -2) (undo-tree-id8860 . -2) (undo-tree-id8861 . -2) (undo-tree-id8862 . -2) (undo-tree-id8863 . -2) (undo-tree-id8864 . -2) (undo-tree-id8865 . -2) (undo-tree-id8866 . -2)) nil (25962 65094 506186 555000) 0 nil])
([nil nil ((#("stream" 0 6 (fontified t)) . 1243) (undo-tree-id8804 . -5) (undo-tree-id8805 . -6) (undo-tree-id8806 . -6) (undo-tree-id8807 . -6) (undo-tree-id8808 . -6) (undo-tree-id8809 . -6)) nil (25962 65094 506151 305000) 0 nil])
([nil nil ((#(");" 0 1 (fontified t face (rainbow-delimiters-mismatched-face)) 1 2 (fontified t)) . 1243) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -2) (undo-tree-id8801 . -1) (undo-tree-id8802 . -2) (undo-tree-id8803 . -2)) nil (25962 65094 506145 14000) 0 nil])
([nil nil ((1239 . 1243) (1239 . 1240) (#("}" 0 1 (fontified nil)) . -1239) (1239 . 1240) (#("	" 0 1 (fontified t)) . -1239) (undo-tree-id8715 . -1) 1240 (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1240) (undo-tree-id8716 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . 1241) (1239 . 1240) (#("    " 0 4 (fontified nil)) . 1239) (undo-tree-id8717 . -4) (undo-tree-id8718 . -4) (undo-tree-id8719 . -4) (undo-tree-id8720 . -4) (undo-tree-id8721 . -4) (undo-tree-id8722 . -4) (undo-tree-id8723 . -4) (undo-tree-id8724 . -4) (undo-tree-id8725 . -4) (undo-tree-id8726 . -4) (undo-tree-id8727 . -4) (undo-tree-id8728 . -4) (undo-tree-id8729 . -4) (undo-tree-id8730 . -4) (undo-tree-id8731 . -4) (undo-tree-id8732 . -4) (undo-tree-id8733 . -4) (undo-tree-id8734 . -4) (undo-tree-id8735 . -4) (undo-tree-id8736 . -4) (undo-tree-id8737 . -4) (undo-tree-id8738 . -4) (undo-tree-id8739 . -4) (undo-tree-id8740 . -4) (undo-tree-id8741 . -4) (undo-tree-id8742 . -4) (undo-tree-id8743 . -4) (undo-tree-id8744 . -4) (undo-tree-id8745 . -4) (undo-tree-id8746 . -4) (undo-tree-id8747 . -4) (undo-tree-id8748 . -4) (undo-tree-id8749 . -4) (undo-tree-id8750 . -4) (undo-tree-id8751 . -4) (undo-tree-id8752 . -4) (undo-tree-id8753 . -4) (undo-tree-id8754 . -4) (undo-tree-id8755 . -4) (undo-tree-id8756 . -4) (undo-tree-id8757 . -4) (undo-tree-id8758 . -4) (undo-tree-id8759 . -4) (undo-tree-id8760 . -4) (undo-tree-id8761 . -4) (undo-tree-id8762 . -4) (undo-tree-id8763 . -4) (undo-tree-id8764 . -4) (undo-tree-id8765 . -4) (undo-tree-id8766 . -4) (undo-tree-id8767 . -4) (undo-tree-id8768 . -4) (undo-tree-id8769 . -4) (undo-tree-id8770 . -4) (undo-tree-id8771 . -4) (undo-tree-id8772 . -4) (undo-tree-id8773 . -4) (undo-tree-id8774 . -4) (undo-tree-id8775 . -4) (undo-tree-id8776 . -4) (undo-tree-id8777 . -4) (undo-tree-id8778 . -4) (undo-tree-id8779 . -4) (undo-tree-id8780 . -4) (undo-tree-id8781 . -4) (undo-tree-id8782 . -4) (undo-tree-id8783 . -4) (1243 . 1245) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -1243) (undo-tree-id8784 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 1244) (1243 . 1245) (#("\"" 0 1 (fontified nil)) . -1243) (1243 . 1244)) nil (25962 65094 506118 552000) 0 nil])
([nil nil ((1242 . 1244) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1242 1244 nil nil nil t #s(yas--exit 1245 nil))) #s(yas--exit 1245 nil) 65 nil #s(yas--field 1 1242 1244 nil nil nil t #s(yas--exit 1245 nil)) nil nil)) (1237 . 1243) (#("Some($1)$0" 0 10 (fontified nil)) . 1237) (1237 . 1247) (#("S" 0 1 (fontified nil)) . 1237) (1237 . 1238) (#("Some(…)" 0 7 (fontified nil)) . -1237) (1237 . 1244) (#("S" 0 1 (fontified t face font-lock-type-face)) . -1237) (undo-tree-id9065 . -1) (undo-tree-id9066 . -1) (undo-tree-id9067 . -1) (undo-tree-id9068 . -1) (undo-tree-id9069 . -1) 1238 (1237 . 1238) (t 25962 65094 521738 108000)) nil (25962 65113 472737 598000) 0 nil])
([nil nil ((1269 . 1270) (1268 . 1269) (1267 . 1269) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -1267) (undo-tree-id9058 . -1) (#("buf" 0 3 (fontified nil)) . 1268) (undo-tree-id9059 . -3) (1267 . 1268) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil))) #s(yas--exit 1283 nil) 66 nil #s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil)) nil nil)) (1261 . 1271) (#("write(${1:buf})$0" 0 17 (fontified nil)) . 1261) (1261 . 1278) (#("w" 0 1 (fontified nil)) . 1261) (1261 . 1262) (#("write(…) (as Write)" 0 19 (fontified nil)) . -1261) (1261 . 1280) (#("w" 0 1 (fontified t)) . -1261) (undo-tree-id9060 . -1) (undo-tree-id9061 . -1) (undo-tree-id9062 . -1) 1262 (1260 . 1262) (1249 . 1260) (#("sen" 0 3 (fontified nil)) . 1249) (1249 . 1252) (#("send_stream" 0 11 (fontified nil)) . -1249) (1249 . 1260) (#("sen" 0 3 (fontified t)) . -1249) (undo-tree-id9063 . -3) (undo-tree-id9064 . -3) 1252 (1245 . 1252) (apply yas--snippet-revive 1237 1245 #s(yas--snippet nil (#s(yas--field 1 1242 1244 nil nil nil t #s(yas--exit 1245 nil))) #s(yas--exit 1245 nil) 65 nil #s(yas--field 1 1242 1244 nil nil nil t #s(yas--exit 1245 nil)) nil nil))) nil (25962 65113 472729 407000) 0 nil])
([nil nil ((apply yas--snippet-revive 1272 1282 #s(yas--snippet nil nil #s(yas--exit 1282 nil) 67 nil nil #s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1282 nil) 67 nil nil #s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil)) nil)) (1272 . 1282) (#("as_bytes()$0" 0 12 (fontified nil)) . 1272) (undo-tree-id9040 . -12) (1272 . 1284) (#("as" 0 2 (fontified nil)) . 1272) (undo-tree-id9041 . -2) (1272 . 1274) (#("as_bytes()" 0 10 (fontified nil)) . -1272) (undo-tree-id9042 . -10) (1272 . 1282) (#("as" 0 2 (fontified t face font-lock-keyword-face)) . -1272) (undo-tree-id9043 . -2) (undo-tree-id9044 . -2) (undo-tree-id9045 . -2) (undo-tree-id9046 . -2) (undo-tree-id9047 . -2) (undo-tree-id9048 . -2) (undo-tree-id9049 . -2) (undo-tree-id9050 . -2) (undo-tree-id9051 . -2) (undo-tree-id9052 . -2) (undo-tree-id9053 . -2) (undo-tree-id9054 . -2) (undo-tree-id9055 . -2) (undo-tree-id9056 . -2) (undo-tree-id9057 . -2) 1274 (1271 . 1274)) nil (25962 65113 472715 395000) 0 nil])
([nil nil ((apply yas--snippet-revive 1261 1283 #s(yas--snippet nil (#s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil))) #s(yas--exit 1283 nil) 66 nil #s(yas--field 1 1267 1282 nil nil nil t #s(yas--exit 1283 nil)) nil nil))) nil (25962 65113 472627 500000) 0 nil])
([nil nil ((1283 . 1284)) nil (25962 65113 472622 173000) 0 nil])
([nil nil ((1283 . 1284) (#(";" 0 1 (fontified t)) . -1283) (undo-tree-id9070 . -1) (undo-tree-id9071 . -1) (undo-tree-id9072 . -1) (undo-tree-id9073 . -1) (undo-tree-id9074 . -1) (undo-tree-id9075 . -1) (undo-tree-id9076 . -1) (undo-tree-id9077 . -1) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) 1284 (t 25962 65113 514199 309000)) nil (25962 65115 800359 750000) 0 nil])
([nil nil ((1291 . 1295) (apply yas--snippet-revive 1287 1291 #s(yas--snippet nil nil #s(yas--exit 1291 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1291 nil) 68 nil nil nil nil)) (1287 . 1291) (#("None$0" 0 6 (fontified nil)) . 1287) (1287 . 1293) (#("N" 0 1 (fontified nil)) . 1287) (1287 . 1288) (#("None" 0 4 (fontified nil)) . -1287) (1287 . 1291) (#("N" 0 1 (fontified t face font-lock-type-face)) . -1287) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) 1288 (1287 . 1288) (1284 . 1287) (t 25962 65115 842256 30000)) nil (25962 65130 154787 775000) 0 nil])
([nil nil ((" send_stream.write(\"OK\".as_bytes())," . 1248) (undo-tree-id9090 . -19) (undo-tree-id9091 . -36)) nil (25962 65130 154781 51000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1283 . 1284) (nil fontified nil 1248 . 1284) (1248 . 1284) 1247) nil (25962 65130 154777 566000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1330 . 1331) (nil fontified nil 1295 . 1331) (1295 . 1331) 1294) nil (25962 65130 154775 596000) 0 nil])
([nil nil ((#("OK" 0 2 (fontified t face font-lock-string-face)) . 1315) (undo-tree-id9088 . -1) (undo-tree-id9089 . -2)) nil (25962 65130 154772 359000) 0 nil])
([nil nil ((1315 . 1318)) nil (25962 65130 154756 527000) 0 nil])
([nil nil ((apply yas--snippet-revive 1356 1365 #s(yas--snippet nil nil nil 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 69 nil nil nil nil)) (1356 . 1365) (#("continue;" 0 9 (fontified nil)) . 1356) (1356 . 1365) (#("con" 0 3 (fontified nil)) . 1356) (1356 . 1359) (#("continue" 0 8 (fontified nil)) . -1356) (1356 . 1364) (#("con" 0 3 (fontified t)) . -1356) (undo-tree-id9095 . -3) (undo-tree-id9096 . -3) (undo-tree-id9097 . -3) 1359 (1356 . 1359) (1351 . 1356) (1352 . 1353) (#("	    " 0 5 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1351) (1351 . 1356) (1350 . 1352) (1343 . 1351) (t 25962 65130 174606 131000)) nil (25962 65147 301694 250000) 0 nil])
([nil nil ((1152 . 1156) (t 25962 65147 319026 888000)) nil (25962 65154 785835 618000) 0 nil])
([nil nil ((1112 . 1120) (#("i" 0 1 (fontified t)) . -1112) (undo-tree-id9098 . -1) (undo-tree-id9099 . -1) 1113 (1112 . 1113) (t 25962 65154 831211 914000)) nil (25962 65178 518750 610000) 0 nil])
([nil nil ((#("	println!(\"CONNECTION ESTABLISHED\");
" 0 1 (fontified t) 1 6 (fontified t face rust-builtin-formatting-macro) 6 9 (fontified t face rust-builtin-formatting-macro) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face font-lock-string-face) 11 23 (fontified t face font-lock-string-face) 23 34 (fontified t face font-lock-string-face) 34 35 (fontified t face (rainbow-delimiters-depth-3-face)) 35 36 (fontified t) 36 37 (fontified t)) . 1384) (undo-tree-id9126 . -36) (undo-tree-id9127 . -37) (undo-tree-id9128 . -37) (undo-tree-id9129 . -8) 1392 (t 25962 65178 563799 4000)) nil (25962 65187 525483 828000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1111 . 1112) (#("
" 0 1 (fontified nil)) . -1147) (1110 . 1148)) nil (25962 65187 525478 996000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1149) (undo-tree-id9100 . -1) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) 1150 (1149 . 1150) (#("	" 0 1 (fontified nil)) . 1148) (undo-tree-id9113 . -1) (undo-tree-id9114 . -1) (undo-tree-id9115 . -1) (undo-tree-id9116 . -1) (undo-tree-id9117 . -1) (undo-tree-id9118 . -1) (undo-tree-id9119 . -1) (undo-tree-id9120 . -1) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (1147 . 1150)) nil (25962 65187 525474 36000) 0 nil])
([nil nil ((897 . 901) (t 25962 65187 544022 140000)) nil (25962 65202 893040 936000) 0 nil])
([nil nil ((898 . 902) (#("    " 0 4 (fontified nil)) . 897) (undo-tree-id9187 . -4) (undo-tree-id9188 . -4) (undo-tree-id9189 . -4) (undo-tree-id9190 . -4) (undo-tree-id9191 . -4) (undo-tree-id9192 . -4) (undo-tree-id9193 . -4) (undo-tree-id9194 . -4) (undo-tree-id9195 . -4) (undo-tree-id9196 . -4) (undo-tree-id9197 . -4) (undo-tree-id9198 . -4) (undo-tree-id9199 . -4) (undo-tree-id9200 . -4) (undo-tree-id9201 . -4) (undo-tree-id9202 . -4) (undo-tree-id9203 . -4) (undo-tree-id9204 . -4) (undo-tree-id9205 . -4) (undo-tree-id9206 . -4) (undo-tree-id9207 . -4) (undo-tree-id9208 . -4) (undo-tree-id9209 . -4) (undo-tree-id9210 . -4) (undo-tree-id9211 . -4) (undo-tree-id9212 . -4) (undo-tree-id9213 . -4) (undo-tree-id9214 . -4) (undo-tree-id9215 . -4) (undo-tree-id9216 . -4) (undo-tree-id9217 . -4) (undo-tree-id9218 . -4) (undo-tree-id9219 . -4) (undo-tree-id9220 . -4) (undo-tree-id9221 . -4) (undo-tree-id9222 . -4) (undo-tree-id9223 . -4) (undo-tree-id9224 . -4) (undo-tree-id9225 . -4) (undo-tree-id9226 . -4) (undo-tree-id9227 . -4) (undo-tree-id9228 . -4) (undo-tree-id9229 . -4) (undo-tree-id9230 . -4) (undo-tree-id9231 . -3) (undo-tree-id9232 . -3) (undo-tree-id9233 . -3) (undo-tree-id9234 . -3) (undo-tree-id9235 . -3) (undo-tree-id9236 . -3) (undo-tree-id9237 . -3) (undo-tree-id9238 . -3) (undo-tree-id9239 . -3) (undo-tree-id9240 . -3) (undo-tree-id9241 . -3) (undo-tree-id9242 . -3) (undo-tree-id9243 . -3) (undo-tree-id9244 . -3) (undo-tree-id9245 . -3) (undo-tree-id9246 . -3) (undo-tree-id9247 . -3) (undo-tree-id9248 . -3) (undo-tree-id9249 . -3) (undo-tree-id9250 . -3) (undo-tree-id9251 . -3) (undo-tree-id9252 . -3) (undo-tree-id9253 . -4) (901 . 902)) nil (25962 65202 893036 829000) 0 nil])
([nil nil ((933 . 934) (apply yas--snippet-revive 901 933 #s(yas--snippet nil (#s(yas--field 1 920 924 nil nil nil nil #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil))) #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil))) #s(yas--exit 933 nil) 70 nil #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil)) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 920 924 nil nil nil nil #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil))) #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil))) #s(yas--exit 933 nil) 70 nil #s(yas--field 2 926 932 nil nil nil nil #s(yas--exit 933 nil)) nil nil)) (901 . 933) (#("append_magnet_link(${1:user}, ${2:magnet})$0" 0 44 (fontified nil)) . 901) (901 . 945) (#("ap" 0 2 (fontified nil)) . 901) (901 . 903) (#("append_magnet_link(…)" 0 21 (fontified nil)) . -901) (901 . 922) (#("ap" 0 2 (fontified t)) . -901) (undo-tree-id9130 . -2) (undo-tree-id9131 . -2) (undo-tree-id9132 . -2) (undo-tree-id9133 . -2) (undo-tree-id9134 . -2) (undo-tree-id9135 . -2) (undo-tree-id9136 . -2) (undo-tree-id9137 . -2) (undo-tree-id9138 . -2) (undo-tree-id9139 . -2) (undo-tree-id9140 . -2) (undo-tree-id9141 . -2) (undo-tree-id9142 . -2) (undo-tree-id9143 . -2) (undo-tree-id9144 . -2) (undo-tree-id9145 . -2) (undo-tree-id9146 . -2) (undo-tree-id9147 . -2) (undo-tree-id9148 . -2) (undo-tree-id9149 . -2) (undo-tree-id9150 . -2) (undo-tree-id9151 . -2) (undo-tree-id9152 . -2) (undo-tree-id9153 . -2) (undo-tree-id9154 . -2) (undo-tree-id9155 . -2) (undo-tree-id9156 . -2) (undo-tree-id9157 . -2) (undo-tree-id9158 . -2) (undo-tree-id9159 . -2) (undo-tree-id9160 . -2) (undo-tree-id9161 . -2) (undo-tree-id9162 . -2) (undo-tree-id9163 . -2) (undo-tree-id9164 . -2) (undo-tree-id9165 . -2) (undo-tree-id9166 . -2) (undo-tree-id9167 . -2) (undo-tree-id9168 . -2) (undo-tree-id9169 . -2) (undo-tree-id9170 . -2) (undo-tree-id9171 . -2) (undo-tree-id9172 . -2) (undo-tree-id9173 . -2) (undo-tree-id9174 . -2) (undo-tree-id9175 . -2) (undo-tree-id9176 . -2) (undo-tree-id9177 . -2) (undo-tree-id9178 . -2) (undo-tree-id9179 . -2) (undo-tree-id9180 . -2) (undo-tree-id9181 . -2) (undo-tree-id9182 . -2) (undo-tree-id9183 . -2) (undo-tree-id9184 . -2) (undo-tree-id9185 . -2) (undo-tree-id9186 . -2) 903 (901 . 903) (897 . 901)) nil (25962 65202 892959 81000) 0 nil])
([nil nil ((547 . 548) (548 . 552) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 547) (547 . 548) (546 . 548) (545 . 547) (544 . 545) (540 . 544) (#("us" 0 2 (fontified nil)) . 540) (540 . 542) (#("user" 0 4 (fontified nil)) . -540) (540 . 544) (#("us" 0 2 (fontified t)) . -540) (undo-tree-id9254 . -2) (undo-tree-id9255 . -2) 542 (524 . 542) (#(" " 0 1 (fontified t)) . -524) (undo-tree-id9256 . -1) 525 (523 . 525) (#(" " 0 1 (fontified t)) . -523) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (#("=" 0 1 (fontified t)) . -524) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) 525 (520 . 525) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -520) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -521) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) 522 (515 . 522) (#("l" 0 1 (fontified t)) . -515) (undo-tree-id9265 . -1) (#("e" 0 1 (fontified t)) . -516) (undo-tree-id9266 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -517) (undo-tree-id9267 . -1) (#(" " 0 1 (fontified t)) . -518) (undo-tree-id9268 . -1) 519 (515 . 519) (t 25962 65202 904405 28000)) nil (25962 65231 910513 275000) 0 nil])
([nil nil ((554 . 555)) nil (25962 65231 910485 425000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face font-lock-type-face)) . -548) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) 549 (548 . 549) (t 25962 65231 917132 278000)) nil (25962 65289 322179 299000) 0 nil])
([nil nil ((568 . 569) (562 . 568) (561 . 563) (#("\"" 0 1 (fontified nil)) . -561) (557 . 562) (apply yas--snippet-revive 548 557 #s(yas--snippet nil nil #s(yas--exit 557 nil) 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 557 nil) 71 nil nil nil nil)) (548 . 557) (#("User::Bob$0" 0 11 (fontified nil)) . 548) (548 . 559) (#("B" 0 1 (fontified nil)) . 548) (548 . 549) (#("User::Bob" 0 9 (fontified nil)) . -548) (548 . 557) (#("B" 0 1 (fontified t face font-lock-type-face)) . -548) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) 549 (548 . 549)) nil (25962 65289 322173 773000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -571) (undo-tree-id9287 . -5) (undo-tree-id9288 . -5) (undo-tree-id9289 . -5) (undo-tree-id9290 . -5) (undo-tree-id9291 . -5) (undo-tree-id9292 . -5) (undo-tree-id9293 . -5) (undo-tree-id9294 . -5) (undo-tree-id9295 . -5) (undo-tree-id9296 . -5) (undo-tree-id9297 . -5) (undo-tree-id9298 . -5) (undo-tree-id9299 . -5) (undo-tree-id9300 . -5) (undo-tree-id9301 . -5) (undo-tree-id9302 . -5) (undo-tree-id9303 . -5) (undo-tree-id9304 . -5) (undo-tree-id9305 . -5) (undo-tree-id9306 . -5) (undo-tree-id9307 . -5) (undo-tree-id9308 . -5) (undo-tree-id9309 . -5) (undo-tree-id9310 . -5) (undo-tree-id9311 . -5) (undo-tree-id9312 . -5) (undo-tree-id9313 . -5) (undo-tree-id9314 . -5) (undo-tree-id9315 . -5) (undo-tree-id9316 . -5) (undo-tree-id9317 . -5) (undo-tree-id9318 . -5) (undo-tree-id9319 . -5) (undo-tree-id9320 . -5) (undo-tree-id9321 . -5) (undo-tree-id9322 . -5) (undo-tree-id9323 . -5) (undo-tree-id9324 . -5) (undo-tree-id9325 . -5) (undo-tree-id9326 . -5) (undo-tree-id9327 . -5) (undo-tree-id9328 . -5) (undo-tree-id9329 . -5) (undo-tree-id9330 . -5) (undo-tree-id9331 . -5) (undo-tree-id9332 . -5) (undo-tree-id9333 . -5) (undo-tree-id9334 . -5) (undo-tree-id9335 . -5) (undo-tree-id9336 . -5) (undo-tree-id9337 . -5) (undo-tree-id9338 . -5) (undo-tree-id9339 . -5) (undo-tree-id9340 . -5) (undo-tree-id9341 . -5) (undo-tree-id9342 . -5) (undo-tree-id9343 . -5) (undo-tree-id9344 . -5) (undo-tree-id9345 . -5) (undo-tree-id9346 . -5) (undo-tree-id9347 . -5) (undo-tree-id9348 . -5) (undo-tree-id9349 . -5) (undo-tree-id9350 . -5) (undo-tree-id9351 . -5) (undo-tree-id9352 . -5) 576 (570 . 576)) nil (25962 65289 322168 124000) 0 nil])
([nil nil ((570 . 571)) nil (25962 65289 322125 499000) 0 nil])
([nil nil ((587 . 594) (586 . 588) (#("\"" 0 1 (fontified nil)) . -586) (584 . 587) (582 . 584) (apply yas--snippet-revive 573 582 #s(yas--snippet nil nil #s(yas--exit 582 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 582 nil) 72 nil nil nil nil)) (573 . 582) (#("User::Sam$0" 0 11 (fontified nil)) . 573) (573 . 584) (#("Sam" 0 3 (fontified nil)) . 573) (573 . 576) (#("User::Sam" 0 9 (fontified nil)) . -573) (573 . 582) (#("Sam" 0 3 (fontified t face font-lock-type-face)) . -573) (undo-tree-id9279 . -3) (undo-tree-id9280 . -3) (undo-tree-id9281 . -3) (undo-tree-id9282 . -3) (undo-tree-id9283 . -3) 576 (573 . 576) (#("S" 0 1 (fontified t face font-lock-type-face)) . -573) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) 574 (573 . 574) (571 . 573)) nil (25962 65289 322122 968000) 0 nil])
([nil nil ((612 . 619) (611 . 613) (#("\"" 0 1 (fontified nil)) . -611) (607 . 612) (apply yas--snippet-revive 604 607 #s(yas--snippet nil nil #s(yas--exit 607 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 607 nil) 73 nil nil nil nil)) (604 . 607) (#("Joe$0" 0 5 (fontified nil)) . 604) (604 . 609) (#("Joe" 0 3 (fontified nil)) . -604) (604 . 607) (602 . 604) (598 . 602) (#("Us" 0 2 (fontified nil)) . 598) (598 . 600) (#("User" 0 4 (fontified nil)) . -598) (598 . 602) (#("Us" 0 2 (fontified t face font-lock-type-face)) . -598) (undo-tree-id9274 . -1) (undo-tree-id9275 . -2) (undo-tree-id9276 . -2) 600 (598 . 600) (#("j" 0 1 (fontified t)) . -598) (undo-tree-id9277 . -1) (#("o" 0 1 (fontified t)) . -599) (undo-tree-id9278 . -1) 600 (598 . 600) (596 . 598) (595 . 596)) nil (25962 65289 322112 478000) 0 nil])
([nil nil ((620 . 621)) nil (25962 65289 322104 432000) 0 nil])
([nil nil ((637 . 644) (636 . 638) (#("\"" 0 1 (fontified nil)) . -636) (633 . 637) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -633) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 634) (632 . 635) (apply yas--snippet-revive 629 632 #s(yas--snippet nil nil #s(yas--exit 632 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 632 nil) 74 nil nil nil nil)) (629 . 632) (#("Ram$0" 0 5 (fontified nil)) . 629) (629 . 634) (#("Ram" 0 3 (fontified nil)) . -629) (629 . 632) (627 . 629) (623 . 627) (#("Us" 0 2 (fontified nil)) . 623) (623 . 625) (#("User" 0 4 (fontified nil)) . -623) (623 . 627) (#("Us" 0 2 (fontified t face font-lock-type-face)) . -623) (undo-tree-id9271 . -1) (undo-tree-id9272 . -2) (undo-tree-id9273 . -2) 625 (623 . 625) (621 . 623)) nil (25962 65289 322098 698000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -656) (undo-tree-id9925 . -4) (undo-tree-id9926 . -4) (undo-tree-id9927 . -4) (undo-tree-id9928 . -4) (undo-tree-id9929 . -4) (undo-tree-id9930 . -4) (undo-tree-id9931 . -4) (undo-tree-id9932 . -4) (undo-tree-id9933 . -4) (undo-tree-id9934 . -4) (undo-tree-id9935 . -4) (undo-tree-id9936 . -4) (undo-tree-id9937 . -4) (undo-tree-id9938 . -4) (undo-tree-id9939 . -4) (undo-tree-id9940 . -4) (undo-tree-id9941 . -4) (undo-tree-id9942 . -4) (undo-tree-id9943 . -4) (undo-tree-id9944 . -4) (undo-tree-id9945 . -4) (undo-tree-id9946 . -4) (undo-tree-id9947 . -4) 660 (656 . 660) (#("    " 0 4 (fontified nil)) . 655) (undo-tree-id9948 . -4) (undo-tree-id9949 . -4) (undo-tree-id9950 . -4) (undo-tree-id9951 . -4) (undo-tree-id9952 . -4) (undo-tree-id9953 . -4) (undo-tree-id9954 . -4) (undo-tree-id9955 . -4) (undo-tree-id9956 . -4) (undo-tree-id9957 . -4) (undo-tree-id9958 . -4) (undo-tree-id9959 . -4) (undo-tree-id9960 . -4) (undo-tree-id9961 . -4) (undo-tree-id9962 . -4) (undo-tree-id9963 . -4) (undo-tree-id9964 . -4) (undo-tree-id9965 . -4) (undo-tree-id9966 . -4) (undo-tree-id9967 . -4) (undo-tree-id9968 . -4) (undo-tree-id9969 . -4) (undo-tree-id9970 . -4) (655 . 660) (#("    " 0 4 (fontified nil)) . 654) (undo-tree-id9971 . -4) (undo-tree-id9972 . -4) (undo-tree-id9973 . -4) (undo-tree-id9974 . -4) (undo-tree-id9975 . -4) (undo-tree-id9976 . -4) (undo-tree-id9977 . -4) (undo-tree-id9978 . -4) (undo-tree-id9979 . -4) (undo-tree-id9980 . -4) (undo-tree-id9981 . -4) (undo-tree-id9982 . -4) (undo-tree-id9983 . -4) (undo-tree-id9984 . -4) (undo-tree-id9985 . -4) (undo-tree-id9986 . -4) (undo-tree-id9987 . -4) (undo-tree-id9988 . -4) (undo-tree-id9989 . -4) (undo-tree-id9990 . -4) (undo-tree-id9991 . -4) (undo-tree-id9992 . -4) (undo-tree-id9993 . -4) (653 . 659) (t 25962 65289 342586 364000)) nil (25963 48 332251 872000) 0 nil])
([nil nil ((668 . 670) (#("-" 0 1 (fontified t)) . -668) (undo-tree-id9752 . -1) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1) (undo-tree-id9761 . -1) (undo-tree-id9762 . -1) (undo-tree-id9763 . -1) (undo-tree-id9764 . -1) (undo-tree-id9765 . -1) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -1) (undo-tree-id9769 . -1) (undo-tree-id9770 . -1) (undo-tree-id9771 . -1) (undo-tree-id9772 . -1) (undo-tree-id9773 . -1) (undo-tree-id9774 . -1) (undo-tree-id9775 . -1) (undo-tree-id9776 . -1) (undo-tree-id9777 . -1) (undo-tree-id9778 . -1) (undo-tree-id9779 . -1) (undo-tree-id9780 . -1) (undo-tree-id9781 . -1) (undo-tree-id9782 . -1) (undo-tree-id9783 . -1) (undo-tree-id9784 . -1) (undo-tree-id9785 . -1) (undo-tree-id9786 . -1) (undo-tree-id9787 . -1) (undo-tree-id9788 . -1) (undo-tree-id9789 . -1) (undo-tree-id9790 . -1) (undo-tree-id9791 . -1) (undo-tree-id9792 . -1) (undo-tree-id9793 . -1) (undo-tree-id9794 . -1) (undo-tree-id9795 . -1) (undo-tree-id9796 . -1) (undo-tree-id9797 . -1) (undo-tree-id9798 . -1) (undo-tree-id9799 . -1) (undo-tree-id9800 . -1) (undo-tree-id9801 . -1) (undo-tree-id9802 . -1) (undo-tree-id9803 . -1) (undo-tree-id9804 . -1) (undo-tree-id9805 . -1) (undo-tree-id9806 . -1) (undo-tree-id9807 . -1) (undo-tree-id9808 . -1) (undo-tree-id9809 . -1) (undo-tree-id9810 . -1) (undo-tree-id9811 . -1) (undo-tree-id9812 . -1) (undo-tree-id9813 . -1) (undo-tree-id9814 . -1) (undo-tree-id9815 . -1) (undo-tree-id9816 . -1) (undo-tree-id9817 . -1) (undo-tree-id9818 . -1) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1) (undo-tree-id9823 . -1) (undo-tree-id9824 . -1) (undo-tree-id9825 . -1) (undo-tree-id9826 . -1) (undo-tree-id9827 . -1) (undo-tree-id9828 . -1) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) (undo-tree-id9837 . -1) (undo-tree-id9838 . -1) (undo-tree-id9839 . -1) (undo-tree-id9840 . -1) (undo-tree-id9841 . -1) (undo-tree-id9842 . -1) (undo-tree-id9843 . -1) (undo-tree-id9844 . -1) (undo-tree-id9845 . -1) (undo-tree-id9846 . -1) (undo-tree-id9847 . -1) (undo-tree-id9848 . -1) (undo-tree-id9849 . -1) (undo-tree-id9850 . -1) (undo-tree-id9851 . -1) (undo-tree-id9852 . -1) (undo-tree-id9853 . -1) (undo-tree-id9854 . -1) (undo-tree-id9855 . -1) (undo-tree-id9856 . -1) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (#(" " 0 1 (fontified t)) . -669) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) (undo-tree-id9867 . -1) (undo-tree-id9868 . -1) (undo-tree-id9869 . -1) (undo-tree-id9870 . -1) (undo-tree-id9871 . -1) (undo-tree-id9872 . -1) (undo-tree-id9873 . -1) (undo-tree-id9874 . -1) (undo-tree-id9875 . -1) (undo-tree-id9876 . -1) (undo-tree-id9877 . -1) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1) (undo-tree-id9881 . -1) (undo-tree-id9882 . -1) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -1) (undo-tree-id9887 . -1) (undo-tree-id9888 . -1) (undo-tree-id9889 . -1) (undo-tree-id9890 . -1) (undo-tree-id9891 . -1) (undo-tree-id9892 . -1) (undo-tree-id9893 . -1) (undo-tree-id9894 . -1) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) (undo-tree-id9901 . -1) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) (undo-tree-id9908 . -1) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1) (undo-tree-id9923 . -1) (undo-tree-id9924 . -1) 670 (659 . 670) (655 . 659)) nil (25963 48 332204 136000) 0 nil])
([nil nil ((663 . 667)) nil (25963 48 332105 553000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -689) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) 690 (689 . 690) (#("o" 0 1 (fontified t)) . -689) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) (#("p" 0 1 (fontified t)) . -690) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) 691 (689 . 691) (#("o" 0 1 (fontified t)) . -689) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (#("p" 0 1 (fontified t)) . -690) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) 691 (687 . 691) (683 . 687) (#("Fi" 0 2 (fontified nil)) . 683) (683 . 685) (#("File" 0 4 (fontified nil)) . -683) (683 . 687) (#("Fi" 0 2 (fontified t face font-lock-type-face)) . -683) (undo-tree-id9700 . -1) (undo-tree-id9701 . -2) (undo-tree-id9702 . -2) 685 (683 . 685) (#("a" 0 1 (fontified t)) . -683) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (#("p" 0 1 (fontified t)) . -684) (undo-tree-id9706 . -1) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (#("p" 0 1 (fontified t)) . -685) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) 686 (684 . 686) (683 . 684) (#("o" 0 1 (fontified t)) . -683) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) 684 (#("p" 0 1 (fontified t)) . -684) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) 685 (683 . 685) (#("f" 0 1 (fontified t)) . -683) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (#("o" 0 1 (fontified t)) . -684) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) 685 (681 . 685) (679 . 681) (#("fs" 0 2 (fontified nil)) . 679) (679 . 681) (#("fs" 0 2 (fontified t)) . -679) (undo-tree-id9720 . -2) (undo-tree-id9721 . -2) (undo-tree-id9722 . -2) 681 (679 . 681) (#("f" 0 1 (fontified t)) . -679) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) 680 (679 . 680) (#("f" 0 1 (fontified t)) . -679) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (#("i" 0 1 (fontified t)) . -680) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (#("l" 0 1 (fontified t)) . -681) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (#("e" 0 1 (fontified t)) . -682) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) 683 (675 . 683) (#("t" 0 1 (fontified t)) . -675) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) 676 (674 . 676) (#("f" 0 1 (fontified t)) . -674) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (#("o" 0 1 (fontified t)) . -675) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (#("p" 0 1 (fontified t)) . -676) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (#("e" 0 1 (fontified t)) . -677) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (#("n" 0 1 (fontified t)) . -678) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) 679 (674 . 679) (#(" " 0 1 (fontified t)) . -674) (undo-tree-id9751 . -1) 675 (674 . 675)) nil (25963 48 332097 330000) 0 nil])
([nil nil ((#("    let mut file = std::fs::File::
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 22 (fontified t face font-lock-constant-face) 22 24 (fontified t) 24 26 (fontified t face font-lock-constant-face) 26 28 (fontified t) 28 32 (fontified t face font-lock-type-face) 32 34 (fontified t) 34 35 (fontified t)) . 655) (undo-tree-id9494 . 1) (undo-tree-id9495 . -34) (undo-tree-id9496 . -34) (undo-tree-id9497 . -33) (undo-tree-id9498 . -33) (undo-tree-id9499 . -35) (undo-tree-id9500 . -35) (undo-tree-id9501 . -35) (undo-tree-id9502 . -35) (undo-tree-id9503 . -35) (undo-tree-id9504 . -35) (undo-tree-id9505 . -35) (undo-tree-id9506 . -35) (undo-tree-id9507 . -35) (undo-tree-id9508 . -35) (undo-tree-id9509 . -35) (undo-tree-id9510 . -35) (undo-tree-id9511 . -35) (undo-tree-id9512 . -35) (undo-tree-id9513 . -35) (undo-tree-id9514 . -35) (undo-tree-id9515 . -35) (undo-tree-id9516 . -35) (undo-tree-id9517 . -35) (undo-tree-id9518 . -35) (undo-tree-id9519 . -35) (undo-tree-id9520 . -17) (undo-tree-id9521 . -17) (undo-tree-id9522 . -17) (undo-tree-id9523 . -17) (undo-tree-id9524 . -17) (undo-tree-id9525 . -17) (undo-tree-id9526 . -17) (undo-tree-id9527 . -17) (undo-tree-id9528 . -17) (undo-tree-id9529 . -17) (undo-tree-id9530 . -17) (undo-tree-id9531 . -17) (undo-tree-id9532 . -17) (undo-tree-id9533 . -17) (undo-tree-id9534 . -17) (undo-tree-id9535 . -17) (undo-tree-id9536 . -17) (undo-tree-id9537 . -17) (undo-tree-id9538 . -17) (undo-tree-id9539 . -17) (undo-tree-id9540 . -17) (undo-tree-id9541 . -17) (undo-tree-id9542 . -17) (undo-tree-id9543 . -17) (undo-tree-id9544 . -17) (undo-tree-id9545 . -17) (undo-tree-id9546 . -17) (undo-tree-id9547 . -17) (undo-tree-id9548 . -17) (undo-tree-id9549 . -17) (undo-tree-id9550 . -17) (undo-tree-id9551 . -17) (undo-tree-id9552 . -17) (undo-tree-id9553 . -17) (undo-tree-id9554 . -17) (undo-tree-id9555 . -17) (undo-tree-id9556 . -17) (undo-tree-id9557 . -17) (undo-tree-id9558 . -17) (undo-tree-id9559 . -17) (undo-tree-id9560 . -17) (undo-tree-id9561 . -17) (undo-tree-id9562 . -17) (undo-tree-id9563 . -17) (undo-tree-id9564 . -17) (undo-tree-id9565 . -17) (undo-tree-id9566 . -17) (undo-tree-id9567 . -17) (undo-tree-id9568 . -17) (undo-tree-id9569 . -17) (undo-tree-id9570 . -17) (undo-tree-id9571 . -17) (undo-tree-id9572 . -17) (undo-tree-id9573 . -17) (undo-tree-id9574 . -17) (undo-tree-id9575 . -17) (undo-tree-id9576 . -17) (undo-tree-id9577 . -17) (undo-tree-id9578 . -17) (undo-tree-id9579 . -17) (undo-tree-id9580 . -17) (undo-tree-id9581 . -17) (undo-tree-id9582 . -17) (undo-tree-id9583 . -17) (undo-tree-id9584 . -17) (undo-tree-id9585 . -17) (undo-tree-id9586 . -17) (undo-tree-id9587 . -17) (undo-tree-id9588 . -17) (undo-tree-id9589 . -17) (undo-tree-id9590 . -17) (undo-tree-id9591 . -17) (undo-tree-id9592 . -17) (undo-tree-id9593 . -17) (undo-tree-id9594 . -17) (undo-tree-id9595 . -17) (undo-tree-id9596 . -17) (undo-tree-id9597 . -17) (undo-tree-id9598 . -17) (undo-tree-id9599 . -17) (undo-tree-id9600 . -17) (undo-tree-id9601 . -17) (undo-tree-id9602 . -17) (undo-tree-id9603 . -17) (undo-tree-id9604 . -17) (undo-tree-id9605 . -17) (undo-tree-id9606 . -17) (undo-tree-id9607 . -17) (undo-tree-id9608 . -17) (undo-tree-id9609 . -17) (undo-tree-id9610 . -17) (undo-tree-id9611 . -17) (undo-tree-id9612 . -17) (undo-tree-id9613 . -17) (undo-tree-id9614 . -17) (undo-tree-id9615 . -17) (undo-tree-id9616 . -17) (undo-tree-id9617 . -17) (undo-tree-id9618 . -17) (undo-tree-id9619 . -17) (undo-tree-id9620 . -17) (undo-tree-id9621 . -17) (undo-tree-id9622 . -17) (undo-tree-id9623 . -28) (undo-tree-id9624 . 1) (undo-tree-id9625 . -34) (undo-tree-id9626 . -35) (undo-tree-id9627 . -34) (undo-tree-id9628 . -35) (undo-tree-id9629 . -34) (undo-tree-id9630 . -34) (undo-tree-id9631 . -34) (undo-tree-id9632 . -34) (undo-tree-id9633 . -34) (undo-tree-id9634 . -34) (undo-tree-id9635 . -34) (undo-tree-id9636 . -34) (undo-tree-id9637 . -34) (undo-tree-id9638 . -34) (undo-tree-id9639 . -34) (undo-tree-id9640 . -34) (undo-tree-id9641 . -34) (undo-tree-id9642 . -34) (undo-tree-id9643 . -34) (undo-tree-id9644 . -34) (undo-tree-id9645 . -34) (undo-tree-id9646 . -34) (undo-tree-id9647 . -34) (undo-tree-id9648 . -34) (undo-tree-id9649 . -34) (undo-tree-id9650 . -34) (undo-tree-id9651 . -34) (undo-tree-id9652 . -34) (undo-tree-id9653 . -34) (undo-tree-id9654 . -34) (undo-tree-id9655 . -34) (undo-tree-id9656 . -34) (undo-tree-id9657 . -34) (undo-tree-id9658 . -34) (undo-tree-id9659 . -34) (undo-tree-id9660 . -34) (undo-tree-id9661 . -34) (undo-tree-id9662 . -33) (undo-tree-id9663 . -33) (undo-tree-id9664 . -33) (undo-tree-id9665 . -33) (undo-tree-id9666 . -33) (undo-tree-id9667 . -33) (undo-tree-id9668 . -33) (undo-tree-id9669 . -33) (undo-tree-id9670 . -33) (undo-tree-id9671 . -33) (undo-tree-id9672 . -33) (undo-tree-id9673 . -33) (undo-tree-id9674 . -33) (undo-tree-id9675 . -33) (undo-tree-id9676 . -33) (undo-tree-id9677 . -33) (undo-tree-id9678 . -33) (undo-tree-id9679 . -33) (undo-tree-id9680 . -33) (undo-tree-id9681 . -33) (undo-tree-id9682 . -33) (undo-tree-id9683 . -33) (undo-tree-id9684 . -33) (undo-tree-id9685 . -35) 688) nil (25963 48 332022 563000) 0 nil])
([nil nil ((713 . 714) (apply yas--snippet-revive 708 713 #s(yas--snippet nil nil #s(yas--exit 713 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 713 nil) 75 nil nil nil nil)) (708 . 713) (#("new()$0" 0 7 (fontified nil)) . 708) (708 . 715) (#("ne" 0 2 (fontified nil)) . 708) (708 . 710) (#("new()" 0 5 (fontified nil)) . -708) (708 . 713) (#("ne" 0 2 (fontified t)) . -708) (undo-tree-id9475 . -2) (undo-tree-id9476 . -2) (undo-tree-id9477 . -2) (undo-tree-id9478 . -2) 710 (708 . 710) (706 . 708) (75 . 92) (678 . 689) (#("Open" 0 4 (fontified nil)) . 678) (678 . 682) (#("OpenOptions (use std::fs::OpenOptions)" 0 38 (fontified nil)) . -678) (678 . 716) (#("Open" 0 4 (fontified t face font-lock-type-face)) . -678) (undo-tree-id9479 . -1) (undo-tree-id9480 . -4) (undo-tree-id9481 . -4) 682 (678 . 682) (#("f" 0 1 (fontified t)) . -678) (undo-tree-id9482 . -1) (undo-tree-id9483 . -1) (undo-tree-id9484 . -1) (#("i" 0 1 (fontified t)) . -679) (undo-tree-id9485 . -1) (undo-tree-id9486 . -1) (undo-tree-id9487 . -1) (#("l" 0 1 (fontified t)) . -680) (undo-tree-id9488 . -1) (undo-tree-id9489 . -1) (#("e" 0 1 (fontified t)) . -681) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) 682 (681 . 682) (660 . 681) (656 . 660) (#("    " 0 4 (fontified nil)) . 655) (undo-tree-id9492 . -4) (655 . 660) (#("    " 0 4 (fontified nil)) . 654) (undo-tree-id9493 . -4) (658 . 659) (654 . 658)) nil (25963 48 331845 887000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -717) (undo-tree-id9416 . -4) (undo-tree-id9417 . -4) (undo-tree-id9418 . -4) (undo-tree-id9419 . -4) (undo-tree-id9420 . -4) (undo-tree-id9421 . -4) (undo-tree-id9422 . -4) (undo-tree-id9423 . -4) (undo-tree-id9424 . -4) (undo-tree-id9425 . -4) (undo-tree-id9426 . -4) (undo-tree-id9427 . -4) (undo-tree-id9428 . -4) 721 (717 . 721) (#("    " 0 4 (fontified nil)) . 716) (undo-tree-id9429 . -4) (undo-tree-id9430 . -4) (undo-tree-id9431 . -4) (undo-tree-id9432 . -4) (undo-tree-id9433 . -4) (undo-tree-id9434 . -4) (undo-tree-id9435 . -4) (undo-tree-id9436 . -4) (undo-tree-id9437 . -4) (undo-tree-id9438 . -4) (undo-tree-id9439 . -4) (undo-tree-id9440 . -4) (undo-tree-id9441 . -4) (undo-tree-id9442 . -4) (undo-tree-id9443 . -4) (undo-tree-id9444 . -4) (undo-tree-id9445 . -4) (undo-tree-id9446 . -4) (undo-tree-id9447 . -4) (undo-tree-id9448 . -4) (undo-tree-id9449 . -4) (undo-tree-id9450 . -4) (undo-tree-id9451 . -4) (716 . 721) (#("    " 0 4 (fontified nil)) . 715) (undo-tree-id9452 . -4) (undo-tree-id9453 . -4) (undo-tree-id9454 . -4) (undo-tree-id9455 . -4) (undo-tree-id9456 . -4) (undo-tree-id9457 . -4) (undo-tree-id9458 . -4) (undo-tree-id9459 . -4) (undo-tree-id9460 . -4) (undo-tree-id9461 . -4) (undo-tree-id9462 . -4) (undo-tree-id9463 . -4) (undo-tree-id9464 . -4) (undo-tree-id9465 . -4) (undo-tree-id9466 . -4) (undo-tree-id9467 . -4) (undo-tree-id9468 . -4) (undo-tree-id9469 . -4) (undo-tree-id9470 . -4) (undo-tree-id9471 . -4) (undo-tree-id9472 . -4) (undo-tree-id9473 . -4) (undo-tree-id9474 . -4) (714 . 720)) nil (25963 48 331826 379000) 0 nil])
([nil nil ((685 . 686)) nil (25963 48 331655 320000) 0 nil])
([nil nil ((apply yas--snippet-revive 740 744 #s(yas--snippet nil nil nil 77 nil nil #s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 77 nil nil #s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil)) nil)) (740 . 744) (#("true" 0 4 (fontified nil)) . 740) (undo-tree-id9358 . -4) (740 . 744) (#("tr" 0 2 (fontified nil)) . 740) (undo-tree-id9359 . -2) (740 . 742) (#("true" 0 4 (fontified nil)) . -740) (undo-tree-id9360 . -4) (740 . 744) (#("tr" 0 2 (fontified t)) . -740) (undo-tree-id9361 . -2) (undo-tree-id9362 . -2) (undo-tree-id9363 . -2) (undo-tree-id9364 . -2) (undo-tree-id9365 . -2) (undo-tree-id9366 . -2) (undo-tree-id9367 . -2) (undo-tree-id9368 . -2) (undo-tree-id9369 . -2) (undo-tree-id9370 . -2) (undo-tree-id9371 . -2) (undo-tree-id9372 . -2) (undo-tree-id9373 . -2) (undo-tree-id9374 . -2) (undo-tree-id9375 . -2) (undo-tree-id9376 . -2) (undo-tree-id9377 . -2) (undo-tree-id9378 . -2) (undo-tree-id9379 . -2) (undo-tree-id9380 . -2) (undo-tree-id9381 . -2) (undo-tree-id9382 . -2) (undo-tree-id9383 . -2) (undo-tree-id9384 . -2) (undo-tree-id9385 . -2) (undo-tree-id9386 . -2) (undo-tree-id9387 . -2) (undo-tree-id9388 . -2) (undo-tree-id9389 . -2) (undo-tree-id9390 . -2) (undo-tree-id9391 . -2) (undo-tree-id9392 . -2) (undo-tree-id9393 . -2) (undo-tree-id9394 . -2) (undo-tree-id9395 . -2) (undo-tree-id9396 . -2) (undo-tree-id9397 . -2) (undo-tree-id9398 . -2) (undo-tree-id9399 . -2) (undo-tree-id9400 . -2) (undo-tree-id9401 . -2) (undo-tree-id9402 . -2) (undo-tree-id9403 . -2) (undo-tree-id9404 . -2) (undo-tree-id9405 . -2) (undo-tree-id9406 . -2) (undo-tree-id9407 . -2) (undo-tree-id9408 . -2) 742 (741 . 742) (#("write" 0 5 (fontified nil)) . 741) (undo-tree-id9409 . -5) (740 . 741) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil))) #s(yas--exit 745 nil) 76 nil #s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil)) nil nil)) (734 . 746) (#("write(${1:write})$0" 0 19 (fontified nil)) . 734) (734 . 753) (#("wr" 0 2 (fontified nil)) . 734) (734 . 736) (#("write(…)" 0 8 (fontified nil)) . -734) (734 . 742) (#("wr" 0 2 (fontified t)) . -734) (undo-tree-id9410 . -1) (undo-tree-id9411 . -2) (undo-tree-id9412 . -2) 736 (734 . 736) (733 . 734) (721 . 733) (#("file" 0 4 (fontified nil)) . 721) (721 . 725) (#("file_options" 0 12 (fontified nil)) . -721) (721 . 733) (#("file" 0 4 (fontified t)) . -721) (undo-tree-id9413 . -4) (undo-tree-id9414 . -4) 725 (721 . 725) (717 . 721) (#("    " 0 4 (fontified nil)) . 716) (undo-tree-id9415 . -4) (720 . 721) (716 . 720)) nil (25963 48 331648 796000) 0 nil])
([nil nil ((745 . 746) (apply yas--snippet-revive 734 745 #s(yas--snippet nil (#s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil))) #s(yas--exit 745 nil) 76 nil #s(yas--field 1 740 744 nil nil nil t #s(yas--exit 745 nil)) nil nil))) nil (25963 48 331584 679000) 0 nil])
([nil nil ((684 . 685) (683 . 684) (681 . 683)) nil (25963 48 331564 660000) 0 nil])
([nil nil ((789 . 801) (#("file" 0 4 (fontified nil)) . 789) (789 . 793) (#("file_to_open" 0 12 (fontified nil)) . -789) (789 . 801) (#("file" 0 4 (fontified t)) . -789) (undo-tree-id9994 . -2) (undo-tree-id9995 . -4) (undo-tree-id9996 . -4) 793 (790 . 793) (#("path" 0 4 (fontified nil)) . 790) (789 . 790) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 789 801 nil nil nil t #s(yas--exit 802 nil))) #s(yas--exit 802 nil) 78 nil #s(yas--field 1 789 801 nil nil nil t #s(yas--exit 802 nil)) nil nil)) (784 . 794) (#("open(${1:path})$0" 0 17 (fontified nil)) . 784) (784 . 801) (#("op" 0 2 (fontified nil)) . 784) (784 . 786) (#("open(…)" 0 7 (fontified nil)) . -784) (784 . 791) (#("op" 0 2 (fontified t)) . -784) (undo-tree-id9997 . -2) (undo-tree-id9998 . -2) (undo-tree-id9999 . -2) 786 (783 . 786) (771 . 783) (#("file" 0 4 (fontified nil)) . 771) (771 . 775) (#("file_options" 0 12 (fontified nil)) . -771) (771 . 783) (#("file" 0 4 (fontified t)) . -771) (undo-tree-id10000 . -3) (undo-tree-id10001 . -4) (undo-tree-id10002 . -4) 775 (771 . 775) (#("f" 0 1 (fontified t)) . -771) (undo-tree-id10003 . -1) (undo-tree-id10004 . -1) (#("i" 0 1 (fontified t)) . -772) (undo-tree-id10005 . -1) (undo-tree-id10006 . -1) 773 (769 . 773) (#("-" 0 1 (fontified t)) . -769) (undo-tree-id10007 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id10008 . -1) 771 (769 . 771) (#("-" 0 1 (fontified t)) . -769) (undo-tree-id10009 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id10010 . -1) 771 (760 . 771) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -760) (undo-tree-id10011 . -1) (undo-tree-id10012 . -1) (undo-tree-id10013 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -761) (undo-tree-id10014 . -1) (undo-tree-id10015 . -1) (undo-tree-id10016 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -762) (undo-tree-id10017 . -1) (undo-tree-id10018 . -1) (#(" " 0 1 (fontified t)) . -763) (undo-tree-id10019 . -1) (undo-tree-id10020 . -1) 764 (759 . 764) (756 . 759) (752 . 756) (t 25963 48 350297 766000)) nil (25963 76 590229 498000) 0 nil])
([nil nil ((802 . 803) (apply yas--snippet-revive 784 802 #s(yas--snippet nil (#s(yas--field 1 789 801 nil nil nil t #s(yas--exit 802 nil))) #s(yas--exit 802 nil) 78 nil #s(yas--field 1 789 801 nil nil nil t #s(yas--exit 802 nil)) nil nil))) nil (25963 76 590182 874000) 0 nil])
([nil nil ((805 . 809) (#("    " 0 4 (fontified nil)) . 804) (undo-tree-id10096 . -4) (803 . 809) (t 25963 76 599052 719000)) nil (25963 114 267934 637000) 0 nil])
([nil nil ((#("write" 0 5 (fontified t)) . 738) (undo-tree-id10094 . -4) (undo-tree-id10095 . -5)) nil (25963 114 267931 531000) 0 nil])
([nil nil ((738 . 744) (#("app" 0 3 (fontified nil)) . 738) (738 . 741) (#("append" 0 6 (fontified nil)) . -738) (738 . 744) (#("app" 0 3 (fontified t)) . -738) (undo-tree-id10021 . -3) (undo-tree-id10022 . -3) (undo-tree-id10023 . -1) (undo-tree-id10024 . -1) (undo-tree-id10025 . -1) (undo-tree-id10026 . -1) (undo-tree-id10027 . -1) (undo-tree-id10028 . -1) (undo-tree-id10029 . -1) (undo-tree-id10030 . -1) (undo-tree-id10031 . -1) (undo-tree-id10032 . -2) (undo-tree-id10033 . -2) (undo-tree-id10034 . -2) (undo-tree-id10035 . -2) (undo-tree-id10036 . -2) (undo-tree-id10037 . -2) (undo-tree-id10038 . -2) (undo-tree-id10039 . -2) (undo-tree-id10040 . -2) (undo-tree-id10041 . -2) (undo-tree-id10042 . -2) (undo-tree-id10043 . -2) (undo-tree-id10044 . -2) (undo-tree-id10045 . -2) (undo-tree-id10046 . -2) (undo-tree-id10047 . -2) (undo-tree-id10048 . -2) (undo-tree-id10049 . -2) (undo-tree-id10050 . -2) (undo-tree-id10051 . -2) (undo-tree-id10052 . -2) (undo-tree-id10053 . -2) (undo-tree-id10054 . -2) (undo-tree-id10055 . -2) (undo-tree-id10056 . -2) (undo-tree-id10057 . -2) (undo-tree-id10058 . -2) (undo-tree-id10059 . -2) (undo-tree-id10060 . -2) (undo-tree-id10061 . -2) (undo-tree-id10062 . -2) (undo-tree-id10063 . -3) (undo-tree-id10064 . -3) (undo-tree-id10065 . -3) (undo-tree-id10066 . -3) (undo-tree-id10067 . -3) (undo-tree-id10068 . -3) (undo-tree-id10069 . -3) (undo-tree-id10070 . -3) (undo-tree-id10071 . -3) (undo-tree-id10072 . -3) (undo-tree-id10073 . -3) (undo-tree-id10074 . -3) (undo-tree-id10075 . -3) (undo-tree-id10076 . -3) (undo-tree-id10077 . -3) (undo-tree-id10078 . -3) (undo-tree-id10079 . -3) (undo-tree-id10080 . -3) (undo-tree-id10081 . -3) (undo-tree-id10082 . -3) (undo-tree-id10083 . -3) (undo-tree-id10084 . -3) (undo-tree-id10085 . -3) (undo-tree-id10086 . -3) (undo-tree-id10087 . -3) (undo-tree-id10088 . -3) (undo-tree-id10089 . -3) (undo-tree-id10090 . -3) (undo-tree-id10091 . -3) (undo-tree-id10092 . -3) (undo-tree-id10093 . -3) 741 (738 . 741)) nil (25963 114 267923 323000) 0 nil])
([nil nil ((807 . 811) (#("    " 0 4 (fontified nil)) . 806) (undo-tree-id10187 . -4) (806 . 811) (#("    " 0 4 (fontified nil)) . 805) (805 . 809) (805 . 806) (t 25963 114 288063 480000)) nil (25963 143 747318 893000) 0 nil])
([nil nil ((536 . 538) (apply yas--snippet-revive 529 537 #s(yas--snippet nil nil #s(yas--exit 536 nil) 79 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 536 nil) 79 nil nil nil nil)) (529 . 537) (#("Option<$0>" 0 10 (fontified nil)) . 529) (529 . 539) (#("Op" 0 2 (fontified nil)) . 529) (529 . 531) (#("Option<…>" 0 9 (fontified nil)) . -529) (529 . 538) (#("Op" 0 2 (fontified t face font-lock-type-face)) . -529) (undo-tree-id10185 . -2) (undo-tree-id10186 . -2) 531 (530 . 531) (525 . 530)) nil (25963 143 747315 591000) 0 nil])
([nil nil ((822 . 823) (#("." 0 1 (fontified t)) . -822) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) (undo-tree-id10107 . -1) (undo-tree-id10108 . -1) (undo-tree-id10109 . -1) (undo-tree-id10110 . -1) (undo-tree-id10111 . -1) (undo-tree-id10112 . -1) (undo-tree-id10113 . -1) (undo-tree-id10114 . -1) (undo-tree-id10115 . -1) (undo-tree-id10116 . -1) (undo-tree-id10117 . -1) (undo-tree-id10118 . -1) (undo-tree-id10119 . -1) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -1) (undo-tree-id10123 . -1) (undo-tree-id10124 . -1) (undo-tree-id10125 . -1) (undo-tree-id10126 . -1) (undo-tree-id10127 . -1) (undo-tree-id10128 . -1) (undo-tree-id10129 . -1) (undo-tree-id10130 . -1) (undo-tree-id10131 . -1) (undo-tree-id10132 . -1) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) 823 (822 . 823) (apply yas--snippet-revive 818 822 #s(yas--snippet nil nil #s(yas--exit 822 nil) 80 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 822 nil) 80 nil nil nil nil)) (818 . 822) (#("ok()$0" 0 6 (fontified nil)) . 818) (818 . 824) (#("o" 0 1 (fontified nil)) . 818) (818 . 819) (#("ok()" 0 4 (fontified nil)) . -818) (818 . 822) (#("o" 0 1 (fontified t)) . -818) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) 819 (818 . 819) (817 . 818)) nil (25963 143 747305 212000) 0 nil])
([nil nil ((826 . 830) (t 25963 143 768856 743000)) nil (25963 152 428438 763000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 848 850 nil nil nil nil #s(yas--exit 851 nil))) #s(yas--exit 851 nil) 81 nil #s(yas--field 1 848 850 nil nil nil nil #s(yas--exit 851 nil)) nil nil)) (845 . 851) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 845) (845 . 858) (#("O" 0 1 (fontified nil)) . 845) (845 . 846) (#("Ok(…)" 0 5 (fontified nil)) . -845) (845 . 850) (#("O" 0 1 (fontified t face font-lock-type-face)) . -845) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) 846 (845 . 846) (841 . 845)) nil (25963 152 428433 687000) 0 nil])
([nil nil ((apply yas--snippet-revive 845 851 #s(yas--snippet nil (#s(yas--field 1 848 850 nil nil nil nil #s(yas--exit 851 nil))) #s(yas--exit 851 nil) 81 nil #s(yas--field 1 848 850 nil nil nil nil #s(yas--exit 851 nil)) nil nil))) nil (25963 152 428363 723000) 0 nil])
([nil nil ((825 . 829) (t 25963 152 437090 396000)) nil (25963 162 320056 479000) 0 nil])
([nil nil ((#("Ok" 0 2 (fontified t face font-lock-type-face)) . 849) (undo-tree-id10494 . -1) (undo-tree-id10495 . -2) (undo-tree-id10496 . -2) (undo-tree-id10497 . -2) (undo-tree-id10498 . -2) (undo-tree-id10499 . -2) (undo-tree-id10500 . -2) (undo-tree-id10501 . -2) (undo-tree-id10502 . -2) (undo-tree-id10503 . -2) (undo-tree-id10504 . -2) (undo-tree-id10505 . -2) (undo-tree-id10506 . -2) (undo-tree-id10507 . -2) (undo-tree-id10508 . -2) (undo-tree-id10509 . -2) (undo-tree-id10510 . -2) (undo-tree-id10511 . -2) (undo-tree-id10512 . -2) (undo-tree-id10513 . -2) (undo-tree-id10514 . -2) (undo-tree-id10515 . -2) (undo-tree-id10516 . -2) (undo-tree-id10517 . -2) (undo-tree-id10518 . -2) (undo-tree-id10519 . -2) (undo-tree-id10520 . -2) (undo-tree-id10521 . -2) (undo-tree-id10522 . -2) (undo-tree-id10523 . -2) (undo-tree-id10524 . -2) (undo-tree-id10525 . -2) (undo-tree-id10526 . -2) (undo-tree-id10527 . -2) (undo-tree-id10528 . -2) (undo-tree-id10529 . -2) (undo-tree-id10530 . -2)) nil (25963 162 320054 185000) 0 nil])
([nil nil ((#("(())" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t face (rainbow-delimiters-depth-3-face)) 3 4 (fontified t face (rainbow-delimiters-depth-2-face))) . 849) (undo-tree-id10490 . -3) (undo-tree-id10491 . -1) (undo-tree-id10492 . -4) (undo-tree-id10493 . -4)) nil (25963 162 320032 911000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 848) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (undo-tree-id10358 . -1) (undo-tree-id10359 . -1) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) (undo-tree-id10364 . -1) (undo-tree-id10365 . -1) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (undo-tree-id10394 . -1) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (undo-tree-id10404 . -1) (undo-tree-id10405 . -1) (undo-tree-id10406 . -1) (undo-tree-id10407 . -1) (undo-tree-id10408 . -1) (undo-tree-id10409 . -1) (undo-tree-id10410 . -1) (undo-tree-id10411 . -1) (undo-tree-id10412 . -1) (undo-tree-id10413 . -1) (undo-tree-id10414 . -1) (undo-tree-id10415 . -1) (undo-tree-id10416 . -1) (undo-tree-id10417 . -1) (undo-tree-id10418 . -1) (undo-tree-id10419 . -1) (undo-tree-id10420 . -1) (undo-tree-id10421 . -1) (undo-tree-id10422 . -1) (undo-tree-id10423 . -1) (undo-tree-id10424 . -1) (undo-tree-id10425 . -1) (undo-tree-id10426 . -1) (undo-tree-id10427 . -1) (undo-tree-id10428 . -1) (undo-tree-id10429 . -1) (undo-tree-id10430 . -1) (undo-tree-id10431 . -1) (undo-tree-id10432 . -1) (undo-tree-id10433 . -1) (undo-tree-id10434 . -1) (undo-tree-id10435 . -1) (undo-tree-id10436 . -1) (undo-tree-id10437 . -1) (undo-tree-id10438 . -1) (undo-tree-id10439 . -1) (undo-tree-id10440 . -1) (undo-tree-id10441 . -1) (undo-tree-id10442 . -1) (undo-tree-id10443 . -1) (undo-tree-id10444 . -1) (undo-tree-id10445 . -1) (undo-tree-id10446 . -1) (undo-tree-id10447 . -1) (undo-tree-id10448 . -1) (undo-tree-id10449 . -1) (undo-tree-id10450 . -1) (undo-tree-id10451 . -1) (undo-tree-id10452 . -1) (undo-tree-id10453 . -1) (undo-tree-id10454 . -1) (undo-tree-id10455 . -1) (undo-tree-id10456 . -1) (undo-tree-id10457 . -1) (undo-tree-id10458 . -1) (undo-tree-id10459 . -1) (undo-tree-id10460 . -1) (undo-tree-id10461 . -1) (undo-tree-id10462 . -1) (undo-tree-id10463 . -1) (undo-tree-id10464 . -1) (undo-tree-id10465 . -1) (undo-tree-id10466 . -1) (undo-tree-id10467 . -1) (undo-tree-id10468 . -1) (undo-tree-id10469 . -1) (undo-tree-id10470 . -1) (undo-tree-id10471 . -1) (undo-tree-id10472 . -1) (undo-tree-id10473 . -1) (undo-tree-id10474 . -1) (undo-tree-id10475 . -1) (undo-tree-id10476 . -1) (undo-tree-id10477 . -1) (undo-tree-id10478 . -1) (undo-tree-id10479 . -1) (undo-tree-id10480 . -1) (undo-tree-id10481 . -1) (undo-tree-id10482 . -1) (undo-tree-id10483 . -1) (undo-tree-id10484 . -1) (undo-tree-id10485 . -1) (undo-tree-id10486 . -1) (undo-tree-id10487 . -1) (undo-tree-id10488 . -1) (undo-tree-id10489 . -1)) nil (25963 162 320025 199000) 0 nil])
([nil nil ((848 . 849) 847) nil (25963 162 319653 746000) 0 nil])
([nil nil ((855 . 856) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 855) (undo-tree-id10272 . -2) (undo-tree-id10273 . -1) (854 . 855) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 854 856 nil nil nil t #s(yas--exit 857 nil))) #s(yas--exit 857 nil) 82 nil #s(yas--field 1 854 856 nil nil nil t #s(yas--exit 857 nil)) nil nil)) (849 . 857) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 849) (849 . 864) (#("S" 0 1 (fontified nil)) . 849) (849 . 850) (#("Some(…)" 0 7 (fontified nil)) . -849) (849 . 856) (#("S" 0 1 (fontified t face font-lock-type-face)) . -849) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1) (undo-tree-id10330 . -1) (undo-tree-id10331 . -1) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . -1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) 850 (849 . 850)) nil (25963 162 319645 892000) 0 nil])
([nil nil ((apply yas--snippet-revive 849 857 #s(yas--snippet nil (#s(yas--field 1 854 856 nil nil nil t #s(yas--exit 857 nil))) #s(yas--exit 857 nil) 82 nil #s(yas--field 1 854 856 nil nil nil t #s(yas--exit 857 nil)) nil nil))) nil (25963 199 700305 445000) 0 nil])
([nil nil ((834 . 835) (t 25963 162 361358 140000)) nil (25963 199 700304 62000) 0 nil])
([nil nil ((#("    l
" 0 5 (fontified t) 5 6 (fontified t)) . 830) (undo-tree-id10539 . 1) (undo-tree-id10540 . -5) (undo-tree-id10541 . -4) (undo-tree-id10542 . -4) 834) nil (25963 199 700301 904000) 0 nil])
([nil nil ((849 . 855) (#("mag" 0 3 (fontified nil)) . 849) (849 . 852) (#("magnet" 0 6 (fontified nil)) . -849) (849 . 855) (#("mag" 0 3 (fontified t)) . -849) (undo-tree-id10531 . -3) (undo-tree-id10532 . -3) 852 (850 . 852) (#("buf" 0 3 (fontified nil)) . 850) (849 . 850) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 83 nil #s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil)) nil nil)) (839 . 853) (#("write_all(${1:buf})$0" 0 21 (fontified nil)) . 839) (839 . 860) (#("wr" 0 2 (fontified nil)) . 839) (839 . 841) (#("write_all(…) (as Write)" 0 23 (fontified nil)) . -839) (839 . 862) (#("wr" 0 2 (fontified t)) . -839) (undo-tree-id10533 . -1) (undo-tree-id10534 . -2) (undo-tree-id10535 . -2) 841 (838 . 841) (834 . 838) (#("file" 0 4 (fontified nil)) . 834) (834 . 838) (#("file" 0 4 (fontified t)) . -834) (undo-tree-id10536 . -2) (undo-tree-id10537 . -4) (undo-tree-id10538 . -4) 838 (834 . 838)) nil (25963 199 700290 216000) 0 nil])
([nil nil ((856 . 857) (apply yas--snippet-revive 839 856 #s(yas--snippet nil (#s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 83 nil #s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil)) nil nil))) nil (25963 199 700258 299000) 0 nil])
([nil nil ((apply yas--snippet-revive 856 866 #s(yas--snippet nil nil #s(yas--exit 866 nil) 84 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 866 nil) 84 nil nil nil nil)) (856 . 866) (#("as_bytes()$0" 0 12 (fontified nil)) . 856) (856 . 868) (#("as" 0 2 (fontified nil)) . 856) (856 . 858) (#("as_bytes()" 0 10 (fontified nil)) . -856) (856 . 866) (#("as" 0 2 (fontified t face font-lock-keyword-face)) . -856) (undo-tree-id10543 . -2) (undo-tree-id10544 . -2) (undo-tree-id10545 . -1) (undo-tree-id10546 . -1) (undo-tree-id10547 . -1) (undo-tree-id10548 . -1) (undo-tree-id10549 . -1) (undo-tree-id10550 . -1) (undo-tree-id10551 . -1) (undo-tree-id10552 . -1) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1) (undo-tree-id10556 . -1) (undo-tree-id10557 . -1) (undo-tree-id10558 . -1) (undo-tree-id10559 . -1) (undo-tree-id10560 . -1) (undo-tree-id10561 . -1) (undo-tree-id10562 . -1) (undo-tree-id10563 . -1) (undo-tree-id10564 . -1) (undo-tree-id10565 . -1) (undo-tree-id10566 . -1) (undo-tree-id10567 . -1) (undo-tree-id10568 . -1) (undo-tree-id10569 . -1) (undo-tree-id10570 . -1) (undo-tree-id10571 . -1) (undo-tree-id10572 . -1) (undo-tree-id10573 . -1) (undo-tree-id10574 . -1) (undo-tree-id10575 . -2) (undo-tree-id10576 . -2) (undo-tree-id10577 . -2) (undo-tree-id10578 . -2) (undo-tree-id10579 . -2) (undo-tree-id10580 . -2) (undo-tree-id10581 . -2) (undo-tree-id10582 . -2) (undo-tree-id10583 . -2) (undo-tree-id10584 . -2) (undo-tree-id10585 . -2) (undo-tree-id10586 . -2) (undo-tree-id10587 . -2) (undo-tree-id10588 . -2) (undo-tree-id10589 . -2) (undo-tree-id10590 . -2) (undo-tree-id10591 . -2) (undo-tree-id10592 . -2) (undo-tree-id10593 . -2) (undo-tree-id10594 . -2) (undo-tree-id10595 . -2) (undo-tree-id10596 . -2) (undo-tree-id10597 . -2) (undo-tree-id10598 . -2) (undo-tree-id10599 . -2) (undo-tree-id10600 . -2) (undo-tree-id10601 . -2) (undo-tree-id10602 . -2) (undo-tree-id10603 . -2) (undo-tree-id10604 . -2) (undo-tree-id10605 . -2) 858 (857 . 858) (856 . 857) (855 . 856) (t 25963 199 706367 769000)) nil (25963 209 550204 769000) 0 nil])
([nil nil ((872 . 873) (apply yas--snippet-revive 868 872 #s(yas--snippet nil nil #s(yas--exit 872 nil) 85 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 872 nil) 85 nil nil nil nil)) (868 . 872) (#("ok()$0" 0 6 (fontified nil)) . 868) (868 . 874) (#("o" 0 1 (fontified nil)) . 868) (868 . 869) (#("ok()" 0 4 (fontified nil)) . -868) (868 . 872) (#("o" 0 1 (fontified t)) . -868) (undo-tree-id10606 . -1) (undo-tree-id10607 . -1) (undo-tree-id10608 . -1) (undo-tree-id10609 . -1) (undo-tree-id10610 . -1) (undo-tree-id10611 . -1) (undo-tree-id10612 . -1) (undo-tree-id10613 . -1) (undo-tree-id10614 . -1) (undo-tree-id10615 . -1) (undo-tree-id10616 . -1) (undo-tree-id10617 . -1) (undo-tree-id10618 . -1) (undo-tree-id10619 . -1) (undo-tree-id10620 . -1) (undo-tree-id10621 . -1) (undo-tree-id10622 . -1) (undo-tree-id10623 . -1) (undo-tree-id10624 . -1) (undo-tree-id10625 . -1) (undo-tree-id10626 . -1) (undo-tree-id10627 . -1) (undo-tree-id10628 . -1) (undo-tree-id10629 . -1) (undo-tree-id10630 . -1) (undo-tree-id10631 . -1) (undo-tree-id10632 . -1) (undo-tree-id10633 . -1) (undo-tree-id10634 . -1) (undo-tree-id10635 . -1) (undo-tree-id10636 . -1) (undo-tree-id10637 . -1) (undo-tree-id10638 . -1) (undo-tree-id10639 . -1) (undo-tree-id10640 . -1) (undo-tree-id10641 . -1) (undo-tree-id10642 . -1) (undo-tree-id10643 . -1) (undo-tree-id10644 . -1) (undo-tree-id10645 . -1) (undo-tree-id10646 . -1) (undo-tree-id10647 . -1) (undo-tree-id10648 . -1) (undo-tree-id10649 . -1) 869 (868 . 869) (867 . 868) (t 25963 209 566377 671000)) nil (25963 217 545987 779000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -876) (undo-tree-id10752 . -4) (undo-tree-id10753 . -4) (undo-tree-id10754 . -4) (undo-tree-id10755 . -4) (undo-tree-id10756 . -4) (undo-tree-id10757 . -4) (undo-tree-id10758 . -4) (undo-tree-id10759 . -4) (undo-tree-id10760 . -4) (undo-tree-id10761 . -4) (undo-tree-id10762 . -4) (undo-tree-id10763 . -4) (undo-tree-id10764 . -4) 880 (876 . 880) (#("    " 0 4 (fontified nil)) . 875) (undo-tree-id10765 . -4) (undo-tree-id10766 . -4) (undo-tree-id10767 . -4) (undo-tree-id10768 . -4) (undo-tree-id10769 . -4) (undo-tree-id10770 . -4) (undo-tree-id10771 . -4) (undo-tree-id10772 . -4) (undo-tree-id10773 . -4) (undo-tree-id10774 . -4) (undo-tree-id10775 . -4) (undo-tree-id10776 . -4) (undo-tree-id10777 . -4) (874 . 880) (t 25963 217 590326 572000)) nil (25963 226 375297 964000) 0 nil])
([nil nil ((892 . 893) (apply yas--snippet-revive 885 892 #s(yas--snippet nil nil #s(yas--exit 892 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 892 nil) 86 nil nil nil nil)) (885 . 892) (#("flush()$0" 0 9 (fontified nil)) . 885) (885 . 894) (#("fl" 0 2 (fontified nil)) . 885) (885 . 887) (#("flush() (as Write)" 0 18 (fontified nil)) . -885) (885 . 903) (#("fl" 0 2 (fontified t)) . -885) (undo-tree-id10650 . -1) (undo-tree-id10651 . -2) (undo-tree-id10652 . -2) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1) (undo-tree-id10660 . -1) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1) (undo-tree-id10669 . -1) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) (undo-tree-id10672 . -1) (undo-tree-id10673 . -1) (undo-tree-id10674 . -1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -2) (undo-tree-id10684 . -2) (undo-tree-id10685 . -2) (undo-tree-id10686 . -2) (undo-tree-id10687 . -2) (undo-tree-id10688 . -2) (undo-tree-id10689 . -2) (undo-tree-id10690 . -2) (undo-tree-id10691 . -2) (undo-tree-id10692 . -2) (undo-tree-id10693 . -2) (undo-tree-id10694 . -2) (undo-tree-id10695 . -2) (undo-tree-id10696 . -2) (undo-tree-id10697 . -2) (undo-tree-id10698 . -2) (undo-tree-id10699 . -2) (undo-tree-id10700 . -2) (undo-tree-id10701 . -2) (undo-tree-id10702 . -2) (undo-tree-id10703 . -2) (undo-tree-id10704 . -2) (undo-tree-id10705 . -2) (undo-tree-id10706 . -2) (undo-tree-id10707 . -2) (undo-tree-id10708 . -2) (undo-tree-id10709 . -2) (undo-tree-id10710 . -2) (undo-tree-id10711 . -2) (undo-tree-id10712 . -2) (undo-tree-id10713 . -2) 887 (885 . 887) (884 . 885) (880 . 884) (#("fi" 0 2 (fontified nil)) . 880) (880 . 882) (#("file" 0 4 (fontified nil)) . -880) (880 . 884) (#("fil" 0 3 (fontified t)) . -880) (undo-tree-id10714 . -2) (undo-tree-id10715 . -3) (undo-tree-id10716 . -3) (undo-tree-id10717 . -2) (undo-tree-id10718 . -2) (undo-tree-id10719 . -2) (undo-tree-id10720 . -2) (undo-tree-id10721 . -2) (undo-tree-id10722 . -2) (undo-tree-id10723 . -2) (undo-tree-id10724 . -2) (undo-tree-id10725 . -2) (undo-tree-id10726 . -2) (undo-tree-id10727 . -2) (undo-tree-id10728 . -2) (undo-tree-id10729 . -2) (undo-tree-id10730 . -2) (undo-tree-id10731 . -3) (undo-tree-id10732 . -3) (undo-tree-id10733 . -3) (undo-tree-id10734 . -3) (undo-tree-id10735 . -3) (undo-tree-id10736 . -3) (undo-tree-id10737 . -3) (undo-tree-id10738 . -3) (undo-tree-id10739 . -3) (undo-tree-id10740 . -3) (undo-tree-id10741 . -3) (undo-tree-id10742 . -3) (undo-tree-id10743 . -3) (undo-tree-id10744 . -3) (undo-tree-id10745 . -3) (undo-tree-id10746 . -3) (undo-tree-id10747 . -3) (undo-tree-id10748 . -3) (undo-tree-id10749 . -3) (undo-tree-id10750 . -3) (undo-tree-id10751 . -3) 883 (880 . 883) (876 . 880)) nil (25963 226 375014 370000) 0 nil])
([nil nil ((897 . 898) (apply yas--snippet-revive 893 897 #s(yas--snippet nil nil #s(yas--exit 897 nil) 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 897 nil) 87 nil nil nil nil)) (893 . 897) (#("ok()$0" 0 6 (fontified nil)) . 893) (893 . 899) (#("o" 0 1 (fontified nil)) . 893) (893 . 894) (#("ok()" 0 4 (fontified nil)) . -893) (893 . 897) (#("o" 0 1 (fontified t)) . -893) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) 894 (893 . 894) (892 . 893) (t 25963 226 394274 913000)) nil (25963 233 863363 650000) 0 nil])
([nil nil ((#("Bob" 0 3 (fontified t face font-lock-type-face)) . 455) (undo-tree-id10812 . -2) (undo-tree-id10813 . -3) (t 25963 233 906234 418000)) nil (25963 390 62800 676000) 0 nil])
([nil nil ((455 . 458)) nil (25963 390 62785 302000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face font-lock-type-face)) . 456) (undo-tree-id10821 . -1) (t 25963 390 106063 113000)) nil (25963 399 256945 380000) 0 nil])
([nil nil ((456 . 457)) nil (25963 399 256943 269000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . 456) (undo-tree-id10820 . -1)) nil (25963 399 256942 55000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-type-face)) . 456) (undo-tree-id10814 . 1) (undo-tree-id10815 . 1) (undo-tree-id10816 . -1) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1)) nil (25963 399 256939 283000) 0 nil])
([nil nil ((456 . 458)) nil (25963 399 256920 854000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1358) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) (undo-tree-id10849 . -1) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (undo-tree-id10872 . -1) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (t 25963 399 298088 658000)) nil (25963 5229 401563 872000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1358) (undo-tree-id10822 . -1)) nil (25963 5229 401220 429000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 144) (t 25963 5229 438426 167000)) nil (25963 5239 757755 277000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 144)) nil (25963 5239 757751 564000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 144)) nil (25963 5239 757739 587000) 0 nil])
([nil nil ((893 . 895) (892 . 894) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -892) (undo-tree-id10968 . -1) (#("buf" 0 3 (fontified nil)) . 893) (undo-tree-id10969 . -3) (892 . 893) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil))) #s(yas--exit 908 nil) 88 nil #s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil)) nil nil)) (882 . 896) (#("write_all(${1:buf})$0" 0 21 (fontified nil)) . 882) (882 . 903) (#("wr" 0 2 (fontified nil)) . 882) (882 . 884) (#("write_all(…) (as Write)" 0 23 (fontified nil)) . -882) (882 . 905) (#("wr" 0 2 (fontified t)) . -882) (undo-tree-id10970 . -1) (undo-tree-id10971 . -2) (undo-tree-id10972 . -2) (undo-tree-id10973 . -2) (undo-tree-id10974 . -2) (undo-tree-id10975 . -2) (undo-tree-id10976 . -2) (undo-tree-id10977 . -2) (undo-tree-id10978 . -2) (undo-tree-id10979 . -2) (undo-tree-id10980 . -2) (undo-tree-id10981 . -2) (undo-tree-id10982 . -2) (undo-tree-id10983 . -2) (undo-tree-id10984 . -2) (undo-tree-id10985 . -2) (undo-tree-id10986 . -2) (undo-tree-id10987 . -2) (undo-tree-id10988 . -2) (undo-tree-id10989 . -2) (undo-tree-id10990 . -2) 884 (883 . 884) (882 . 883) (881 . 882) (#(" " 0 1 (fontified t)) . -881) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) 882 (877 . 882) (873 . 877) (#("    " 0 4 (fontified nil)) . 872) (undo-tree-id10993 . -4) (871 . 877) (t 25963 5239 818363 366000)) nil (25963 5275 192810 125000) 0 nil])
([nil current ((913 . 915) (apply yas--snippet-revive 909 913 #s(yas--snippet nil nil #s(yas--exit 913 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 913 nil) 90 nil nil nil nil)) (909 . 913) (#("ok()$0" 0 6 (fontified nil)) . 909) (909 . 915) (#("o" 0 1 (fontified nil)) . 909) (909 . 910) (#("ok()" 0 4 (fontified nil)) . -909) (909 . 913) (#("o" 0 1 (fontified t)) . -909) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) 910 (909 . 910) (908 . 909) (apply yas--snippet-revive 882 908 #s(yas--snippet nil (#s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil))) #s(yas--exit 908 nil) 88 nil #s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil)) nil nil)) (apply yas--snippet-revive 897 907 #s(yas--snippet nil nil #s(yas--exit 907 nil) 89 nil nil #s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 907 nil) 89 nil nil #s(yas--field 1 892 907 nil nil nil t #s(yas--exit 908 nil)) nil)) (897 . 907) (#("as_bytes()$0" 0 12 (fontified nil)) . 897) (undo-tree-id10962 . -12) (897 . 909) (#("as" 0 2 (fontified nil)) . 897) (undo-tree-id10963 . -2) (897 . 899) (#("as_bytes()" 0 10 (fontified nil)) . -897) (undo-tree-id10964 . -10) (897 . 907) (#("as" 0 2 (fontified t face font-lock-keyword-face)) . -897) (undo-tree-id10965 . -2) (undo-tree-id10966 . -2) (undo-tree-id10967 . -2) 899 (898 . 899) (896 . 898)) nil (25963 5275 192671 799000) 0 nil])
nil
